Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> segment
Rule 1     segment -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment
Rule 5     statement -> operation
Rule 6     statement -> print
Rule 7     statement -> if
Rule 8     statement -> else
Rule 9     statement -> elif
Rule 10    statement -> while
Rule 11    statement -> break
Rule 12    statement -> for
Rule 13    statement -> function
Rule 14    statement -> runFunction
Rule 15    statement -> return
Rule 16    statement -> class
Rule 17    statement -> method
Rule 18    class -> CLASS VARIABLE { classFunctions }
Rule 19    class -> CLASS VARIABLE { }
Rule 20    classMem -> VARIABLE . VARIABLE
Rule 21    method -> classMem ( )
Rule 22    method -> classMem ( runFunctionTerms )
Rule 23    classFunctions -> function
Rule 24    classFunctions -> initClass
Rule 25    classFunctions -> classFunctions function
Rule 26    classFunctions -> classFunctions initClass
Rule 27    initClass -> DEF INIT ( runFunctionTerms ) { statements }
Rule 28    return -> RETURN
Rule 29    return -> RETURN term
Rule 30    function -> DEF VARIABLE ( functionTerms ) { statements }
Rule 31    function -> DEF VARIABLE ( ) { statements }
Rule 32    runFunction -> VARIABLE ( runFunctionTerms )
Rule 33    runFunction -> VARIABLE ( )
Rule 34    runFunctionTerms -> term
Rule 35    runFunctionTerms -> runFunctionTerms , term
Rule 36    functionTerms -> VARIABLE
Rule 37    functionTerms -> functionTerms , VARIABLE
Rule 38    break -> BREAK
Rule 39    while -> WHILE ( condition ) { statements }
Rule 40    for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements }
Rule 41    if -> IF ( condition ) { statements }
Rule 42    else -> ELSE { statements }
Rule 43    elif -> ELIF ( condition ) { statements }
Rule 44    and -> condition AND condition
Rule 45    or -> condition OR condition
Rule 46    condition -> greater
Rule 47    condition -> greater_equal
Rule 48    condition -> less
Rule 49    condition -> less_equal
Rule 50    condition -> equal_equal
Rule 51    condition -> and
Rule 52    condition -> or
Rule 53    greater -> term > term
Rule 54    greater_equal -> term > = term
Rule 55    less -> term < term
Rule 56    less_equal -> term < = term
Rule 57    equal_equal -> term = = term
Rule 58    assignment -> VARIABLE = term
Rule 59    assignment -> VARIABLE = array
Rule 60    assignment -> array_term = term
Rule 61    assignment -> term = term
Rule 62    assignment -> VARIABLE + = term
Rule 63    assignment -> array_term + = term
Rule 64    assignment -> VARIABLE - = term
Rule 65    assignment -> array_term - = term
Rule 66    assignment -> VARIABLE * = term
Rule 67    assignment -> array_term * = term
Rule 68    assignment -> VARIABLE / = term
Rule 69    assignment -> array_term / = term
Rule 70    operation -> ADD
Rule 71    operation -> SUB
Rule 72    operation -> MUL
Rule 73    operation -> DIV
Rule 74    operation -> DIV_ext
Rule 75    operation -> ( operation )
Rule 76    ADD -> term + term
Rule 77    SUB -> term - term
Rule 78    MUL -> term * term
Rule 79    DIV -> term / term
Rule 80    DIV_ext -> term / / term
Rule 81    print -> PRINT ( pcontent )
Rule 82    array_term -> VARIABLE [ term ]
Rule 83    array -> [ pcontent ]
Rule 84    pcontent -> pcontent , term
Rule 85    pcontent -> term
Rule 86    string -> quote String quote
Rule 87    string -> quote VARIABLE quote
Rule 88    term -> VARIABLE
Rule 89    term -> NUMBER
Rule 90    term -> operation
Rule 91    term -> array_term
Rule 92    term -> len
Rule 93    term -> runFunction
Rule 94    term -> method
Rule 95    term -> classMem
Rule 96    term -> string
Rule 97    len -> LEN ( VARIABLE )

Terminals, with rules where they appear

(                    : 21 22 27 30 31 32 33 39 40 41 43 75 81 97
)                    : 21 22 27 30 31 32 33 39 40 41 43 75 81 97
*                    : 66 67 78
+                    : 40 40 62 63 76
,                    : 35 37 84
-                    : 64 65 77
.                    : 20
/                    : 68 69 79 80 80
;                    : 40 40
<                    : 55 56
=                    : 54 56 57 57 58 59 60 61 62 63 64 65 66 67 68 69
>                    : 53 54
AND                  : 44
BREAK                : 38
CLASS                : 18 19
DEF                  : 27 30 31
ELIF                 : 43
ELSE                 : 42
FOR                  : 40
IF                   : 41
INIT                 : 27
LEN                  : 97
NUMBER               : 89
OR                   : 45
PRINT                : 81
RETURN               : 28 29
String               : 86
VARIABLE             : 18 19 20 20 30 31 32 33 36 37 40 58 59 62 64 66 68 82 87 88 97
WHILE                : 39
[                    : 82 83
]                    : 82 83
error                : 
quote                : 86 86 87 87
{                    : 18 19 27 30 31 39 40 41 42 43
}                    : 18 19 27 30 31 39 40 41 42 43

Nonterminals, with rules where they appear

ADD                  : 70
DIV                  : 73
DIV_ext              : 74
MUL                  : 72
SUB                  : 71
and                  : 51
array                : 59
array_term           : 60 63 65 67 69 91
assignment           : 4 40
break                : 11
class                : 16
classFunctions       : 18 25 26
classMem             : 21 22 95
condition            : 39 40 41 43 44 44 45 45
elif                 : 9
else                 : 8
equal_equal          : 50
for                  : 12
function             : 13 23 25
functionTerms        : 30 37
greater              : 46
greater_equal        : 47
if                   : 7
initClass            : 24 26
len                  : 92
less                 : 48
less_equal           : 49
method               : 17 94
operation            : 5 75 90
or                   : 52
pcontent             : 81 83 84
print                : 6
return               : 15
runFunction          : 14 93
runFunctionTerms     : 22 27 32 35
segment              : 0
statement            : 2 3
statements           : 1 2 27 30 31 39 40 41 42 43
string               : 96
term                 : 29 34 35 53 53 54 54 55 55 56 56 57 57 58 60 61 61 62 63 64 65 66 67 68 69 76 76 77 77 78 78 79 79 80 80 82 84 85
while                : 10

Parsing method: LALR

state 0

    (0) S' -> . segment
    (1) segment -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    segment                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 1

    (0) S' -> segment .



state 2

    (1) segment -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    $end            reduce using rule 1 (segment -> statements .)
    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    statement                      shift and go to state 43
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 3

    (3) statements -> statement .

    VARIABLE        reduce using rule 3 (statements -> statement .)
    (               reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    ELSE            reduce using rule 3 (statements -> statement .)
    ELIF            reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    BREAK           reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    DEF             reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    CLASS           reduce using rule 3 (statements -> statement .)
    NUMBER          reduce using rule 3 (statements -> statement .)
    LEN             reduce using rule 3 (statements -> statement .)
    quote           reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    }               reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment .

    VARIABLE        reduce using rule 4 (statement -> assignment .)
    (               reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    ELSE            reduce using rule 4 (statement -> assignment .)
    ELIF            reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    BREAK           reduce using rule 4 (statement -> assignment .)
    FOR             reduce using rule 4 (statement -> assignment .)
    DEF             reduce using rule 4 (statement -> assignment .)
    RETURN          reduce using rule 4 (statement -> assignment .)
    CLASS           reduce using rule 4 (statement -> assignment .)
    NUMBER          reduce using rule 4 (statement -> assignment .)
    LEN             reduce using rule 4 (statement -> assignment .)
    quote           reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    }               reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> operation .
    (90) term -> operation .

    VARIABLE        reduce using rule 5 (statement -> operation .)
    (               reduce using rule 5 (statement -> operation .)
    PRINT           reduce using rule 5 (statement -> operation .)
    IF              reduce using rule 5 (statement -> operation .)
    ELSE            reduce using rule 5 (statement -> operation .)
    ELIF            reduce using rule 5 (statement -> operation .)
    WHILE           reduce using rule 5 (statement -> operation .)
    BREAK           reduce using rule 5 (statement -> operation .)
    FOR             reduce using rule 5 (statement -> operation .)
    DEF             reduce using rule 5 (statement -> operation .)
    RETURN          reduce using rule 5 (statement -> operation .)
    CLASS           reduce using rule 5 (statement -> operation .)
    NUMBER          reduce using rule 5 (statement -> operation .)
    LEN             reduce using rule 5 (statement -> operation .)
    quote           reduce using rule 5 (statement -> operation .)
    $end            reduce using rule 5 (statement -> operation .)
    }               reduce using rule 5 (statement -> operation .)
    =               reduce using rule 90 (term -> operation .)
    +               reduce using rule 90 (term -> operation .)
    -               reduce using rule 90 (term -> operation .)
    *               reduce using rule 90 (term -> operation .)
    /               reduce using rule 90 (term -> operation .)


state 6

    (6) statement -> print .

    VARIABLE        reduce using rule 6 (statement -> print .)
    (               reduce using rule 6 (statement -> print .)
    PRINT           reduce using rule 6 (statement -> print .)
    IF              reduce using rule 6 (statement -> print .)
    ELSE            reduce using rule 6 (statement -> print .)
    ELIF            reduce using rule 6 (statement -> print .)
    WHILE           reduce using rule 6 (statement -> print .)
    BREAK           reduce using rule 6 (statement -> print .)
    FOR             reduce using rule 6 (statement -> print .)
    DEF             reduce using rule 6 (statement -> print .)
    RETURN          reduce using rule 6 (statement -> print .)
    CLASS           reduce using rule 6 (statement -> print .)
    NUMBER          reduce using rule 6 (statement -> print .)
    LEN             reduce using rule 6 (statement -> print .)
    quote           reduce using rule 6 (statement -> print .)
    $end            reduce using rule 6 (statement -> print .)
    }               reduce using rule 6 (statement -> print .)


state 7

    (7) statement -> if .

    VARIABLE        reduce using rule 7 (statement -> if .)
    (               reduce using rule 7 (statement -> if .)
    PRINT           reduce using rule 7 (statement -> if .)
    IF              reduce using rule 7 (statement -> if .)
    ELSE            reduce using rule 7 (statement -> if .)
    ELIF            reduce using rule 7 (statement -> if .)
    WHILE           reduce using rule 7 (statement -> if .)
    BREAK           reduce using rule 7 (statement -> if .)
    FOR             reduce using rule 7 (statement -> if .)
    DEF             reduce using rule 7 (statement -> if .)
    RETURN          reduce using rule 7 (statement -> if .)
    CLASS           reduce using rule 7 (statement -> if .)
    NUMBER          reduce using rule 7 (statement -> if .)
    LEN             reduce using rule 7 (statement -> if .)
    quote           reduce using rule 7 (statement -> if .)
    $end            reduce using rule 7 (statement -> if .)
    }               reduce using rule 7 (statement -> if .)


state 8

    (8) statement -> else .

    VARIABLE        reduce using rule 8 (statement -> else .)
    (               reduce using rule 8 (statement -> else .)
    PRINT           reduce using rule 8 (statement -> else .)
    IF              reduce using rule 8 (statement -> else .)
    ELSE            reduce using rule 8 (statement -> else .)
    ELIF            reduce using rule 8 (statement -> else .)
    WHILE           reduce using rule 8 (statement -> else .)
    BREAK           reduce using rule 8 (statement -> else .)
    FOR             reduce using rule 8 (statement -> else .)
    DEF             reduce using rule 8 (statement -> else .)
    RETURN          reduce using rule 8 (statement -> else .)
    CLASS           reduce using rule 8 (statement -> else .)
    NUMBER          reduce using rule 8 (statement -> else .)
    LEN             reduce using rule 8 (statement -> else .)
    quote           reduce using rule 8 (statement -> else .)
    $end            reduce using rule 8 (statement -> else .)
    }               reduce using rule 8 (statement -> else .)


state 9

    (9) statement -> elif .

    VARIABLE        reduce using rule 9 (statement -> elif .)
    (               reduce using rule 9 (statement -> elif .)
    PRINT           reduce using rule 9 (statement -> elif .)
    IF              reduce using rule 9 (statement -> elif .)
    ELSE            reduce using rule 9 (statement -> elif .)
    ELIF            reduce using rule 9 (statement -> elif .)
    WHILE           reduce using rule 9 (statement -> elif .)
    BREAK           reduce using rule 9 (statement -> elif .)
    FOR             reduce using rule 9 (statement -> elif .)
    DEF             reduce using rule 9 (statement -> elif .)
    RETURN          reduce using rule 9 (statement -> elif .)
    CLASS           reduce using rule 9 (statement -> elif .)
    NUMBER          reduce using rule 9 (statement -> elif .)
    LEN             reduce using rule 9 (statement -> elif .)
    quote           reduce using rule 9 (statement -> elif .)
    $end            reduce using rule 9 (statement -> elif .)
    }               reduce using rule 9 (statement -> elif .)


state 10

    (10) statement -> while .

    VARIABLE        reduce using rule 10 (statement -> while .)
    (               reduce using rule 10 (statement -> while .)
    PRINT           reduce using rule 10 (statement -> while .)
    IF              reduce using rule 10 (statement -> while .)
    ELSE            reduce using rule 10 (statement -> while .)
    ELIF            reduce using rule 10 (statement -> while .)
    WHILE           reduce using rule 10 (statement -> while .)
    BREAK           reduce using rule 10 (statement -> while .)
    FOR             reduce using rule 10 (statement -> while .)
    DEF             reduce using rule 10 (statement -> while .)
    RETURN          reduce using rule 10 (statement -> while .)
    CLASS           reduce using rule 10 (statement -> while .)
    NUMBER          reduce using rule 10 (statement -> while .)
    LEN             reduce using rule 10 (statement -> while .)
    quote           reduce using rule 10 (statement -> while .)
    $end            reduce using rule 10 (statement -> while .)
    }               reduce using rule 10 (statement -> while .)


state 11

    (11) statement -> break .

    VARIABLE        reduce using rule 11 (statement -> break .)
    (               reduce using rule 11 (statement -> break .)
    PRINT           reduce using rule 11 (statement -> break .)
    IF              reduce using rule 11 (statement -> break .)
    ELSE            reduce using rule 11 (statement -> break .)
    ELIF            reduce using rule 11 (statement -> break .)
    WHILE           reduce using rule 11 (statement -> break .)
    BREAK           reduce using rule 11 (statement -> break .)
    FOR             reduce using rule 11 (statement -> break .)
    DEF             reduce using rule 11 (statement -> break .)
    RETURN          reduce using rule 11 (statement -> break .)
    CLASS           reduce using rule 11 (statement -> break .)
    NUMBER          reduce using rule 11 (statement -> break .)
    LEN             reduce using rule 11 (statement -> break .)
    quote           reduce using rule 11 (statement -> break .)
    $end            reduce using rule 11 (statement -> break .)
    }               reduce using rule 11 (statement -> break .)


state 12

    (12) statement -> for .

    VARIABLE        reduce using rule 12 (statement -> for .)
    (               reduce using rule 12 (statement -> for .)
    PRINT           reduce using rule 12 (statement -> for .)
    IF              reduce using rule 12 (statement -> for .)
    ELSE            reduce using rule 12 (statement -> for .)
    ELIF            reduce using rule 12 (statement -> for .)
    WHILE           reduce using rule 12 (statement -> for .)
    BREAK           reduce using rule 12 (statement -> for .)
    FOR             reduce using rule 12 (statement -> for .)
    DEF             reduce using rule 12 (statement -> for .)
    RETURN          reduce using rule 12 (statement -> for .)
    CLASS           reduce using rule 12 (statement -> for .)
    NUMBER          reduce using rule 12 (statement -> for .)
    LEN             reduce using rule 12 (statement -> for .)
    quote           reduce using rule 12 (statement -> for .)
    $end            reduce using rule 12 (statement -> for .)
    }               reduce using rule 12 (statement -> for .)


state 13

    (13) statement -> function .

    VARIABLE        reduce using rule 13 (statement -> function .)
    (               reduce using rule 13 (statement -> function .)
    PRINT           reduce using rule 13 (statement -> function .)
    IF              reduce using rule 13 (statement -> function .)
    ELSE            reduce using rule 13 (statement -> function .)
    ELIF            reduce using rule 13 (statement -> function .)
    WHILE           reduce using rule 13 (statement -> function .)
    BREAK           reduce using rule 13 (statement -> function .)
    FOR             reduce using rule 13 (statement -> function .)
    DEF             reduce using rule 13 (statement -> function .)
    RETURN          reduce using rule 13 (statement -> function .)
    CLASS           reduce using rule 13 (statement -> function .)
    NUMBER          reduce using rule 13 (statement -> function .)
    LEN             reduce using rule 13 (statement -> function .)
    quote           reduce using rule 13 (statement -> function .)
    $end            reduce using rule 13 (statement -> function .)
    }               reduce using rule 13 (statement -> function .)


state 14

    (14) statement -> runFunction .
    (93) term -> runFunction .

    VARIABLE        reduce using rule 14 (statement -> runFunction .)
    (               reduce using rule 14 (statement -> runFunction .)
    PRINT           reduce using rule 14 (statement -> runFunction .)
    IF              reduce using rule 14 (statement -> runFunction .)
    ELSE            reduce using rule 14 (statement -> runFunction .)
    ELIF            reduce using rule 14 (statement -> runFunction .)
    WHILE           reduce using rule 14 (statement -> runFunction .)
    BREAK           reduce using rule 14 (statement -> runFunction .)
    FOR             reduce using rule 14 (statement -> runFunction .)
    DEF             reduce using rule 14 (statement -> runFunction .)
    RETURN          reduce using rule 14 (statement -> runFunction .)
    CLASS           reduce using rule 14 (statement -> runFunction .)
    NUMBER          reduce using rule 14 (statement -> runFunction .)
    LEN             reduce using rule 14 (statement -> runFunction .)
    quote           reduce using rule 14 (statement -> runFunction .)
    $end            reduce using rule 14 (statement -> runFunction .)
    }               reduce using rule 14 (statement -> runFunction .)
    =               reduce using rule 93 (term -> runFunction .)
    +               reduce using rule 93 (term -> runFunction .)
    -               reduce using rule 93 (term -> runFunction .)
    *               reduce using rule 93 (term -> runFunction .)
    /               reduce using rule 93 (term -> runFunction .)


state 15

    (15) statement -> return .

    VARIABLE        reduce using rule 15 (statement -> return .)
    (               reduce using rule 15 (statement -> return .)
    PRINT           reduce using rule 15 (statement -> return .)
    IF              reduce using rule 15 (statement -> return .)
    ELSE            reduce using rule 15 (statement -> return .)
    ELIF            reduce using rule 15 (statement -> return .)
    WHILE           reduce using rule 15 (statement -> return .)
    BREAK           reduce using rule 15 (statement -> return .)
    FOR             reduce using rule 15 (statement -> return .)
    DEF             reduce using rule 15 (statement -> return .)
    RETURN          reduce using rule 15 (statement -> return .)
    CLASS           reduce using rule 15 (statement -> return .)
    NUMBER          reduce using rule 15 (statement -> return .)
    LEN             reduce using rule 15 (statement -> return .)
    quote           reduce using rule 15 (statement -> return .)
    $end            reduce using rule 15 (statement -> return .)
    }               reduce using rule 15 (statement -> return .)


state 16

    (16) statement -> class .

    VARIABLE        reduce using rule 16 (statement -> class .)
    (               reduce using rule 16 (statement -> class .)
    PRINT           reduce using rule 16 (statement -> class .)
    IF              reduce using rule 16 (statement -> class .)
    ELSE            reduce using rule 16 (statement -> class .)
    ELIF            reduce using rule 16 (statement -> class .)
    WHILE           reduce using rule 16 (statement -> class .)
    BREAK           reduce using rule 16 (statement -> class .)
    FOR             reduce using rule 16 (statement -> class .)
    DEF             reduce using rule 16 (statement -> class .)
    RETURN          reduce using rule 16 (statement -> class .)
    CLASS           reduce using rule 16 (statement -> class .)
    NUMBER          reduce using rule 16 (statement -> class .)
    LEN             reduce using rule 16 (statement -> class .)
    quote           reduce using rule 16 (statement -> class .)
    $end            reduce using rule 16 (statement -> class .)
    }               reduce using rule 16 (statement -> class .)


state 17

    (17) statement -> method .
    (94) term -> method .

    VARIABLE        reduce using rule 17 (statement -> method .)
    (               reduce using rule 17 (statement -> method .)
    PRINT           reduce using rule 17 (statement -> method .)
    IF              reduce using rule 17 (statement -> method .)
    ELSE            reduce using rule 17 (statement -> method .)
    ELIF            reduce using rule 17 (statement -> method .)
    WHILE           reduce using rule 17 (statement -> method .)
    BREAK           reduce using rule 17 (statement -> method .)
    FOR             reduce using rule 17 (statement -> method .)
    DEF             reduce using rule 17 (statement -> method .)
    RETURN          reduce using rule 17 (statement -> method .)
    CLASS           reduce using rule 17 (statement -> method .)
    NUMBER          reduce using rule 17 (statement -> method .)
    LEN             reduce using rule 17 (statement -> method .)
    quote           reduce using rule 17 (statement -> method .)
    $end            reduce using rule 17 (statement -> method .)
    }               reduce using rule 17 (statement -> method .)
    =               reduce using rule 94 (term -> method .)
    +               reduce using rule 94 (term -> method .)
    -               reduce using rule 94 (term -> method .)
    *               reduce using rule 94 (term -> method .)
    /               reduce using rule 94 (term -> method .)


state 18

    (58) assignment -> VARIABLE . = term
    (59) assignment -> VARIABLE . = array
    (62) assignment -> VARIABLE . + = term
    (64) assignment -> VARIABLE . - = term
    (66) assignment -> VARIABLE . * = term
    (68) assignment -> VARIABLE . / = term
    (32) runFunction -> VARIABLE . ( runFunctionTerms )
    (33) runFunction -> VARIABLE . ( )
    (82) array_term -> VARIABLE . [ term ]
    (88) term -> VARIABLE .
    (20) classMem -> VARIABLE . . VARIABLE

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    =               shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48
    (               shift and go to state 49
    [               shift and go to state 50
    .               shift and go to state 51

  ! =               [ reduce using rule 88 (term -> VARIABLE .) ]
  ! +               [ reduce using rule 88 (term -> VARIABLE .) ]
  ! -               [ reduce using rule 88 (term -> VARIABLE .) ]
  ! *               [ reduce using rule 88 (term -> VARIABLE .) ]
  ! /               [ reduce using rule 88 (term -> VARIABLE .) ]


state 19

    (61) assignment -> term . = term
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    =               shift and go to state 52
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 20

    (60) assignment -> array_term . = term
    (63) assignment -> array_term . + = term
    (65) assignment -> array_term . - = term
    (67) assignment -> array_term . * = term
    (69) assignment -> array_term . / = term
    (91) term -> array_term .

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    =               shift and go to state 57
    +               shift and go to state 58
    -               shift and go to state 59
    *               shift and go to state 60
    /               shift and go to state 61

  ! =               [ reduce using rule 91 (term -> array_term .) ]
  ! +               [ reduce using rule 91 (term -> array_term .) ]
  ! -               [ reduce using rule 91 (term -> array_term .) ]
  ! *               [ reduce using rule 91 (term -> array_term .) ]
  ! /               [ reduce using rule 91 (term -> array_term .) ]


state 21

    (70) operation -> ADD .

    VARIABLE        reduce using rule 70 (operation -> ADD .)
    (               reduce using rule 70 (operation -> ADD .)
    PRINT           reduce using rule 70 (operation -> ADD .)
    IF              reduce using rule 70 (operation -> ADD .)
    ELSE            reduce using rule 70 (operation -> ADD .)
    ELIF            reduce using rule 70 (operation -> ADD .)
    WHILE           reduce using rule 70 (operation -> ADD .)
    BREAK           reduce using rule 70 (operation -> ADD .)
    FOR             reduce using rule 70 (operation -> ADD .)
    DEF             reduce using rule 70 (operation -> ADD .)
    RETURN          reduce using rule 70 (operation -> ADD .)
    CLASS           reduce using rule 70 (operation -> ADD .)
    NUMBER          reduce using rule 70 (operation -> ADD .)
    LEN             reduce using rule 70 (operation -> ADD .)
    quote           reduce using rule 70 (operation -> ADD .)
    $end            reduce using rule 70 (operation -> ADD .)
    =               reduce using rule 70 (operation -> ADD .)
    +               reduce using rule 70 (operation -> ADD .)
    -               reduce using rule 70 (operation -> ADD .)
    *               reduce using rule 70 (operation -> ADD .)
    /               reduce using rule 70 (operation -> ADD .)
    )               reduce using rule 70 (operation -> ADD .)
    }               reduce using rule 70 (operation -> ADD .)
    ;               reduce using rule 70 (operation -> ADD .)
    ,               reduce using rule 70 (operation -> ADD .)
    ]               reduce using rule 70 (operation -> ADD .)
    >               reduce using rule 70 (operation -> ADD .)
    <               reduce using rule 70 (operation -> ADD .)
    AND             reduce using rule 70 (operation -> ADD .)
    OR              reduce using rule 70 (operation -> ADD .)


state 22

    (71) operation -> SUB .

    VARIABLE        reduce using rule 71 (operation -> SUB .)
    (               reduce using rule 71 (operation -> SUB .)
    PRINT           reduce using rule 71 (operation -> SUB .)
    IF              reduce using rule 71 (operation -> SUB .)
    ELSE            reduce using rule 71 (operation -> SUB .)
    ELIF            reduce using rule 71 (operation -> SUB .)
    WHILE           reduce using rule 71 (operation -> SUB .)
    BREAK           reduce using rule 71 (operation -> SUB .)
    FOR             reduce using rule 71 (operation -> SUB .)
    DEF             reduce using rule 71 (operation -> SUB .)
    RETURN          reduce using rule 71 (operation -> SUB .)
    CLASS           reduce using rule 71 (operation -> SUB .)
    NUMBER          reduce using rule 71 (operation -> SUB .)
    LEN             reduce using rule 71 (operation -> SUB .)
    quote           reduce using rule 71 (operation -> SUB .)
    $end            reduce using rule 71 (operation -> SUB .)
    =               reduce using rule 71 (operation -> SUB .)
    +               reduce using rule 71 (operation -> SUB .)
    -               reduce using rule 71 (operation -> SUB .)
    *               reduce using rule 71 (operation -> SUB .)
    /               reduce using rule 71 (operation -> SUB .)
    )               reduce using rule 71 (operation -> SUB .)
    }               reduce using rule 71 (operation -> SUB .)
    ;               reduce using rule 71 (operation -> SUB .)
    ,               reduce using rule 71 (operation -> SUB .)
    ]               reduce using rule 71 (operation -> SUB .)
    >               reduce using rule 71 (operation -> SUB .)
    <               reduce using rule 71 (operation -> SUB .)
    AND             reduce using rule 71 (operation -> SUB .)
    OR              reduce using rule 71 (operation -> SUB .)


state 23

    (72) operation -> MUL .

    VARIABLE        reduce using rule 72 (operation -> MUL .)
    (               reduce using rule 72 (operation -> MUL .)
    PRINT           reduce using rule 72 (operation -> MUL .)
    IF              reduce using rule 72 (operation -> MUL .)
    ELSE            reduce using rule 72 (operation -> MUL .)
    ELIF            reduce using rule 72 (operation -> MUL .)
    WHILE           reduce using rule 72 (operation -> MUL .)
    BREAK           reduce using rule 72 (operation -> MUL .)
    FOR             reduce using rule 72 (operation -> MUL .)
    DEF             reduce using rule 72 (operation -> MUL .)
    RETURN          reduce using rule 72 (operation -> MUL .)
    CLASS           reduce using rule 72 (operation -> MUL .)
    NUMBER          reduce using rule 72 (operation -> MUL .)
    LEN             reduce using rule 72 (operation -> MUL .)
    quote           reduce using rule 72 (operation -> MUL .)
    $end            reduce using rule 72 (operation -> MUL .)
    =               reduce using rule 72 (operation -> MUL .)
    +               reduce using rule 72 (operation -> MUL .)
    -               reduce using rule 72 (operation -> MUL .)
    *               reduce using rule 72 (operation -> MUL .)
    /               reduce using rule 72 (operation -> MUL .)
    )               reduce using rule 72 (operation -> MUL .)
    }               reduce using rule 72 (operation -> MUL .)
    ;               reduce using rule 72 (operation -> MUL .)
    ,               reduce using rule 72 (operation -> MUL .)
    ]               reduce using rule 72 (operation -> MUL .)
    >               reduce using rule 72 (operation -> MUL .)
    <               reduce using rule 72 (operation -> MUL .)
    AND             reduce using rule 72 (operation -> MUL .)
    OR              reduce using rule 72 (operation -> MUL .)


state 24

    (73) operation -> DIV .

    VARIABLE        reduce using rule 73 (operation -> DIV .)
    (               reduce using rule 73 (operation -> DIV .)
    PRINT           reduce using rule 73 (operation -> DIV .)
    IF              reduce using rule 73 (operation -> DIV .)
    ELSE            reduce using rule 73 (operation -> DIV .)
    ELIF            reduce using rule 73 (operation -> DIV .)
    WHILE           reduce using rule 73 (operation -> DIV .)
    BREAK           reduce using rule 73 (operation -> DIV .)
    FOR             reduce using rule 73 (operation -> DIV .)
    DEF             reduce using rule 73 (operation -> DIV .)
    RETURN          reduce using rule 73 (operation -> DIV .)
    CLASS           reduce using rule 73 (operation -> DIV .)
    NUMBER          reduce using rule 73 (operation -> DIV .)
    LEN             reduce using rule 73 (operation -> DIV .)
    quote           reduce using rule 73 (operation -> DIV .)
    $end            reduce using rule 73 (operation -> DIV .)
    =               reduce using rule 73 (operation -> DIV .)
    +               reduce using rule 73 (operation -> DIV .)
    -               reduce using rule 73 (operation -> DIV .)
    *               reduce using rule 73 (operation -> DIV .)
    /               reduce using rule 73 (operation -> DIV .)
    )               reduce using rule 73 (operation -> DIV .)
    }               reduce using rule 73 (operation -> DIV .)
    ;               reduce using rule 73 (operation -> DIV .)
    ,               reduce using rule 73 (operation -> DIV .)
    ]               reduce using rule 73 (operation -> DIV .)
    >               reduce using rule 73 (operation -> DIV .)
    <               reduce using rule 73 (operation -> DIV .)
    AND             reduce using rule 73 (operation -> DIV .)
    OR              reduce using rule 73 (operation -> DIV .)


state 25

    (74) operation -> DIV_ext .

    VARIABLE        reduce using rule 74 (operation -> DIV_ext .)
    (               reduce using rule 74 (operation -> DIV_ext .)
    PRINT           reduce using rule 74 (operation -> DIV_ext .)
    IF              reduce using rule 74 (operation -> DIV_ext .)
    ELSE            reduce using rule 74 (operation -> DIV_ext .)
    ELIF            reduce using rule 74 (operation -> DIV_ext .)
    WHILE           reduce using rule 74 (operation -> DIV_ext .)
    BREAK           reduce using rule 74 (operation -> DIV_ext .)
    FOR             reduce using rule 74 (operation -> DIV_ext .)
    DEF             reduce using rule 74 (operation -> DIV_ext .)
    RETURN          reduce using rule 74 (operation -> DIV_ext .)
    CLASS           reduce using rule 74 (operation -> DIV_ext .)
    NUMBER          reduce using rule 74 (operation -> DIV_ext .)
    LEN             reduce using rule 74 (operation -> DIV_ext .)
    quote           reduce using rule 74 (operation -> DIV_ext .)
    $end            reduce using rule 74 (operation -> DIV_ext .)
    =               reduce using rule 74 (operation -> DIV_ext .)
    +               reduce using rule 74 (operation -> DIV_ext .)
    -               reduce using rule 74 (operation -> DIV_ext .)
    *               reduce using rule 74 (operation -> DIV_ext .)
    /               reduce using rule 74 (operation -> DIV_ext .)
    )               reduce using rule 74 (operation -> DIV_ext .)
    }               reduce using rule 74 (operation -> DIV_ext .)
    ;               reduce using rule 74 (operation -> DIV_ext .)
    ,               reduce using rule 74 (operation -> DIV_ext .)
    ]               reduce using rule 74 (operation -> DIV_ext .)
    >               reduce using rule 74 (operation -> DIV_ext .)
    <               reduce using rule 74 (operation -> DIV_ext .)
    AND             reduce using rule 74 (operation -> DIV_ext .)
    OR              reduce using rule 74 (operation -> DIV_ext .)


state 26

    (75) operation -> ( . operation )
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    (               shift and go to state 26
    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    operation                      shift and go to state 62
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    term                           shift and go to state 63
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40

state 27

    (81) print -> PRINT . ( pcontent )

    (               shift and go to state 69


state 28

    (41) if -> IF . ( condition ) { statements }

    (               shift and go to state 70


state 29

    (42) else -> ELSE . { statements }

    {               shift and go to state 71


state 30

    (43) elif -> ELIF . ( condition ) { statements }

    (               shift and go to state 72


state 31

    (39) while -> WHILE . ( condition ) { statements }

    (               shift and go to state 73


state 32

    (38) break -> BREAK .

    VARIABLE        reduce using rule 38 (break -> BREAK .)
    (               reduce using rule 38 (break -> BREAK .)
    PRINT           reduce using rule 38 (break -> BREAK .)
    IF              reduce using rule 38 (break -> BREAK .)
    ELSE            reduce using rule 38 (break -> BREAK .)
    ELIF            reduce using rule 38 (break -> BREAK .)
    WHILE           reduce using rule 38 (break -> BREAK .)
    BREAK           reduce using rule 38 (break -> BREAK .)
    FOR             reduce using rule 38 (break -> BREAK .)
    DEF             reduce using rule 38 (break -> BREAK .)
    RETURN          reduce using rule 38 (break -> BREAK .)
    CLASS           reduce using rule 38 (break -> BREAK .)
    NUMBER          reduce using rule 38 (break -> BREAK .)
    LEN             reduce using rule 38 (break -> BREAK .)
    quote           reduce using rule 38 (break -> BREAK .)
    $end            reduce using rule 38 (break -> BREAK .)
    }               reduce using rule 38 (break -> BREAK .)


state 33

    (40) for -> FOR . ( assignment ; condition ; VARIABLE + + ) { statements }

    (               shift and go to state 74


state 34

    (30) function -> DEF . VARIABLE ( functionTerms ) { statements }
    (31) function -> DEF . VARIABLE ( ) { statements }

    VARIABLE        shift and go to state 75


state 35

    (28) return -> RETURN .
    (29) return -> RETURN . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for LEN resolved as shift
  ! shift/reduce conflict for quote resolved as shift
    PRINT           reduce using rule 28 (return -> RETURN .)
    IF              reduce using rule 28 (return -> RETURN .)
    ELSE            reduce using rule 28 (return -> RETURN .)
    ELIF            reduce using rule 28 (return -> RETURN .)
    WHILE           reduce using rule 28 (return -> RETURN .)
    BREAK           reduce using rule 28 (return -> RETURN .)
    FOR             reduce using rule 28 (return -> RETURN .)
    DEF             reduce using rule 28 (return -> RETURN .)
    RETURN          reduce using rule 28 (return -> RETURN .)
    CLASS           reduce using rule 28 (return -> RETURN .)
    $end            reduce using rule 28 (return -> RETURN .)
    }               reduce using rule 28 (return -> RETURN .)
    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

  ! VARIABLE        [ reduce using rule 28 (return -> RETURN .) ]
  ! (               [ reduce using rule 28 (return -> RETURN .) ]
  ! NUMBER          [ reduce using rule 28 (return -> RETURN .) ]
  ! LEN             [ reduce using rule 28 (return -> RETURN .) ]
  ! quote           [ reduce using rule 28 (return -> RETURN .) ]

    term                           shift and go to state 76
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 36

    (18) class -> CLASS . VARIABLE { classFunctions }
    (19) class -> CLASS . VARIABLE { }

    VARIABLE        shift and go to state 78


state 37

    (21) method -> classMem . ( )
    (22) method -> classMem . ( runFunctionTerms )
    (95) term -> classMem .

    (               shift and go to state 79
    =               reduce using rule 95 (term -> classMem .)
    +               reduce using rule 95 (term -> classMem .)
    -               reduce using rule 95 (term -> classMem .)
    *               reduce using rule 95 (term -> classMem .)
    /               reduce using rule 95 (term -> classMem .)


state 38

    (89) term -> NUMBER .

    =               reduce using rule 89 (term -> NUMBER .)
    +               reduce using rule 89 (term -> NUMBER .)
    -               reduce using rule 89 (term -> NUMBER .)
    *               reduce using rule 89 (term -> NUMBER .)
    /               reduce using rule 89 (term -> NUMBER .)
    VARIABLE        reduce using rule 89 (term -> NUMBER .)
    (               reduce using rule 89 (term -> NUMBER .)
    PRINT           reduce using rule 89 (term -> NUMBER .)
    IF              reduce using rule 89 (term -> NUMBER .)
    ELSE            reduce using rule 89 (term -> NUMBER .)
    ELIF            reduce using rule 89 (term -> NUMBER .)
    WHILE           reduce using rule 89 (term -> NUMBER .)
    BREAK           reduce using rule 89 (term -> NUMBER .)
    FOR             reduce using rule 89 (term -> NUMBER .)
    DEF             reduce using rule 89 (term -> NUMBER .)
    RETURN          reduce using rule 89 (term -> NUMBER .)
    CLASS           reduce using rule 89 (term -> NUMBER .)
    NUMBER          reduce using rule 89 (term -> NUMBER .)
    LEN             reduce using rule 89 (term -> NUMBER .)
    quote           reduce using rule 89 (term -> NUMBER .)
    $end            reduce using rule 89 (term -> NUMBER .)
    }               reduce using rule 89 (term -> NUMBER .)
    ;               reduce using rule 89 (term -> NUMBER .)
    )               reduce using rule 89 (term -> NUMBER .)
    ,               reduce using rule 89 (term -> NUMBER .)
    ]               reduce using rule 89 (term -> NUMBER .)
    >               reduce using rule 89 (term -> NUMBER .)
    <               reduce using rule 89 (term -> NUMBER .)
    AND             reduce using rule 89 (term -> NUMBER .)
    OR              reduce using rule 89 (term -> NUMBER .)


state 39

    (92) term -> len .

    =               reduce using rule 92 (term -> len .)
    +               reduce using rule 92 (term -> len .)
    -               reduce using rule 92 (term -> len .)
    *               reduce using rule 92 (term -> len .)
    /               reduce using rule 92 (term -> len .)
    VARIABLE        reduce using rule 92 (term -> len .)
    (               reduce using rule 92 (term -> len .)
    PRINT           reduce using rule 92 (term -> len .)
    IF              reduce using rule 92 (term -> len .)
    ELSE            reduce using rule 92 (term -> len .)
    ELIF            reduce using rule 92 (term -> len .)
    WHILE           reduce using rule 92 (term -> len .)
    BREAK           reduce using rule 92 (term -> len .)
    FOR             reduce using rule 92 (term -> len .)
    DEF             reduce using rule 92 (term -> len .)
    RETURN          reduce using rule 92 (term -> len .)
    CLASS           reduce using rule 92 (term -> len .)
    NUMBER          reduce using rule 92 (term -> len .)
    LEN             reduce using rule 92 (term -> len .)
    quote           reduce using rule 92 (term -> len .)
    $end            reduce using rule 92 (term -> len .)
    }               reduce using rule 92 (term -> len .)
    ;               reduce using rule 92 (term -> len .)
    )               reduce using rule 92 (term -> len .)
    ,               reduce using rule 92 (term -> len .)
    ]               reduce using rule 92 (term -> len .)
    >               reduce using rule 92 (term -> len .)
    <               reduce using rule 92 (term -> len .)
    AND             reduce using rule 92 (term -> len .)
    OR              reduce using rule 92 (term -> len .)


state 40

    (96) term -> string .

    =               reduce using rule 96 (term -> string .)
    +               reduce using rule 96 (term -> string .)
    -               reduce using rule 96 (term -> string .)
    *               reduce using rule 96 (term -> string .)
    /               reduce using rule 96 (term -> string .)
    VARIABLE        reduce using rule 96 (term -> string .)
    (               reduce using rule 96 (term -> string .)
    PRINT           reduce using rule 96 (term -> string .)
    IF              reduce using rule 96 (term -> string .)
    ELSE            reduce using rule 96 (term -> string .)
    ELIF            reduce using rule 96 (term -> string .)
    WHILE           reduce using rule 96 (term -> string .)
    BREAK           reduce using rule 96 (term -> string .)
    FOR             reduce using rule 96 (term -> string .)
    DEF             reduce using rule 96 (term -> string .)
    RETURN          reduce using rule 96 (term -> string .)
    CLASS           reduce using rule 96 (term -> string .)
    NUMBER          reduce using rule 96 (term -> string .)
    LEN             reduce using rule 96 (term -> string .)
    quote           reduce using rule 96 (term -> string .)
    $end            reduce using rule 96 (term -> string .)
    }               reduce using rule 96 (term -> string .)
    ;               reduce using rule 96 (term -> string .)
    )               reduce using rule 96 (term -> string .)
    ,               reduce using rule 96 (term -> string .)
    ]               reduce using rule 96 (term -> string .)
    >               reduce using rule 96 (term -> string .)
    <               reduce using rule 96 (term -> string .)
    AND             reduce using rule 96 (term -> string .)
    OR              reduce using rule 96 (term -> string .)


state 41

    (97) len -> LEN . ( VARIABLE )

    (               shift and go to state 80


state 42

    (86) string -> quote . String quote
    (87) string -> quote . VARIABLE quote

    String          shift and go to state 81
    VARIABLE        shift and go to state 82


state 43

    (2) statements -> statements statement .

    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    (               reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    ELSE            reduce using rule 2 (statements -> statements statement .)
    ELIF            reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    BREAK           reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    DEF             reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    CLASS           reduce using rule 2 (statements -> statements statement .)
    NUMBER          reduce using rule 2 (statements -> statements statement .)
    LEN             reduce using rule 2 (statements -> statements statement .)
    quote           reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    }               reduce using rule 2 (statements -> statements statement .)


state 44

    (58) assignment -> VARIABLE = . term
    (59) assignment -> VARIABLE = . array
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (83) array -> . [ pcontent ]
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    [               shift and go to state 85
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 83
    array                          shift and go to state 84
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 45

    (62) assignment -> VARIABLE + . = term

    =               shift and go to state 86


state 46

    (64) assignment -> VARIABLE - . = term

    =               shift and go to state 87


state 47

    (66) assignment -> VARIABLE * . = term

    =               shift and go to state 88


state 48

    (68) assignment -> VARIABLE / . = term

    =               shift and go to state 89


state 49

    (32) runFunction -> VARIABLE ( . runFunctionTerms )
    (33) runFunction -> VARIABLE ( . )
    (34) runFunctionTerms -> . term
    (35) runFunctionTerms -> . runFunctionTerms , term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    )               shift and go to state 91
    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    runFunctionTerms               shift and go to state 90
    term                           shift and go to state 92
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 50

    (82) array_term -> VARIABLE [ . term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 93
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 51

    (20) classMem -> VARIABLE . . VARIABLE

    VARIABLE        shift and go to state 94


state 52

    (61) assignment -> term = . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 95
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 53

    (76) ADD -> term + . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 96
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 54

    (77) SUB -> term - . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 97
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 55

    (78) MUL -> term * . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 98
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 56

    (79) DIV -> term / . term
    (80) DIV_ext -> term / . / term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    /               shift and go to state 100
    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 99
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 57

    (60) assignment -> array_term = . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    array_term                     shift and go to state 65
    term                           shift and go to state 101
    operation                      shift and go to state 77
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 58

    (63) assignment -> array_term + . = term

    =               shift and go to state 102


state 59

    (65) assignment -> array_term - . = term

    =               shift and go to state 103


state 60

    (67) assignment -> array_term * . = term

    =               shift and go to state 104


state 61

    (69) assignment -> array_term / . = term

    =               shift and go to state 105


state 62

    (75) operation -> ( operation . )
    (90) term -> operation .

    )               shift and go to state 106
    +               reduce using rule 90 (term -> operation .)
    -               reduce using rule 90 (term -> operation .)
    *               reduce using rule 90 (term -> operation .)
    /               reduce using rule 90 (term -> operation .)


state 63

    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 64

    (88) term -> VARIABLE .
    (82) array_term -> VARIABLE . [ term ]
    (32) runFunction -> VARIABLE . ( runFunctionTerms )
    (33) runFunction -> VARIABLE . ( )
    (20) classMem -> VARIABLE . . VARIABLE

  ! shift/reduce conflict for ( resolved as shift
    +               reduce using rule 88 (term -> VARIABLE .)
    -               reduce using rule 88 (term -> VARIABLE .)
    *               reduce using rule 88 (term -> VARIABLE .)
    /               reduce using rule 88 (term -> VARIABLE .)
    VARIABLE        reduce using rule 88 (term -> VARIABLE .)
    PRINT           reduce using rule 88 (term -> VARIABLE .)
    IF              reduce using rule 88 (term -> VARIABLE .)
    ELSE            reduce using rule 88 (term -> VARIABLE .)
    ELIF            reduce using rule 88 (term -> VARIABLE .)
    WHILE           reduce using rule 88 (term -> VARIABLE .)
    BREAK           reduce using rule 88 (term -> VARIABLE .)
    FOR             reduce using rule 88 (term -> VARIABLE .)
    DEF             reduce using rule 88 (term -> VARIABLE .)
    RETURN          reduce using rule 88 (term -> VARIABLE .)
    CLASS           reduce using rule 88 (term -> VARIABLE .)
    NUMBER          reduce using rule 88 (term -> VARIABLE .)
    LEN             reduce using rule 88 (term -> VARIABLE .)
    quote           reduce using rule 88 (term -> VARIABLE .)
    $end            reduce using rule 88 (term -> VARIABLE .)
    }               reduce using rule 88 (term -> VARIABLE .)
    ;               reduce using rule 88 (term -> VARIABLE .)
    )               reduce using rule 88 (term -> VARIABLE .)
    ,               reduce using rule 88 (term -> VARIABLE .)
    ]               reduce using rule 88 (term -> VARIABLE .)
    =               reduce using rule 88 (term -> VARIABLE .)
    >               reduce using rule 88 (term -> VARIABLE .)
    <               reduce using rule 88 (term -> VARIABLE .)
    AND             reduce using rule 88 (term -> VARIABLE .)
    OR              reduce using rule 88 (term -> VARIABLE .)
    [               shift and go to state 50
    (               shift and go to state 49
    .               shift and go to state 51

  ! (               [ reduce using rule 88 (term -> VARIABLE .) ]


state 65

    (91) term -> array_term .

    +               reduce using rule 91 (term -> array_term .)
    -               reduce using rule 91 (term -> array_term .)
    *               reduce using rule 91 (term -> array_term .)
    /               reduce using rule 91 (term -> array_term .)
    VARIABLE        reduce using rule 91 (term -> array_term .)
    (               reduce using rule 91 (term -> array_term .)
    PRINT           reduce using rule 91 (term -> array_term .)
    IF              reduce using rule 91 (term -> array_term .)
    ELSE            reduce using rule 91 (term -> array_term .)
    ELIF            reduce using rule 91 (term -> array_term .)
    WHILE           reduce using rule 91 (term -> array_term .)
    BREAK           reduce using rule 91 (term -> array_term .)
    FOR             reduce using rule 91 (term -> array_term .)
    DEF             reduce using rule 91 (term -> array_term .)
    RETURN          reduce using rule 91 (term -> array_term .)
    CLASS           reduce using rule 91 (term -> array_term .)
    NUMBER          reduce using rule 91 (term -> array_term .)
    LEN             reduce using rule 91 (term -> array_term .)
    quote           reduce using rule 91 (term -> array_term .)
    $end            reduce using rule 91 (term -> array_term .)
    }               reduce using rule 91 (term -> array_term .)
    ;               reduce using rule 91 (term -> array_term .)
    )               reduce using rule 91 (term -> array_term .)
    ,               reduce using rule 91 (term -> array_term .)
    ]               reduce using rule 91 (term -> array_term .)
    =               reduce using rule 91 (term -> array_term .)
    >               reduce using rule 91 (term -> array_term .)
    <               reduce using rule 91 (term -> array_term .)
    AND             reduce using rule 91 (term -> array_term .)
    OR              reduce using rule 91 (term -> array_term .)


state 66

    (93) term -> runFunction .

    +               reduce using rule 93 (term -> runFunction .)
    -               reduce using rule 93 (term -> runFunction .)
    *               reduce using rule 93 (term -> runFunction .)
    /               reduce using rule 93 (term -> runFunction .)
    VARIABLE        reduce using rule 93 (term -> runFunction .)
    (               reduce using rule 93 (term -> runFunction .)
    PRINT           reduce using rule 93 (term -> runFunction .)
    IF              reduce using rule 93 (term -> runFunction .)
    ELSE            reduce using rule 93 (term -> runFunction .)
    ELIF            reduce using rule 93 (term -> runFunction .)
    WHILE           reduce using rule 93 (term -> runFunction .)
    BREAK           reduce using rule 93 (term -> runFunction .)
    FOR             reduce using rule 93 (term -> runFunction .)
    DEF             reduce using rule 93 (term -> runFunction .)
    RETURN          reduce using rule 93 (term -> runFunction .)
    CLASS           reduce using rule 93 (term -> runFunction .)
    NUMBER          reduce using rule 93 (term -> runFunction .)
    LEN             reduce using rule 93 (term -> runFunction .)
    quote           reduce using rule 93 (term -> runFunction .)
    $end            reduce using rule 93 (term -> runFunction .)
    }               reduce using rule 93 (term -> runFunction .)
    ;               reduce using rule 93 (term -> runFunction .)
    )               reduce using rule 93 (term -> runFunction .)
    ,               reduce using rule 93 (term -> runFunction .)
    ]               reduce using rule 93 (term -> runFunction .)
    =               reduce using rule 93 (term -> runFunction .)
    >               reduce using rule 93 (term -> runFunction .)
    <               reduce using rule 93 (term -> runFunction .)
    AND             reduce using rule 93 (term -> runFunction .)
    OR              reduce using rule 93 (term -> runFunction .)


state 67

    (94) term -> method .

    +               reduce using rule 94 (term -> method .)
    -               reduce using rule 94 (term -> method .)
    *               reduce using rule 94 (term -> method .)
    /               reduce using rule 94 (term -> method .)
    VARIABLE        reduce using rule 94 (term -> method .)
    (               reduce using rule 94 (term -> method .)
    PRINT           reduce using rule 94 (term -> method .)
    IF              reduce using rule 94 (term -> method .)
    ELSE            reduce using rule 94 (term -> method .)
    ELIF            reduce using rule 94 (term -> method .)
    WHILE           reduce using rule 94 (term -> method .)
    BREAK           reduce using rule 94 (term -> method .)
    FOR             reduce using rule 94 (term -> method .)
    DEF             reduce using rule 94 (term -> method .)
    RETURN          reduce using rule 94 (term -> method .)
    CLASS           reduce using rule 94 (term -> method .)
    NUMBER          reduce using rule 94 (term -> method .)
    LEN             reduce using rule 94 (term -> method .)
    quote           reduce using rule 94 (term -> method .)
    $end            reduce using rule 94 (term -> method .)
    }               reduce using rule 94 (term -> method .)
    ;               reduce using rule 94 (term -> method .)
    )               reduce using rule 94 (term -> method .)
    ,               reduce using rule 94 (term -> method .)
    ]               reduce using rule 94 (term -> method .)
    =               reduce using rule 94 (term -> method .)
    >               reduce using rule 94 (term -> method .)
    <               reduce using rule 94 (term -> method .)
    AND             reduce using rule 94 (term -> method .)
    OR              reduce using rule 94 (term -> method .)


state 68

    (95) term -> classMem .
    (21) method -> classMem . ( )
    (22) method -> classMem . ( runFunctionTerms )

  ! shift/reduce conflict for ( resolved as shift
    +               reduce using rule 95 (term -> classMem .)
    -               reduce using rule 95 (term -> classMem .)
    *               reduce using rule 95 (term -> classMem .)
    /               reduce using rule 95 (term -> classMem .)
    VARIABLE        reduce using rule 95 (term -> classMem .)
    PRINT           reduce using rule 95 (term -> classMem .)
    IF              reduce using rule 95 (term -> classMem .)
    ELSE            reduce using rule 95 (term -> classMem .)
    ELIF            reduce using rule 95 (term -> classMem .)
    WHILE           reduce using rule 95 (term -> classMem .)
    BREAK           reduce using rule 95 (term -> classMem .)
    FOR             reduce using rule 95 (term -> classMem .)
    DEF             reduce using rule 95 (term -> classMem .)
    RETURN          reduce using rule 95 (term -> classMem .)
    CLASS           reduce using rule 95 (term -> classMem .)
    NUMBER          reduce using rule 95 (term -> classMem .)
    LEN             reduce using rule 95 (term -> classMem .)
    quote           reduce using rule 95 (term -> classMem .)
    $end            reduce using rule 95 (term -> classMem .)
    }               reduce using rule 95 (term -> classMem .)
    ;               reduce using rule 95 (term -> classMem .)
    )               reduce using rule 95 (term -> classMem .)
    ,               reduce using rule 95 (term -> classMem .)
    ]               reduce using rule 95 (term -> classMem .)
    =               reduce using rule 95 (term -> classMem .)
    >               reduce using rule 95 (term -> classMem .)
    <               reduce using rule 95 (term -> classMem .)
    AND             reduce using rule 95 (term -> classMem .)
    OR              reduce using rule 95 (term -> classMem .)
    (               shift and go to state 79

  ! (               [ reduce using rule 95 (term -> classMem .) ]


state 69

    (81) print -> PRINT ( . pcontent )
    (84) pcontent -> . pcontent , term
    (85) pcontent -> . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    pcontent                       shift and go to state 107
    term                           shift and go to state 108
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 70

    (41) if -> IF ( . condition ) { statements }
    (46) condition -> . greater
    (47) condition -> . greater_equal
    (48) condition -> . less
    (49) condition -> . less_equal
    (50) condition -> . equal_equal
    (51) condition -> . and
    (52) condition -> . or
    (53) greater -> . term > term
    (54) greater_equal -> . term > = term
    (55) less -> . term < term
    (56) less_equal -> . term < = term
    (57) equal_equal -> . term = = term
    (44) and -> . condition AND condition
    (45) or -> . condition OR condition
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    condition                      shift and go to state 109
    greater                        shift and go to state 110
    greater_equal                  shift and go to state 111
    less                           shift and go to state 112
    less_equal                     shift and go to state 113
    equal_equal                    shift and go to state 114
    and                            shift and go to state 115
    or                             shift and go to state 116
    term                           shift and go to state 117
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 71

    (42) else -> ELSE { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    statements                     shift and go to state 118
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 72

    (43) elif -> ELIF ( . condition ) { statements }
    (46) condition -> . greater
    (47) condition -> . greater_equal
    (48) condition -> . less
    (49) condition -> . less_equal
    (50) condition -> . equal_equal
    (51) condition -> . and
    (52) condition -> . or
    (53) greater -> . term > term
    (54) greater_equal -> . term > = term
    (55) less -> . term < term
    (56) less_equal -> . term < = term
    (57) equal_equal -> . term = = term
    (44) and -> . condition AND condition
    (45) or -> . condition OR condition
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    condition                      shift and go to state 119
    greater                        shift and go to state 110
    greater_equal                  shift and go to state 111
    less                           shift and go to state 112
    less_equal                     shift and go to state 113
    equal_equal                    shift and go to state 114
    and                            shift and go to state 115
    or                             shift and go to state 116
    term                           shift and go to state 117
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 73

    (39) while -> WHILE ( . condition ) { statements }
    (46) condition -> . greater
    (47) condition -> . greater_equal
    (48) condition -> . less
    (49) condition -> . less_equal
    (50) condition -> . equal_equal
    (51) condition -> . and
    (52) condition -> . or
    (53) greater -> . term > term
    (54) greater_equal -> . term > = term
    (55) less -> . term < term
    (56) less_equal -> . term < = term
    (57) equal_equal -> . term = = term
    (44) and -> . condition AND condition
    (45) or -> . condition OR condition
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    condition                      shift and go to state 120
    greater                        shift and go to state 110
    greater_equal                  shift and go to state 111
    less                           shift and go to state 112
    less_equal                     shift and go to state 113
    equal_equal                    shift and go to state 114
    and                            shift and go to state 115
    or                             shift and go to state 116
    term                           shift and go to state 117
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 74

    (40) for -> FOR ( . assignment ; condition ; VARIABLE + + ) { statements }
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 122
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    assignment                     shift and go to state 121
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    operation                      shift and go to state 77
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 75

    (30) function -> DEF VARIABLE . ( functionTerms ) { statements }
    (31) function -> DEF VARIABLE . ( ) { statements }

    (               shift and go to state 123


state 76

    (29) return -> RETURN term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 29 (return -> RETURN term .)
    (               reduce using rule 29 (return -> RETURN term .)
    PRINT           reduce using rule 29 (return -> RETURN term .)
    IF              reduce using rule 29 (return -> RETURN term .)
    ELSE            reduce using rule 29 (return -> RETURN term .)
    ELIF            reduce using rule 29 (return -> RETURN term .)
    WHILE           reduce using rule 29 (return -> RETURN term .)
    BREAK           reduce using rule 29 (return -> RETURN term .)
    FOR             reduce using rule 29 (return -> RETURN term .)
    DEF             reduce using rule 29 (return -> RETURN term .)
    RETURN          reduce using rule 29 (return -> RETURN term .)
    CLASS           reduce using rule 29 (return -> RETURN term .)
    NUMBER          reduce using rule 29 (return -> RETURN term .)
    LEN             reduce using rule 29 (return -> RETURN term .)
    quote           reduce using rule 29 (return -> RETURN term .)
    $end            reduce using rule 29 (return -> RETURN term .)
    }               reduce using rule 29 (return -> RETURN term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 77

    (90) term -> operation .

    +               reduce using rule 90 (term -> operation .)
    -               reduce using rule 90 (term -> operation .)
    *               reduce using rule 90 (term -> operation .)
    /               reduce using rule 90 (term -> operation .)
    VARIABLE        reduce using rule 90 (term -> operation .)
    (               reduce using rule 90 (term -> operation .)
    PRINT           reduce using rule 90 (term -> operation .)
    IF              reduce using rule 90 (term -> operation .)
    ELSE            reduce using rule 90 (term -> operation .)
    ELIF            reduce using rule 90 (term -> operation .)
    WHILE           reduce using rule 90 (term -> operation .)
    BREAK           reduce using rule 90 (term -> operation .)
    FOR             reduce using rule 90 (term -> operation .)
    DEF             reduce using rule 90 (term -> operation .)
    RETURN          reduce using rule 90 (term -> operation .)
    CLASS           reduce using rule 90 (term -> operation .)
    NUMBER          reduce using rule 90 (term -> operation .)
    LEN             reduce using rule 90 (term -> operation .)
    quote           reduce using rule 90 (term -> operation .)
    $end            reduce using rule 90 (term -> operation .)
    }               reduce using rule 90 (term -> operation .)
    ;               reduce using rule 90 (term -> operation .)
    )               reduce using rule 90 (term -> operation .)
    ,               reduce using rule 90 (term -> operation .)
    ]               reduce using rule 90 (term -> operation .)
    =               reduce using rule 90 (term -> operation .)
    >               reduce using rule 90 (term -> operation .)
    <               reduce using rule 90 (term -> operation .)
    AND             reduce using rule 90 (term -> operation .)
    OR              reduce using rule 90 (term -> operation .)


state 78

    (18) class -> CLASS VARIABLE . { classFunctions }
    (19) class -> CLASS VARIABLE . { }

    {               shift and go to state 124


state 79

    (21) method -> classMem ( . )
    (22) method -> classMem ( . runFunctionTerms )
    (34) runFunctionTerms -> . term
    (35) runFunctionTerms -> . runFunctionTerms , term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    )               shift and go to state 125
    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    classMem                       shift and go to state 68
    runFunctionTerms               shift and go to state 126
    term                           shift and go to state 92
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 80

    (97) len -> LEN ( . VARIABLE )

    VARIABLE        shift and go to state 127


state 81

    (86) string -> quote String . quote

    quote           shift and go to state 128


state 82

    (87) string -> quote VARIABLE . quote

    quote           shift and go to state 129


state 83

    (58) assignment -> VARIABLE = term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 58 (assignment -> VARIABLE = term .)
    (               reduce using rule 58 (assignment -> VARIABLE = term .)
    PRINT           reduce using rule 58 (assignment -> VARIABLE = term .)
    IF              reduce using rule 58 (assignment -> VARIABLE = term .)
    ELSE            reduce using rule 58 (assignment -> VARIABLE = term .)
    ELIF            reduce using rule 58 (assignment -> VARIABLE = term .)
    WHILE           reduce using rule 58 (assignment -> VARIABLE = term .)
    BREAK           reduce using rule 58 (assignment -> VARIABLE = term .)
    FOR             reduce using rule 58 (assignment -> VARIABLE = term .)
    DEF             reduce using rule 58 (assignment -> VARIABLE = term .)
    RETURN          reduce using rule 58 (assignment -> VARIABLE = term .)
    CLASS           reduce using rule 58 (assignment -> VARIABLE = term .)
    NUMBER          reduce using rule 58 (assignment -> VARIABLE = term .)
    LEN             reduce using rule 58 (assignment -> VARIABLE = term .)
    quote           reduce using rule 58 (assignment -> VARIABLE = term .)
    $end            reduce using rule 58 (assignment -> VARIABLE = term .)
    }               reduce using rule 58 (assignment -> VARIABLE = term .)
    ;               reduce using rule 58 (assignment -> VARIABLE = term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 84

    (59) assignment -> VARIABLE = array .

    VARIABLE        reduce using rule 59 (assignment -> VARIABLE = array .)
    (               reduce using rule 59 (assignment -> VARIABLE = array .)
    PRINT           reduce using rule 59 (assignment -> VARIABLE = array .)
    IF              reduce using rule 59 (assignment -> VARIABLE = array .)
    ELSE            reduce using rule 59 (assignment -> VARIABLE = array .)
    ELIF            reduce using rule 59 (assignment -> VARIABLE = array .)
    WHILE           reduce using rule 59 (assignment -> VARIABLE = array .)
    BREAK           reduce using rule 59 (assignment -> VARIABLE = array .)
    FOR             reduce using rule 59 (assignment -> VARIABLE = array .)
    DEF             reduce using rule 59 (assignment -> VARIABLE = array .)
    RETURN          reduce using rule 59 (assignment -> VARIABLE = array .)
    CLASS           reduce using rule 59 (assignment -> VARIABLE = array .)
    NUMBER          reduce using rule 59 (assignment -> VARIABLE = array .)
    LEN             reduce using rule 59 (assignment -> VARIABLE = array .)
    quote           reduce using rule 59 (assignment -> VARIABLE = array .)
    $end            reduce using rule 59 (assignment -> VARIABLE = array .)
    }               reduce using rule 59 (assignment -> VARIABLE = array .)
    ;               reduce using rule 59 (assignment -> VARIABLE = array .)


state 85

    (83) array -> [ . pcontent ]
    (84) pcontent -> . pcontent , term
    (85) pcontent -> . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    pcontent                       shift and go to state 130
    term                           shift and go to state 108
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 86

    (62) assignment -> VARIABLE + = . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 131
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 87

    (64) assignment -> VARIABLE - = . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 132
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 88

    (66) assignment -> VARIABLE * = . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 133
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 89

    (68) assignment -> VARIABLE / = . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 134
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 90

    (32) runFunction -> VARIABLE ( runFunctionTerms . )
    (35) runFunctionTerms -> runFunctionTerms . , term

    )               shift and go to state 135
    ,               shift and go to state 136


state 91

    (33) runFunction -> VARIABLE ( ) .

    VARIABLE        reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    (               reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    PRINT           reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    IF              reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    ELSE            reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    ELIF            reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    WHILE           reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    BREAK           reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    FOR             reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    DEF             reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    RETURN          reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    CLASS           reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    NUMBER          reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    LEN             reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    quote           reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    $end            reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    =               reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    +               reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    -               reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    *               reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    /               reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    }               reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    ;               reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    )               reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    ,               reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    ]               reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    >               reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    <               reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    AND             reduce using rule 33 (runFunction -> VARIABLE ( ) .)
    OR              reduce using rule 33 (runFunction -> VARIABLE ( ) .)


state 92

    (34) runFunctionTerms -> term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    )               reduce using rule 34 (runFunctionTerms -> term .)
    ,               reduce using rule 34 (runFunctionTerms -> term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 93

    (82) array_term -> VARIABLE [ term . ]
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    ]               shift and go to state 137
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 94

    (20) classMem -> VARIABLE . VARIABLE .

    (               reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    =               reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    +               reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    -               reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    *               reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    /               reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    VARIABLE        reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    PRINT           reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    IF              reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    ELSE            reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    ELIF            reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    WHILE           reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    BREAK           reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    FOR             reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    DEF             reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    RETURN          reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    CLASS           reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    NUMBER          reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    LEN             reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    quote           reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    $end            reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    }               reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    ;               reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    )               reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    ,               reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    ]               reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    >               reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    <               reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    AND             reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)
    OR              reduce using rule 20 (classMem -> VARIABLE . VARIABLE .)


state 95

    (61) assignment -> term = term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 61 (assignment -> term = term .)
    (               reduce using rule 61 (assignment -> term = term .)
    PRINT           reduce using rule 61 (assignment -> term = term .)
    IF              reduce using rule 61 (assignment -> term = term .)
    ELSE            reduce using rule 61 (assignment -> term = term .)
    ELIF            reduce using rule 61 (assignment -> term = term .)
    WHILE           reduce using rule 61 (assignment -> term = term .)
    BREAK           reduce using rule 61 (assignment -> term = term .)
    FOR             reduce using rule 61 (assignment -> term = term .)
    DEF             reduce using rule 61 (assignment -> term = term .)
    RETURN          reduce using rule 61 (assignment -> term = term .)
    CLASS           reduce using rule 61 (assignment -> term = term .)
    NUMBER          reduce using rule 61 (assignment -> term = term .)
    LEN             reduce using rule 61 (assignment -> term = term .)
    quote           reduce using rule 61 (assignment -> term = term .)
    $end            reduce using rule 61 (assignment -> term = term .)
    }               reduce using rule 61 (assignment -> term = term .)
    ;               reduce using rule 61 (assignment -> term = term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 96

    (76) ADD -> term + term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    VARIABLE        reduce using rule 76 (ADD -> term + term .)
    (               reduce using rule 76 (ADD -> term + term .)
    PRINT           reduce using rule 76 (ADD -> term + term .)
    IF              reduce using rule 76 (ADD -> term + term .)
    ELSE            reduce using rule 76 (ADD -> term + term .)
    ELIF            reduce using rule 76 (ADD -> term + term .)
    WHILE           reduce using rule 76 (ADD -> term + term .)
    BREAK           reduce using rule 76 (ADD -> term + term .)
    FOR             reduce using rule 76 (ADD -> term + term .)
    DEF             reduce using rule 76 (ADD -> term + term .)
    RETURN          reduce using rule 76 (ADD -> term + term .)
    CLASS           reduce using rule 76 (ADD -> term + term .)
    NUMBER          reduce using rule 76 (ADD -> term + term .)
    LEN             reduce using rule 76 (ADD -> term + term .)
    quote           reduce using rule 76 (ADD -> term + term .)
    $end            reduce using rule 76 (ADD -> term + term .)
    =               reduce using rule 76 (ADD -> term + term .)
    )               reduce using rule 76 (ADD -> term + term .)
    }               reduce using rule 76 (ADD -> term + term .)
    ;               reduce using rule 76 (ADD -> term + term .)
    ,               reduce using rule 76 (ADD -> term + term .)
    ]               reduce using rule 76 (ADD -> term + term .)
    >               reduce using rule 76 (ADD -> term + term .)
    <               reduce using rule 76 (ADD -> term + term .)
    AND             reduce using rule 76 (ADD -> term + term .)
    OR              reduce using rule 76 (ADD -> term + term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56

  ! +               [ reduce using rule 76 (ADD -> term + term .) ]
  ! -               [ reduce using rule 76 (ADD -> term + term .) ]
  ! *               [ reduce using rule 76 (ADD -> term + term .) ]
  ! /               [ reduce using rule 76 (ADD -> term + term .) ]


state 97

    (77) SUB -> term - term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    VARIABLE        reduce using rule 77 (SUB -> term - term .)
    (               reduce using rule 77 (SUB -> term - term .)
    PRINT           reduce using rule 77 (SUB -> term - term .)
    IF              reduce using rule 77 (SUB -> term - term .)
    ELSE            reduce using rule 77 (SUB -> term - term .)
    ELIF            reduce using rule 77 (SUB -> term - term .)
    WHILE           reduce using rule 77 (SUB -> term - term .)
    BREAK           reduce using rule 77 (SUB -> term - term .)
    FOR             reduce using rule 77 (SUB -> term - term .)
    DEF             reduce using rule 77 (SUB -> term - term .)
    RETURN          reduce using rule 77 (SUB -> term - term .)
    CLASS           reduce using rule 77 (SUB -> term - term .)
    NUMBER          reduce using rule 77 (SUB -> term - term .)
    LEN             reduce using rule 77 (SUB -> term - term .)
    quote           reduce using rule 77 (SUB -> term - term .)
    $end            reduce using rule 77 (SUB -> term - term .)
    =               reduce using rule 77 (SUB -> term - term .)
    )               reduce using rule 77 (SUB -> term - term .)
    }               reduce using rule 77 (SUB -> term - term .)
    ;               reduce using rule 77 (SUB -> term - term .)
    ,               reduce using rule 77 (SUB -> term - term .)
    ]               reduce using rule 77 (SUB -> term - term .)
    >               reduce using rule 77 (SUB -> term - term .)
    <               reduce using rule 77 (SUB -> term - term .)
    AND             reduce using rule 77 (SUB -> term - term .)
    OR              reduce using rule 77 (SUB -> term - term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56

  ! +               [ reduce using rule 77 (SUB -> term - term .) ]
  ! -               [ reduce using rule 77 (SUB -> term - term .) ]
  ! *               [ reduce using rule 77 (SUB -> term - term .) ]
  ! /               [ reduce using rule 77 (SUB -> term - term .) ]


state 98

    (78) MUL -> term * term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    VARIABLE        reduce using rule 78 (MUL -> term * term .)
    (               reduce using rule 78 (MUL -> term * term .)
    PRINT           reduce using rule 78 (MUL -> term * term .)
    IF              reduce using rule 78 (MUL -> term * term .)
    ELSE            reduce using rule 78 (MUL -> term * term .)
    ELIF            reduce using rule 78 (MUL -> term * term .)
    WHILE           reduce using rule 78 (MUL -> term * term .)
    BREAK           reduce using rule 78 (MUL -> term * term .)
    FOR             reduce using rule 78 (MUL -> term * term .)
    DEF             reduce using rule 78 (MUL -> term * term .)
    RETURN          reduce using rule 78 (MUL -> term * term .)
    CLASS           reduce using rule 78 (MUL -> term * term .)
    NUMBER          reduce using rule 78 (MUL -> term * term .)
    LEN             reduce using rule 78 (MUL -> term * term .)
    quote           reduce using rule 78 (MUL -> term * term .)
    $end            reduce using rule 78 (MUL -> term * term .)
    =               reduce using rule 78 (MUL -> term * term .)
    )               reduce using rule 78 (MUL -> term * term .)
    }               reduce using rule 78 (MUL -> term * term .)
    ;               reduce using rule 78 (MUL -> term * term .)
    ,               reduce using rule 78 (MUL -> term * term .)
    ]               reduce using rule 78 (MUL -> term * term .)
    >               reduce using rule 78 (MUL -> term * term .)
    <               reduce using rule 78 (MUL -> term * term .)
    AND             reduce using rule 78 (MUL -> term * term .)
    OR              reduce using rule 78 (MUL -> term * term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56

  ! +               [ reduce using rule 78 (MUL -> term * term .) ]
  ! -               [ reduce using rule 78 (MUL -> term * term .) ]
  ! *               [ reduce using rule 78 (MUL -> term * term .) ]
  ! /               [ reduce using rule 78 (MUL -> term * term .) ]


state 99

    (79) DIV -> term / term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    VARIABLE        reduce using rule 79 (DIV -> term / term .)
    (               reduce using rule 79 (DIV -> term / term .)
    PRINT           reduce using rule 79 (DIV -> term / term .)
    IF              reduce using rule 79 (DIV -> term / term .)
    ELSE            reduce using rule 79 (DIV -> term / term .)
    ELIF            reduce using rule 79 (DIV -> term / term .)
    WHILE           reduce using rule 79 (DIV -> term / term .)
    BREAK           reduce using rule 79 (DIV -> term / term .)
    FOR             reduce using rule 79 (DIV -> term / term .)
    DEF             reduce using rule 79 (DIV -> term / term .)
    RETURN          reduce using rule 79 (DIV -> term / term .)
    CLASS           reduce using rule 79 (DIV -> term / term .)
    NUMBER          reduce using rule 79 (DIV -> term / term .)
    LEN             reduce using rule 79 (DIV -> term / term .)
    quote           reduce using rule 79 (DIV -> term / term .)
    $end            reduce using rule 79 (DIV -> term / term .)
    =               reduce using rule 79 (DIV -> term / term .)
    )               reduce using rule 79 (DIV -> term / term .)
    }               reduce using rule 79 (DIV -> term / term .)
    ;               reduce using rule 79 (DIV -> term / term .)
    ,               reduce using rule 79 (DIV -> term / term .)
    ]               reduce using rule 79 (DIV -> term / term .)
    >               reduce using rule 79 (DIV -> term / term .)
    <               reduce using rule 79 (DIV -> term / term .)
    AND             reduce using rule 79 (DIV -> term / term .)
    OR              reduce using rule 79 (DIV -> term / term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56

  ! +               [ reduce using rule 79 (DIV -> term / term .) ]
  ! -               [ reduce using rule 79 (DIV -> term / term .) ]
  ! *               [ reduce using rule 79 (DIV -> term / term .) ]
  ! /               [ reduce using rule 79 (DIV -> term / term .) ]


state 100

    (80) DIV_ext -> term / / . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 138
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 101

    (60) assignment -> array_term = term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 60 (assignment -> array_term = term .)
    (               reduce using rule 60 (assignment -> array_term = term .)
    PRINT           reduce using rule 60 (assignment -> array_term = term .)
    IF              reduce using rule 60 (assignment -> array_term = term .)
    ELSE            reduce using rule 60 (assignment -> array_term = term .)
    ELIF            reduce using rule 60 (assignment -> array_term = term .)
    WHILE           reduce using rule 60 (assignment -> array_term = term .)
    BREAK           reduce using rule 60 (assignment -> array_term = term .)
    FOR             reduce using rule 60 (assignment -> array_term = term .)
    DEF             reduce using rule 60 (assignment -> array_term = term .)
    RETURN          reduce using rule 60 (assignment -> array_term = term .)
    CLASS           reduce using rule 60 (assignment -> array_term = term .)
    NUMBER          reduce using rule 60 (assignment -> array_term = term .)
    LEN             reduce using rule 60 (assignment -> array_term = term .)
    quote           reduce using rule 60 (assignment -> array_term = term .)
    $end            reduce using rule 60 (assignment -> array_term = term .)
    }               reduce using rule 60 (assignment -> array_term = term .)
    ;               reduce using rule 60 (assignment -> array_term = term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 102

    (63) assignment -> array_term + = . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    array_term                     shift and go to state 65
    term                           shift and go to state 139
    operation                      shift and go to state 77
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 103

    (65) assignment -> array_term - = . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    array_term                     shift and go to state 65
    term                           shift and go to state 140
    operation                      shift and go to state 77
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 104

    (67) assignment -> array_term * = . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    array_term                     shift and go to state 65
    term                           shift and go to state 141
    operation                      shift and go to state 77
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 105

    (69) assignment -> array_term / = . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    array_term                     shift and go to state 65
    term                           shift and go to state 142
    operation                      shift and go to state 77
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 106

    (75) operation -> ( operation ) .

    VARIABLE        reduce using rule 75 (operation -> ( operation ) .)
    (               reduce using rule 75 (operation -> ( operation ) .)
    PRINT           reduce using rule 75 (operation -> ( operation ) .)
    IF              reduce using rule 75 (operation -> ( operation ) .)
    ELSE            reduce using rule 75 (operation -> ( operation ) .)
    ELIF            reduce using rule 75 (operation -> ( operation ) .)
    WHILE           reduce using rule 75 (operation -> ( operation ) .)
    BREAK           reduce using rule 75 (operation -> ( operation ) .)
    FOR             reduce using rule 75 (operation -> ( operation ) .)
    DEF             reduce using rule 75 (operation -> ( operation ) .)
    RETURN          reduce using rule 75 (operation -> ( operation ) .)
    CLASS           reduce using rule 75 (operation -> ( operation ) .)
    NUMBER          reduce using rule 75 (operation -> ( operation ) .)
    LEN             reduce using rule 75 (operation -> ( operation ) .)
    quote           reduce using rule 75 (operation -> ( operation ) .)
    $end            reduce using rule 75 (operation -> ( operation ) .)
    =               reduce using rule 75 (operation -> ( operation ) .)
    +               reduce using rule 75 (operation -> ( operation ) .)
    -               reduce using rule 75 (operation -> ( operation ) .)
    *               reduce using rule 75 (operation -> ( operation ) .)
    /               reduce using rule 75 (operation -> ( operation ) .)
    )               reduce using rule 75 (operation -> ( operation ) .)
    }               reduce using rule 75 (operation -> ( operation ) .)
    ;               reduce using rule 75 (operation -> ( operation ) .)
    ,               reduce using rule 75 (operation -> ( operation ) .)
    ]               reduce using rule 75 (operation -> ( operation ) .)
    >               reduce using rule 75 (operation -> ( operation ) .)
    <               reduce using rule 75 (operation -> ( operation ) .)
    AND             reduce using rule 75 (operation -> ( operation ) .)
    OR              reduce using rule 75 (operation -> ( operation ) .)


state 107

    (81) print -> PRINT ( pcontent . )
    (84) pcontent -> pcontent . , term

    )               shift and go to state 143
    ,               shift and go to state 144


state 108

    (85) pcontent -> term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    )               reduce using rule 85 (pcontent -> term .)
    ,               reduce using rule 85 (pcontent -> term .)
    ]               reduce using rule 85 (pcontent -> term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 109

    (41) if -> IF ( condition . ) { statements }
    (44) and -> condition . AND condition
    (45) or -> condition . OR condition

    )               shift and go to state 145
    AND             shift and go to state 146
    OR              shift and go to state 147


state 110

    (46) condition -> greater .

    )               reduce using rule 46 (condition -> greater .)
    AND             reduce using rule 46 (condition -> greater .)
    OR              reduce using rule 46 (condition -> greater .)
    ;               reduce using rule 46 (condition -> greater .)


state 111

    (47) condition -> greater_equal .

    )               reduce using rule 47 (condition -> greater_equal .)
    AND             reduce using rule 47 (condition -> greater_equal .)
    OR              reduce using rule 47 (condition -> greater_equal .)
    ;               reduce using rule 47 (condition -> greater_equal .)


state 112

    (48) condition -> less .

    )               reduce using rule 48 (condition -> less .)
    AND             reduce using rule 48 (condition -> less .)
    OR              reduce using rule 48 (condition -> less .)
    ;               reduce using rule 48 (condition -> less .)


state 113

    (49) condition -> less_equal .

    )               reduce using rule 49 (condition -> less_equal .)
    AND             reduce using rule 49 (condition -> less_equal .)
    OR              reduce using rule 49 (condition -> less_equal .)
    ;               reduce using rule 49 (condition -> less_equal .)


state 114

    (50) condition -> equal_equal .

    )               reduce using rule 50 (condition -> equal_equal .)
    AND             reduce using rule 50 (condition -> equal_equal .)
    OR              reduce using rule 50 (condition -> equal_equal .)
    ;               reduce using rule 50 (condition -> equal_equal .)


state 115

    (51) condition -> and .

    )               reduce using rule 51 (condition -> and .)
    AND             reduce using rule 51 (condition -> and .)
    OR              reduce using rule 51 (condition -> and .)
    ;               reduce using rule 51 (condition -> and .)


state 116

    (52) condition -> or .

    )               reduce using rule 52 (condition -> or .)
    AND             reduce using rule 52 (condition -> or .)
    OR              reduce using rule 52 (condition -> or .)
    ;               reduce using rule 52 (condition -> or .)


state 117

    (53) greater -> term . > term
    (54) greater_equal -> term . > = term
    (55) less -> term . < term
    (56) less_equal -> term . < = term
    (57) equal_equal -> term . = = term
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    >               shift and go to state 148
    <               shift and go to state 150
    =               shift and go to state 149
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 118

    (42) else -> ELSE { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    }               shift and go to state 151
    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    statement                      shift and go to state 43
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 119

    (43) elif -> ELIF ( condition . ) { statements }
    (44) and -> condition . AND condition
    (45) or -> condition . OR condition

    )               shift and go to state 152
    AND             shift and go to state 146
    OR              shift and go to state 147


state 120

    (39) while -> WHILE ( condition . ) { statements }
    (44) and -> condition . AND condition
    (45) or -> condition . OR condition

    )               shift and go to state 153
    AND             shift and go to state 146
    OR              shift and go to state 147


state 121

    (40) for -> FOR ( assignment . ; condition ; VARIABLE + + ) { statements }

    ;               shift and go to state 154


state 122

    (58) assignment -> VARIABLE . = term
    (59) assignment -> VARIABLE . = array
    (62) assignment -> VARIABLE . + = term
    (64) assignment -> VARIABLE . - = term
    (66) assignment -> VARIABLE . * = term
    (68) assignment -> VARIABLE . / = term
    (82) array_term -> VARIABLE . [ term ]
    (88) term -> VARIABLE .
    (32) runFunction -> VARIABLE . ( runFunctionTerms )
    (33) runFunction -> VARIABLE . ( )
    (20) classMem -> VARIABLE . . VARIABLE

  ! shift/reduce conflict for = resolved as shift
  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    =               shift and go to state 44
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48
    [               shift and go to state 50
    (               shift and go to state 49
    .               shift and go to state 51

  ! =               [ reduce using rule 88 (term -> VARIABLE .) ]
  ! +               [ reduce using rule 88 (term -> VARIABLE .) ]
  ! -               [ reduce using rule 88 (term -> VARIABLE .) ]
  ! *               [ reduce using rule 88 (term -> VARIABLE .) ]
  ! /               [ reduce using rule 88 (term -> VARIABLE .) ]


state 123

    (30) function -> DEF VARIABLE ( . functionTerms ) { statements }
    (31) function -> DEF VARIABLE ( . ) { statements }
    (36) functionTerms -> . VARIABLE
    (37) functionTerms -> . functionTerms , VARIABLE

    )               shift and go to state 157
    VARIABLE        shift and go to state 155

    functionTerms                  shift and go to state 156

state 124

    (18) class -> CLASS VARIABLE { . classFunctions }
    (19) class -> CLASS VARIABLE { . }
    (23) classFunctions -> . function
    (24) classFunctions -> . initClass
    (25) classFunctions -> . classFunctions function
    (26) classFunctions -> . classFunctions initClass
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (27) initClass -> . DEF INIT ( runFunctionTerms ) { statements }

    }               shift and go to state 159
    DEF             shift and go to state 162

    classFunctions                 shift and go to state 158
    function                       shift and go to state 160
    initClass                      shift and go to state 161

state 125

    (21) method -> classMem ( ) .

    VARIABLE        reduce using rule 21 (method -> classMem ( ) .)
    (               reduce using rule 21 (method -> classMem ( ) .)
    PRINT           reduce using rule 21 (method -> classMem ( ) .)
    IF              reduce using rule 21 (method -> classMem ( ) .)
    ELSE            reduce using rule 21 (method -> classMem ( ) .)
    ELIF            reduce using rule 21 (method -> classMem ( ) .)
    WHILE           reduce using rule 21 (method -> classMem ( ) .)
    BREAK           reduce using rule 21 (method -> classMem ( ) .)
    FOR             reduce using rule 21 (method -> classMem ( ) .)
    DEF             reduce using rule 21 (method -> classMem ( ) .)
    RETURN          reduce using rule 21 (method -> classMem ( ) .)
    CLASS           reduce using rule 21 (method -> classMem ( ) .)
    NUMBER          reduce using rule 21 (method -> classMem ( ) .)
    LEN             reduce using rule 21 (method -> classMem ( ) .)
    quote           reduce using rule 21 (method -> classMem ( ) .)
    $end            reduce using rule 21 (method -> classMem ( ) .)
    =               reduce using rule 21 (method -> classMem ( ) .)
    +               reduce using rule 21 (method -> classMem ( ) .)
    -               reduce using rule 21 (method -> classMem ( ) .)
    *               reduce using rule 21 (method -> classMem ( ) .)
    /               reduce using rule 21 (method -> classMem ( ) .)
    }               reduce using rule 21 (method -> classMem ( ) .)
    ;               reduce using rule 21 (method -> classMem ( ) .)
    )               reduce using rule 21 (method -> classMem ( ) .)
    ,               reduce using rule 21 (method -> classMem ( ) .)
    ]               reduce using rule 21 (method -> classMem ( ) .)
    >               reduce using rule 21 (method -> classMem ( ) .)
    <               reduce using rule 21 (method -> classMem ( ) .)
    AND             reduce using rule 21 (method -> classMem ( ) .)
    OR              reduce using rule 21 (method -> classMem ( ) .)


state 126

    (22) method -> classMem ( runFunctionTerms . )
    (35) runFunctionTerms -> runFunctionTerms . , term

    )               shift and go to state 163
    ,               shift and go to state 136


state 127

    (97) len -> LEN ( VARIABLE . )

    )               shift and go to state 164


state 128

    (86) string -> quote String quote .

    =               reduce using rule 86 (string -> quote String quote .)
    +               reduce using rule 86 (string -> quote String quote .)
    -               reduce using rule 86 (string -> quote String quote .)
    *               reduce using rule 86 (string -> quote String quote .)
    /               reduce using rule 86 (string -> quote String quote .)
    VARIABLE        reduce using rule 86 (string -> quote String quote .)
    (               reduce using rule 86 (string -> quote String quote .)
    PRINT           reduce using rule 86 (string -> quote String quote .)
    IF              reduce using rule 86 (string -> quote String quote .)
    ELSE            reduce using rule 86 (string -> quote String quote .)
    ELIF            reduce using rule 86 (string -> quote String quote .)
    WHILE           reduce using rule 86 (string -> quote String quote .)
    BREAK           reduce using rule 86 (string -> quote String quote .)
    FOR             reduce using rule 86 (string -> quote String quote .)
    DEF             reduce using rule 86 (string -> quote String quote .)
    RETURN          reduce using rule 86 (string -> quote String quote .)
    CLASS           reduce using rule 86 (string -> quote String quote .)
    NUMBER          reduce using rule 86 (string -> quote String quote .)
    LEN             reduce using rule 86 (string -> quote String quote .)
    quote           reduce using rule 86 (string -> quote String quote .)
    $end            reduce using rule 86 (string -> quote String quote .)
    }               reduce using rule 86 (string -> quote String quote .)
    ;               reduce using rule 86 (string -> quote String quote .)
    )               reduce using rule 86 (string -> quote String quote .)
    ,               reduce using rule 86 (string -> quote String quote .)
    ]               reduce using rule 86 (string -> quote String quote .)
    >               reduce using rule 86 (string -> quote String quote .)
    <               reduce using rule 86 (string -> quote String quote .)
    AND             reduce using rule 86 (string -> quote String quote .)
    OR              reduce using rule 86 (string -> quote String quote .)


state 129

    (87) string -> quote VARIABLE quote .

    =               reduce using rule 87 (string -> quote VARIABLE quote .)
    +               reduce using rule 87 (string -> quote VARIABLE quote .)
    -               reduce using rule 87 (string -> quote VARIABLE quote .)
    *               reduce using rule 87 (string -> quote VARIABLE quote .)
    /               reduce using rule 87 (string -> quote VARIABLE quote .)
    VARIABLE        reduce using rule 87 (string -> quote VARIABLE quote .)
    (               reduce using rule 87 (string -> quote VARIABLE quote .)
    PRINT           reduce using rule 87 (string -> quote VARIABLE quote .)
    IF              reduce using rule 87 (string -> quote VARIABLE quote .)
    ELSE            reduce using rule 87 (string -> quote VARIABLE quote .)
    ELIF            reduce using rule 87 (string -> quote VARIABLE quote .)
    WHILE           reduce using rule 87 (string -> quote VARIABLE quote .)
    BREAK           reduce using rule 87 (string -> quote VARIABLE quote .)
    FOR             reduce using rule 87 (string -> quote VARIABLE quote .)
    DEF             reduce using rule 87 (string -> quote VARIABLE quote .)
    RETURN          reduce using rule 87 (string -> quote VARIABLE quote .)
    CLASS           reduce using rule 87 (string -> quote VARIABLE quote .)
    NUMBER          reduce using rule 87 (string -> quote VARIABLE quote .)
    LEN             reduce using rule 87 (string -> quote VARIABLE quote .)
    quote           reduce using rule 87 (string -> quote VARIABLE quote .)
    $end            reduce using rule 87 (string -> quote VARIABLE quote .)
    }               reduce using rule 87 (string -> quote VARIABLE quote .)
    ;               reduce using rule 87 (string -> quote VARIABLE quote .)
    )               reduce using rule 87 (string -> quote VARIABLE quote .)
    ,               reduce using rule 87 (string -> quote VARIABLE quote .)
    ]               reduce using rule 87 (string -> quote VARIABLE quote .)
    >               reduce using rule 87 (string -> quote VARIABLE quote .)
    <               reduce using rule 87 (string -> quote VARIABLE quote .)
    AND             reduce using rule 87 (string -> quote VARIABLE quote .)
    OR              reduce using rule 87 (string -> quote VARIABLE quote .)


state 130

    (83) array -> [ pcontent . ]
    (84) pcontent -> pcontent . , term

    ]               shift and go to state 165
    ,               shift and go to state 144


state 131

    (62) assignment -> VARIABLE + = term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 62 (assignment -> VARIABLE + = term .)
    (               reduce using rule 62 (assignment -> VARIABLE + = term .)
    PRINT           reduce using rule 62 (assignment -> VARIABLE + = term .)
    IF              reduce using rule 62 (assignment -> VARIABLE + = term .)
    ELSE            reduce using rule 62 (assignment -> VARIABLE + = term .)
    ELIF            reduce using rule 62 (assignment -> VARIABLE + = term .)
    WHILE           reduce using rule 62 (assignment -> VARIABLE + = term .)
    BREAK           reduce using rule 62 (assignment -> VARIABLE + = term .)
    FOR             reduce using rule 62 (assignment -> VARIABLE + = term .)
    DEF             reduce using rule 62 (assignment -> VARIABLE + = term .)
    RETURN          reduce using rule 62 (assignment -> VARIABLE + = term .)
    CLASS           reduce using rule 62 (assignment -> VARIABLE + = term .)
    NUMBER          reduce using rule 62 (assignment -> VARIABLE + = term .)
    LEN             reduce using rule 62 (assignment -> VARIABLE + = term .)
    quote           reduce using rule 62 (assignment -> VARIABLE + = term .)
    $end            reduce using rule 62 (assignment -> VARIABLE + = term .)
    }               reduce using rule 62 (assignment -> VARIABLE + = term .)
    ;               reduce using rule 62 (assignment -> VARIABLE + = term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 132

    (64) assignment -> VARIABLE - = term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 64 (assignment -> VARIABLE - = term .)
    (               reduce using rule 64 (assignment -> VARIABLE - = term .)
    PRINT           reduce using rule 64 (assignment -> VARIABLE - = term .)
    IF              reduce using rule 64 (assignment -> VARIABLE - = term .)
    ELSE            reduce using rule 64 (assignment -> VARIABLE - = term .)
    ELIF            reduce using rule 64 (assignment -> VARIABLE - = term .)
    WHILE           reduce using rule 64 (assignment -> VARIABLE - = term .)
    BREAK           reduce using rule 64 (assignment -> VARIABLE - = term .)
    FOR             reduce using rule 64 (assignment -> VARIABLE - = term .)
    DEF             reduce using rule 64 (assignment -> VARIABLE - = term .)
    RETURN          reduce using rule 64 (assignment -> VARIABLE - = term .)
    CLASS           reduce using rule 64 (assignment -> VARIABLE - = term .)
    NUMBER          reduce using rule 64 (assignment -> VARIABLE - = term .)
    LEN             reduce using rule 64 (assignment -> VARIABLE - = term .)
    quote           reduce using rule 64 (assignment -> VARIABLE - = term .)
    $end            reduce using rule 64 (assignment -> VARIABLE - = term .)
    }               reduce using rule 64 (assignment -> VARIABLE - = term .)
    ;               reduce using rule 64 (assignment -> VARIABLE - = term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 133

    (66) assignment -> VARIABLE * = term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 66 (assignment -> VARIABLE * = term .)
    (               reduce using rule 66 (assignment -> VARIABLE * = term .)
    PRINT           reduce using rule 66 (assignment -> VARIABLE * = term .)
    IF              reduce using rule 66 (assignment -> VARIABLE * = term .)
    ELSE            reduce using rule 66 (assignment -> VARIABLE * = term .)
    ELIF            reduce using rule 66 (assignment -> VARIABLE * = term .)
    WHILE           reduce using rule 66 (assignment -> VARIABLE * = term .)
    BREAK           reduce using rule 66 (assignment -> VARIABLE * = term .)
    FOR             reduce using rule 66 (assignment -> VARIABLE * = term .)
    DEF             reduce using rule 66 (assignment -> VARIABLE * = term .)
    RETURN          reduce using rule 66 (assignment -> VARIABLE * = term .)
    CLASS           reduce using rule 66 (assignment -> VARIABLE * = term .)
    NUMBER          reduce using rule 66 (assignment -> VARIABLE * = term .)
    LEN             reduce using rule 66 (assignment -> VARIABLE * = term .)
    quote           reduce using rule 66 (assignment -> VARIABLE * = term .)
    $end            reduce using rule 66 (assignment -> VARIABLE * = term .)
    }               reduce using rule 66 (assignment -> VARIABLE * = term .)
    ;               reduce using rule 66 (assignment -> VARIABLE * = term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 134

    (68) assignment -> VARIABLE / = term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 68 (assignment -> VARIABLE / = term .)
    (               reduce using rule 68 (assignment -> VARIABLE / = term .)
    PRINT           reduce using rule 68 (assignment -> VARIABLE / = term .)
    IF              reduce using rule 68 (assignment -> VARIABLE / = term .)
    ELSE            reduce using rule 68 (assignment -> VARIABLE / = term .)
    ELIF            reduce using rule 68 (assignment -> VARIABLE / = term .)
    WHILE           reduce using rule 68 (assignment -> VARIABLE / = term .)
    BREAK           reduce using rule 68 (assignment -> VARIABLE / = term .)
    FOR             reduce using rule 68 (assignment -> VARIABLE / = term .)
    DEF             reduce using rule 68 (assignment -> VARIABLE / = term .)
    RETURN          reduce using rule 68 (assignment -> VARIABLE / = term .)
    CLASS           reduce using rule 68 (assignment -> VARIABLE / = term .)
    NUMBER          reduce using rule 68 (assignment -> VARIABLE / = term .)
    LEN             reduce using rule 68 (assignment -> VARIABLE / = term .)
    quote           reduce using rule 68 (assignment -> VARIABLE / = term .)
    $end            reduce using rule 68 (assignment -> VARIABLE / = term .)
    }               reduce using rule 68 (assignment -> VARIABLE / = term .)
    ;               reduce using rule 68 (assignment -> VARIABLE / = term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 135

    (32) runFunction -> VARIABLE ( runFunctionTerms ) .

    VARIABLE        reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    (               reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    PRINT           reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    IF              reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    ELSE            reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    ELIF            reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    WHILE           reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    BREAK           reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    FOR             reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    DEF             reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    RETURN          reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    CLASS           reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    NUMBER          reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    LEN             reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    quote           reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    $end            reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    =               reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    +               reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    -               reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    *               reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    /               reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    }               reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    ;               reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    )               reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    ,               reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    ]               reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    >               reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    <               reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    AND             reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    OR              reduce using rule 32 (runFunction -> VARIABLE ( runFunctionTerms ) .)


state 136

    (35) runFunctionTerms -> runFunctionTerms , . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 166
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 137

    (82) array_term -> VARIABLE [ term ] .

    =               reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    +               reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    -               reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    *               reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    /               reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    VARIABLE        reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    (               reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    PRINT           reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    IF              reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    ELSE            reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    ELIF            reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    WHILE           reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    BREAK           reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    FOR             reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    DEF             reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    RETURN          reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    CLASS           reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    NUMBER          reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    LEN             reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    quote           reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    $end            reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    }               reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    ;               reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    )               reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    ,               reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    ]               reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    >               reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    <               reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    AND             reduce using rule 82 (array_term -> VARIABLE [ term ] .)
    OR              reduce using rule 82 (array_term -> VARIABLE [ term ] .)


state 138

    (80) DIV_ext -> term / / term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    VARIABLE        reduce using rule 80 (DIV_ext -> term / / term .)
    (               reduce using rule 80 (DIV_ext -> term / / term .)
    PRINT           reduce using rule 80 (DIV_ext -> term / / term .)
    IF              reduce using rule 80 (DIV_ext -> term / / term .)
    ELSE            reduce using rule 80 (DIV_ext -> term / / term .)
    ELIF            reduce using rule 80 (DIV_ext -> term / / term .)
    WHILE           reduce using rule 80 (DIV_ext -> term / / term .)
    BREAK           reduce using rule 80 (DIV_ext -> term / / term .)
    FOR             reduce using rule 80 (DIV_ext -> term / / term .)
    DEF             reduce using rule 80 (DIV_ext -> term / / term .)
    RETURN          reduce using rule 80 (DIV_ext -> term / / term .)
    CLASS           reduce using rule 80 (DIV_ext -> term / / term .)
    NUMBER          reduce using rule 80 (DIV_ext -> term / / term .)
    LEN             reduce using rule 80 (DIV_ext -> term / / term .)
    quote           reduce using rule 80 (DIV_ext -> term / / term .)
    $end            reduce using rule 80 (DIV_ext -> term / / term .)
    =               reduce using rule 80 (DIV_ext -> term / / term .)
    )               reduce using rule 80 (DIV_ext -> term / / term .)
    }               reduce using rule 80 (DIV_ext -> term / / term .)
    ;               reduce using rule 80 (DIV_ext -> term / / term .)
    ,               reduce using rule 80 (DIV_ext -> term / / term .)
    ]               reduce using rule 80 (DIV_ext -> term / / term .)
    >               reduce using rule 80 (DIV_ext -> term / / term .)
    <               reduce using rule 80 (DIV_ext -> term / / term .)
    AND             reduce using rule 80 (DIV_ext -> term / / term .)
    OR              reduce using rule 80 (DIV_ext -> term / / term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56

  ! +               [ reduce using rule 80 (DIV_ext -> term / / term .) ]
  ! -               [ reduce using rule 80 (DIV_ext -> term / / term .) ]
  ! *               [ reduce using rule 80 (DIV_ext -> term / / term .) ]
  ! /               [ reduce using rule 80 (DIV_ext -> term / / term .) ]


state 139

    (63) assignment -> array_term + = term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 63 (assignment -> array_term + = term .)
    (               reduce using rule 63 (assignment -> array_term + = term .)
    PRINT           reduce using rule 63 (assignment -> array_term + = term .)
    IF              reduce using rule 63 (assignment -> array_term + = term .)
    ELSE            reduce using rule 63 (assignment -> array_term + = term .)
    ELIF            reduce using rule 63 (assignment -> array_term + = term .)
    WHILE           reduce using rule 63 (assignment -> array_term + = term .)
    BREAK           reduce using rule 63 (assignment -> array_term + = term .)
    FOR             reduce using rule 63 (assignment -> array_term + = term .)
    DEF             reduce using rule 63 (assignment -> array_term + = term .)
    RETURN          reduce using rule 63 (assignment -> array_term + = term .)
    CLASS           reduce using rule 63 (assignment -> array_term + = term .)
    NUMBER          reduce using rule 63 (assignment -> array_term + = term .)
    LEN             reduce using rule 63 (assignment -> array_term + = term .)
    quote           reduce using rule 63 (assignment -> array_term + = term .)
    $end            reduce using rule 63 (assignment -> array_term + = term .)
    }               reduce using rule 63 (assignment -> array_term + = term .)
    ;               reduce using rule 63 (assignment -> array_term + = term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 140

    (65) assignment -> array_term - = term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 65 (assignment -> array_term - = term .)
    (               reduce using rule 65 (assignment -> array_term - = term .)
    PRINT           reduce using rule 65 (assignment -> array_term - = term .)
    IF              reduce using rule 65 (assignment -> array_term - = term .)
    ELSE            reduce using rule 65 (assignment -> array_term - = term .)
    ELIF            reduce using rule 65 (assignment -> array_term - = term .)
    WHILE           reduce using rule 65 (assignment -> array_term - = term .)
    BREAK           reduce using rule 65 (assignment -> array_term - = term .)
    FOR             reduce using rule 65 (assignment -> array_term - = term .)
    DEF             reduce using rule 65 (assignment -> array_term - = term .)
    RETURN          reduce using rule 65 (assignment -> array_term - = term .)
    CLASS           reduce using rule 65 (assignment -> array_term - = term .)
    NUMBER          reduce using rule 65 (assignment -> array_term - = term .)
    LEN             reduce using rule 65 (assignment -> array_term - = term .)
    quote           reduce using rule 65 (assignment -> array_term - = term .)
    $end            reduce using rule 65 (assignment -> array_term - = term .)
    }               reduce using rule 65 (assignment -> array_term - = term .)
    ;               reduce using rule 65 (assignment -> array_term - = term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 141

    (67) assignment -> array_term * = term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 67 (assignment -> array_term * = term .)
    (               reduce using rule 67 (assignment -> array_term * = term .)
    PRINT           reduce using rule 67 (assignment -> array_term * = term .)
    IF              reduce using rule 67 (assignment -> array_term * = term .)
    ELSE            reduce using rule 67 (assignment -> array_term * = term .)
    ELIF            reduce using rule 67 (assignment -> array_term * = term .)
    WHILE           reduce using rule 67 (assignment -> array_term * = term .)
    BREAK           reduce using rule 67 (assignment -> array_term * = term .)
    FOR             reduce using rule 67 (assignment -> array_term * = term .)
    DEF             reduce using rule 67 (assignment -> array_term * = term .)
    RETURN          reduce using rule 67 (assignment -> array_term * = term .)
    CLASS           reduce using rule 67 (assignment -> array_term * = term .)
    NUMBER          reduce using rule 67 (assignment -> array_term * = term .)
    LEN             reduce using rule 67 (assignment -> array_term * = term .)
    quote           reduce using rule 67 (assignment -> array_term * = term .)
    $end            reduce using rule 67 (assignment -> array_term * = term .)
    }               reduce using rule 67 (assignment -> array_term * = term .)
    ;               reduce using rule 67 (assignment -> array_term * = term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 142

    (69) assignment -> array_term / = term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 69 (assignment -> array_term / = term .)
    (               reduce using rule 69 (assignment -> array_term / = term .)
    PRINT           reduce using rule 69 (assignment -> array_term / = term .)
    IF              reduce using rule 69 (assignment -> array_term / = term .)
    ELSE            reduce using rule 69 (assignment -> array_term / = term .)
    ELIF            reduce using rule 69 (assignment -> array_term / = term .)
    WHILE           reduce using rule 69 (assignment -> array_term / = term .)
    BREAK           reduce using rule 69 (assignment -> array_term / = term .)
    FOR             reduce using rule 69 (assignment -> array_term / = term .)
    DEF             reduce using rule 69 (assignment -> array_term / = term .)
    RETURN          reduce using rule 69 (assignment -> array_term / = term .)
    CLASS           reduce using rule 69 (assignment -> array_term / = term .)
    NUMBER          reduce using rule 69 (assignment -> array_term / = term .)
    LEN             reduce using rule 69 (assignment -> array_term / = term .)
    quote           reduce using rule 69 (assignment -> array_term / = term .)
    $end            reduce using rule 69 (assignment -> array_term / = term .)
    }               reduce using rule 69 (assignment -> array_term / = term .)
    ;               reduce using rule 69 (assignment -> array_term / = term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 143

    (81) print -> PRINT ( pcontent ) .

    VARIABLE        reduce using rule 81 (print -> PRINT ( pcontent ) .)
    (               reduce using rule 81 (print -> PRINT ( pcontent ) .)
    PRINT           reduce using rule 81 (print -> PRINT ( pcontent ) .)
    IF              reduce using rule 81 (print -> PRINT ( pcontent ) .)
    ELSE            reduce using rule 81 (print -> PRINT ( pcontent ) .)
    ELIF            reduce using rule 81 (print -> PRINT ( pcontent ) .)
    WHILE           reduce using rule 81 (print -> PRINT ( pcontent ) .)
    BREAK           reduce using rule 81 (print -> PRINT ( pcontent ) .)
    FOR             reduce using rule 81 (print -> PRINT ( pcontent ) .)
    DEF             reduce using rule 81 (print -> PRINT ( pcontent ) .)
    RETURN          reduce using rule 81 (print -> PRINT ( pcontent ) .)
    CLASS           reduce using rule 81 (print -> PRINT ( pcontent ) .)
    NUMBER          reduce using rule 81 (print -> PRINT ( pcontent ) .)
    LEN             reduce using rule 81 (print -> PRINT ( pcontent ) .)
    quote           reduce using rule 81 (print -> PRINT ( pcontent ) .)
    $end            reduce using rule 81 (print -> PRINT ( pcontent ) .)
    }               reduce using rule 81 (print -> PRINT ( pcontent ) .)


state 144

    (84) pcontent -> pcontent , . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 167
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 145

    (41) if -> IF ( condition ) . { statements }

    {               shift and go to state 168


state 146

    (44) and -> condition AND . condition
    (46) condition -> . greater
    (47) condition -> . greater_equal
    (48) condition -> . less
    (49) condition -> . less_equal
    (50) condition -> . equal_equal
    (51) condition -> . and
    (52) condition -> . or
    (53) greater -> . term > term
    (54) greater_equal -> . term > = term
    (55) less -> . term < term
    (56) less_equal -> . term < = term
    (57) equal_equal -> . term = = term
    (44) and -> . condition AND condition
    (45) or -> . condition OR condition
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    condition                      shift and go to state 169
    greater                        shift and go to state 110
    greater_equal                  shift and go to state 111
    less                           shift and go to state 112
    less_equal                     shift and go to state 113
    equal_equal                    shift and go to state 114
    and                            shift and go to state 115
    or                             shift and go to state 116
    term                           shift and go to state 117
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 147

    (45) or -> condition OR . condition
    (46) condition -> . greater
    (47) condition -> . greater_equal
    (48) condition -> . less
    (49) condition -> . less_equal
    (50) condition -> . equal_equal
    (51) condition -> . and
    (52) condition -> . or
    (53) greater -> . term > term
    (54) greater_equal -> . term > = term
    (55) less -> . term < term
    (56) less_equal -> . term < = term
    (57) equal_equal -> . term = = term
    (44) and -> . condition AND condition
    (45) or -> . condition OR condition
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    condition                      shift and go to state 170
    greater                        shift and go to state 110
    greater_equal                  shift and go to state 111
    less                           shift and go to state 112
    less_equal                     shift and go to state 113
    equal_equal                    shift and go to state 114
    and                            shift and go to state 115
    or                             shift and go to state 116
    term                           shift and go to state 117
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 148

    (53) greater -> term > . term
    (54) greater_equal -> term > . = term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    =               shift and go to state 172
    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 171
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 149

    (57) equal_equal -> term = . = term

    =               shift and go to state 173


state 150

    (55) less -> term < . term
    (56) less_equal -> term < . = term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    =               shift and go to state 175
    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 174
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 151

    (42) else -> ELSE { statements } .

    VARIABLE        reduce using rule 42 (else -> ELSE { statements } .)
    (               reduce using rule 42 (else -> ELSE { statements } .)
    PRINT           reduce using rule 42 (else -> ELSE { statements } .)
    IF              reduce using rule 42 (else -> ELSE { statements } .)
    ELSE            reduce using rule 42 (else -> ELSE { statements } .)
    ELIF            reduce using rule 42 (else -> ELSE { statements } .)
    WHILE           reduce using rule 42 (else -> ELSE { statements } .)
    BREAK           reduce using rule 42 (else -> ELSE { statements } .)
    FOR             reduce using rule 42 (else -> ELSE { statements } .)
    DEF             reduce using rule 42 (else -> ELSE { statements } .)
    RETURN          reduce using rule 42 (else -> ELSE { statements } .)
    CLASS           reduce using rule 42 (else -> ELSE { statements } .)
    NUMBER          reduce using rule 42 (else -> ELSE { statements } .)
    LEN             reduce using rule 42 (else -> ELSE { statements } .)
    quote           reduce using rule 42 (else -> ELSE { statements } .)
    $end            reduce using rule 42 (else -> ELSE { statements } .)
    }               reduce using rule 42 (else -> ELSE { statements } .)


state 152

    (43) elif -> ELIF ( condition ) . { statements }

    {               shift and go to state 176


state 153

    (39) while -> WHILE ( condition ) . { statements }

    {               shift and go to state 177


state 154

    (40) for -> FOR ( assignment ; . condition ; VARIABLE + + ) { statements }
    (46) condition -> . greater
    (47) condition -> . greater_equal
    (48) condition -> . less
    (49) condition -> . less_equal
    (50) condition -> . equal_equal
    (51) condition -> . and
    (52) condition -> . or
    (53) greater -> . term > term
    (54) greater_equal -> . term > = term
    (55) less -> . term < term
    (56) less_equal -> . term < = term
    (57) equal_equal -> . term = = term
    (44) and -> . condition AND condition
    (45) or -> . condition OR condition
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    condition                      shift and go to state 178
    greater                        shift and go to state 110
    greater_equal                  shift and go to state 111
    less                           shift and go to state 112
    less_equal                     shift and go to state 113
    equal_equal                    shift and go to state 114
    and                            shift and go to state 115
    or                             shift and go to state 116
    term                           shift and go to state 117
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 155

    (36) functionTerms -> VARIABLE .

    )               reduce using rule 36 (functionTerms -> VARIABLE .)
    ,               reduce using rule 36 (functionTerms -> VARIABLE .)


state 156

    (30) function -> DEF VARIABLE ( functionTerms . ) { statements }
    (37) functionTerms -> functionTerms . , VARIABLE

    )               shift and go to state 179
    ,               shift and go to state 180


state 157

    (31) function -> DEF VARIABLE ( ) . { statements }

    {               shift and go to state 181


state 158

    (18) class -> CLASS VARIABLE { classFunctions . }
    (25) classFunctions -> classFunctions . function
    (26) classFunctions -> classFunctions . initClass
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (27) initClass -> . DEF INIT ( runFunctionTerms ) { statements }

    }               shift and go to state 182
    DEF             shift and go to state 162

    function                       shift and go to state 183
    initClass                      shift and go to state 184

state 159

    (19) class -> CLASS VARIABLE { } .

    VARIABLE        reduce using rule 19 (class -> CLASS VARIABLE { } .)
    (               reduce using rule 19 (class -> CLASS VARIABLE { } .)
    PRINT           reduce using rule 19 (class -> CLASS VARIABLE { } .)
    IF              reduce using rule 19 (class -> CLASS VARIABLE { } .)
    ELSE            reduce using rule 19 (class -> CLASS VARIABLE { } .)
    ELIF            reduce using rule 19 (class -> CLASS VARIABLE { } .)
    WHILE           reduce using rule 19 (class -> CLASS VARIABLE { } .)
    BREAK           reduce using rule 19 (class -> CLASS VARIABLE { } .)
    FOR             reduce using rule 19 (class -> CLASS VARIABLE { } .)
    DEF             reduce using rule 19 (class -> CLASS VARIABLE { } .)
    RETURN          reduce using rule 19 (class -> CLASS VARIABLE { } .)
    CLASS           reduce using rule 19 (class -> CLASS VARIABLE { } .)
    NUMBER          reduce using rule 19 (class -> CLASS VARIABLE { } .)
    LEN             reduce using rule 19 (class -> CLASS VARIABLE { } .)
    quote           reduce using rule 19 (class -> CLASS VARIABLE { } .)
    $end            reduce using rule 19 (class -> CLASS VARIABLE { } .)
    }               reduce using rule 19 (class -> CLASS VARIABLE { } .)


state 160

    (23) classFunctions -> function .

    }               reduce using rule 23 (classFunctions -> function .)
    DEF             reduce using rule 23 (classFunctions -> function .)


state 161

    (24) classFunctions -> initClass .

    }               reduce using rule 24 (classFunctions -> initClass .)
    DEF             reduce using rule 24 (classFunctions -> initClass .)


state 162

    (30) function -> DEF . VARIABLE ( functionTerms ) { statements }
    (31) function -> DEF . VARIABLE ( ) { statements }
    (27) initClass -> DEF . INIT ( runFunctionTerms ) { statements }

    VARIABLE        shift and go to state 75
    INIT            shift and go to state 185


state 163

    (22) method -> classMem ( runFunctionTerms ) .

    VARIABLE        reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    (               reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    PRINT           reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    IF              reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    ELSE            reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    ELIF            reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    WHILE           reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    BREAK           reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    FOR             reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    DEF             reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    RETURN          reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    CLASS           reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    NUMBER          reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    LEN             reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    quote           reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    $end            reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    =               reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    +               reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    -               reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    *               reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    /               reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    }               reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    ;               reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    )               reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    ,               reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    ]               reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    >               reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    <               reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    AND             reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)
    OR              reduce using rule 22 (method -> classMem ( runFunctionTerms ) .)


state 164

    (97) len -> LEN ( VARIABLE ) .

    =               reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    +               reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    -               reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    *               reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    /               reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    VARIABLE        reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    (               reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    PRINT           reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    IF              reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    ELSE            reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    ELIF            reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    WHILE           reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    BREAK           reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    FOR             reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    DEF             reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    RETURN          reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    CLASS           reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    NUMBER          reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    LEN             reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    quote           reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    $end            reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    }               reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    ;               reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    )               reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    ,               reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    ]               reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    >               reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    <               reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    AND             reduce using rule 97 (len -> LEN ( VARIABLE ) .)
    OR              reduce using rule 97 (len -> LEN ( VARIABLE ) .)


state 165

    (83) array -> [ pcontent ] .

    VARIABLE        reduce using rule 83 (array -> [ pcontent ] .)
    (               reduce using rule 83 (array -> [ pcontent ] .)
    PRINT           reduce using rule 83 (array -> [ pcontent ] .)
    IF              reduce using rule 83 (array -> [ pcontent ] .)
    ELSE            reduce using rule 83 (array -> [ pcontent ] .)
    ELIF            reduce using rule 83 (array -> [ pcontent ] .)
    WHILE           reduce using rule 83 (array -> [ pcontent ] .)
    BREAK           reduce using rule 83 (array -> [ pcontent ] .)
    FOR             reduce using rule 83 (array -> [ pcontent ] .)
    DEF             reduce using rule 83 (array -> [ pcontent ] .)
    RETURN          reduce using rule 83 (array -> [ pcontent ] .)
    CLASS           reduce using rule 83 (array -> [ pcontent ] .)
    NUMBER          reduce using rule 83 (array -> [ pcontent ] .)
    LEN             reduce using rule 83 (array -> [ pcontent ] .)
    quote           reduce using rule 83 (array -> [ pcontent ] .)
    $end            reduce using rule 83 (array -> [ pcontent ] .)
    }               reduce using rule 83 (array -> [ pcontent ] .)
    ;               reduce using rule 83 (array -> [ pcontent ] .)


state 166

    (35) runFunctionTerms -> runFunctionTerms , term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    )               reduce using rule 35 (runFunctionTerms -> runFunctionTerms , term .)
    ,               reduce using rule 35 (runFunctionTerms -> runFunctionTerms , term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 167

    (84) pcontent -> pcontent , term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    )               reduce using rule 84 (pcontent -> pcontent , term .)
    ,               reduce using rule 84 (pcontent -> pcontent , term .)
    ]               reduce using rule 84 (pcontent -> pcontent , term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 168

    (41) if -> IF ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    statements                     shift and go to state 186
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 169

    (44) and -> condition AND condition .
    (44) and -> condition . AND condition
    (45) or -> condition . OR condition

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    )               reduce using rule 44 (and -> condition AND condition .)
    ;               reduce using rule 44 (and -> condition AND condition .)
    AND             shift and go to state 146
    OR              shift and go to state 147

  ! AND             [ reduce using rule 44 (and -> condition AND condition .) ]
  ! OR              [ reduce using rule 44 (and -> condition AND condition .) ]


state 170

    (45) or -> condition OR condition .
    (44) and -> condition . AND condition
    (45) or -> condition . OR condition

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    )               reduce using rule 45 (or -> condition OR condition .)
    ;               reduce using rule 45 (or -> condition OR condition .)
    AND             shift and go to state 146
    OR              shift and go to state 147

  ! AND             [ reduce using rule 45 (or -> condition OR condition .) ]
  ! OR              [ reduce using rule 45 (or -> condition OR condition .) ]


state 171

    (53) greater -> term > term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    )               reduce using rule 53 (greater -> term > term .)
    AND             reduce using rule 53 (greater -> term > term .)
    OR              reduce using rule 53 (greater -> term > term .)
    ;               reduce using rule 53 (greater -> term > term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 172

    (54) greater_equal -> term > = . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 187
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 173

    (57) equal_equal -> term = = . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 188
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 174

    (55) less -> term < term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    )               reduce using rule 55 (less -> term < term .)
    AND             reduce using rule 55 (less -> term < term .)
    OR              reduce using rule 55 (less -> term < term .)
    ;               reduce using rule 55 (less -> term < term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 175

    (56) less_equal -> term < = . term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    term                           shift and go to state 189
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 176

    (43) elif -> ELIF ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    statements                     shift and go to state 190
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 177

    (39) while -> WHILE ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    statements                     shift and go to state 191
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 178

    (40) for -> FOR ( assignment ; condition . ; VARIABLE + + ) { statements }
    (44) and -> condition . AND condition
    (45) or -> condition . OR condition

    ;               shift and go to state 192
    AND             shift and go to state 146
    OR              shift and go to state 147


state 179

    (30) function -> DEF VARIABLE ( functionTerms ) . { statements }

    {               shift and go to state 193


state 180

    (37) functionTerms -> functionTerms , . VARIABLE

    VARIABLE        shift and go to state 194


state 181

    (31) function -> DEF VARIABLE ( ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    statements                     shift and go to state 195
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 182

    (18) class -> CLASS VARIABLE { classFunctions } .

    VARIABLE        reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)
    (               reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)
    PRINT           reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)
    IF              reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)
    ELSE            reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)
    ELIF            reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)
    WHILE           reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)
    BREAK           reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)
    FOR             reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)
    DEF             reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)
    RETURN          reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)
    CLASS           reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)
    NUMBER          reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)
    LEN             reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)
    quote           reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)
    $end            reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)
    }               reduce using rule 18 (class -> CLASS VARIABLE { classFunctions } .)


state 183

    (25) classFunctions -> classFunctions function .

    }               reduce using rule 25 (classFunctions -> classFunctions function .)
    DEF             reduce using rule 25 (classFunctions -> classFunctions function .)


state 184

    (26) classFunctions -> classFunctions initClass .

    }               reduce using rule 26 (classFunctions -> classFunctions initClass .)
    DEF             reduce using rule 26 (classFunctions -> classFunctions initClass .)


state 185

    (27) initClass -> DEF INIT . ( runFunctionTerms ) { statements }

    (               shift and go to state 196


state 186

    (41) if -> IF ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    }               shift and go to state 197
    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    statement                      shift and go to state 43
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 187

    (54) greater_equal -> term > = term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    )               reduce using rule 54 (greater_equal -> term > = term .)
    AND             reduce using rule 54 (greater_equal -> term > = term .)
    OR              reduce using rule 54 (greater_equal -> term > = term .)
    ;               reduce using rule 54 (greater_equal -> term > = term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 188

    (57) equal_equal -> term = = term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    )               reduce using rule 57 (equal_equal -> term = = term .)
    AND             reduce using rule 57 (equal_equal -> term = = term .)
    OR              reduce using rule 57 (equal_equal -> term = = term .)
    ;               reduce using rule 57 (equal_equal -> term = = term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 189

    (56) less_equal -> term < = term .
    (76) ADD -> term . + term
    (77) SUB -> term . - term
    (78) MUL -> term . * term
    (79) DIV -> term . / term
    (80) DIV_ext -> term . / / term

    )               reduce using rule 56 (less_equal -> term < = term .)
    AND             reduce using rule 56 (less_equal -> term < = term .)
    OR              reduce using rule 56 (less_equal -> term < = term .)
    ;               reduce using rule 56 (less_equal -> term < = term .)
    +               shift and go to state 53
    -               shift and go to state 54
    *               shift and go to state 55
    /               shift and go to state 56


state 190

    (43) elif -> ELIF ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    }               shift and go to state 198
    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    statement                      shift and go to state 43
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 191

    (39) while -> WHILE ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    }               shift and go to state 199
    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    statement                      shift and go to state 43
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 192

    (40) for -> FOR ( assignment ; condition ; . VARIABLE + + ) { statements }

    VARIABLE        shift and go to state 200


state 193

    (30) function -> DEF VARIABLE ( functionTerms ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    statements                     shift and go to state 201
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 194

    (37) functionTerms -> functionTerms , VARIABLE .

    )               reduce using rule 37 (functionTerms -> functionTerms , VARIABLE .)
    ,               reduce using rule 37 (functionTerms -> functionTerms , VARIABLE .)


state 195

    (31) function -> DEF VARIABLE ( ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    }               shift and go to state 202
    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    statement                      shift and go to state 43
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 196

    (27) initClass -> DEF INIT ( . runFunctionTerms ) { statements }
    (34) runFunctionTerms -> . term
    (35) runFunctionTerms -> . runFunctionTerms , term
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (82) array_term -> . VARIABLE [ term ]
    (97) len -> . LEN ( VARIABLE )
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (20) classMem -> . VARIABLE . VARIABLE
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 64
    NUMBER          shift and go to state 38
    (               shift and go to state 26
    LEN             shift and go to state 41
    quote           shift and go to state 42

    runFunctionTerms               shift and go to state 203
    term                           shift and go to state 92
    operation                      shift and go to state 77
    array_term                     shift and go to state 65
    len                            shift and go to state 39
    runFunction                    shift and go to state 66
    method                         shift and go to state 67
    classMem                       shift and go to state 68
    string                         shift and go to state 40
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25

state 197

    (41) if -> IF ( condition ) { statements } .

    VARIABLE        reduce using rule 41 (if -> IF ( condition ) { statements } .)
    (               reduce using rule 41 (if -> IF ( condition ) { statements } .)
    PRINT           reduce using rule 41 (if -> IF ( condition ) { statements } .)
    IF              reduce using rule 41 (if -> IF ( condition ) { statements } .)
    ELSE            reduce using rule 41 (if -> IF ( condition ) { statements } .)
    ELIF            reduce using rule 41 (if -> IF ( condition ) { statements } .)
    WHILE           reduce using rule 41 (if -> IF ( condition ) { statements } .)
    BREAK           reduce using rule 41 (if -> IF ( condition ) { statements } .)
    FOR             reduce using rule 41 (if -> IF ( condition ) { statements } .)
    DEF             reduce using rule 41 (if -> IF ( condition ) { statements } .)
    RETURN          reduce using rule 41 (if -> IF ( condition ) { statements } .)
    CLASS           reduce using rule 41 (if -> IF ( condition ) { statements } .)
    NUMBER          reduce using rule 41 (if -> IF ( condition ) { statements } .)
    LEN             reduce using rule 41 (if -> IF ( condition ) { statements } .)
    quote           reduce using rule 41 (if -> IF ( condition ) { statements } .)
    $end            reduce using rule 41 (if -> IF ( condition ) { statements } .)
    }               reduce using rule 41 (if -> IF ( condition ) { statements } .)


state 198

    (43) elif -> ELIF ( condition ) { statements } .

    VARIABLE        reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)
    (               reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)
    PRINT           reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)
    IF              reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)
    ELSE            reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)
    ELIF            reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)
    WHILE           reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)
    BREAK           reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)
    FOR             reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)
    DEF             reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)
    RETURN          reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)
    CLASS           reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)
    NUMBER          reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)
    LEN             reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)
    quote           reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)
    $end            reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)
    }               reduce using rule 43 (elif -> ELIF ( condition ) { statements } .)


state 199

    (39) while -> WHILE ( condition ) { statements } .

    VARIABLE        reduce using rule 39 (while -> WHILE ( condition ) { statements } .)
    (               reduce using rule 39 (while -> WHILE ( condition ) { statements } .)
    PRINT           reduce using rule 39 (while -> WHILE ( condition ) { statements } .)
    IF              reduce using rule 39 (while -> WHILE ( condition ) { statements } .)
    ELSE            reduce using rule 39 (while -> WHILE ( condition ) { statements } .)
    ELIF            reduce using rule 39 (while -> WHILE ( condition ) { statements } .)
    WHILE           reduce using rule 39 (while -> WHILE ( condition ) { statements } .)
    BREAK           reduce using rule 39 (while -> WHILE ( condition ) { statements } .)
    FOR             reduce using rule 39 (while -> WHILE ( condition ) { statements } .)
    DEF             reduce using rule 39 (while -> WHILE ( condition ) { statements } .)
    RETURN          reduce using rule 39 (while -> WHILE ( condition ) { statements } .)
    CLASS           reduce using rule 39 (while -> WHILE ( condition ) { statements } .)
    NUMBER          reduce using rule 39 (while -> WHILE ( condition ) { statements } .)
    LEN             reduce using rule 39 (while -> WHILE ( condition ) { statements } .)
    quote           reduce using rule 39 (while -> WHILE ( condition ) { statements } .)
    $end            reduce using rule 39 (while -> WHILE ( condition ) { statements } .)
    }               reduce using rule 39 (while -> WHILE ( condition ) { statements } .)


state 200

    (40) for -> FOR ( assignment ; condition ; VARIABLE . + + ) { statements }

    +               shift and go to state 204


state 201

    (30) function -> DEF VARIABLE ( functionTerms ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    }               shift and go to state 205
    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    statement                      shift and go to state 43
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 202

    (31) function -> DEF VARIABLE ( ) { statements } .

    VARIABLE        reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)
    (               reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)
    PRINT           reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)
    IF              reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)
    ELSE            reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)
    ELIF            reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)
    WHILE           reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)
    BREAK           reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)
    FOR             reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)
    DEF             reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)
    RETURN          reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)
    CLASS           reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)
    NUMBER          reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)
    LEN             reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)
    quote           reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)
    $end            reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)
    }               reduce using rule 31 (function -> DEF VARIABLE ( ) { statements } .)


state 203

    (27) initClass -> DEF INIT ( runFunctionTerms . ) { statements }
    (35) runFunctionTerms -> runFunctionTerms . , term

    )               shift and go to state 206
    ,               shift and go to state 136


state 204

    (40) for -> FOR ( assignment ; condition ; VARIABLE + . + ) { statements }

    +               shift and go to state 207


state 205

    (30) function -> DEF VARIABLE ( functionTerms ) { statements } .

    VARIABLE        reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    (               reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    PRINT           reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    IF              reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    ELSE            reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    ELIF            reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    WHILE           reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    BREAK           reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    FOR             reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    DEF             reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    RETURN          reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    CLASS           reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    NUMBER          reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    LEN             reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    quote           reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    $end            reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    }               reduce using rule 30 (function -> DEF VARIABLE ( functionTerms ) { statements } .)


state 206

    (27) initClass -> DEF INIT ( runFunctionTerms ) . { statements }

    {               shift and go to state 208


state 207

    (40) for -> FOR ( assignment ; condition ; VARIABLE + + . ) { statements }

    )               shift and go to state 209


state 208

    (27) initClass -> DEF INIT ( runFunctionTerms ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    statements                     shift and go to state 210
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 209

    (40) for -> FOR ( assignment ; condition ; VARIABLE + + ) . { statements }

    {               shift and go to state 211


state 210

    (27) initClass -> DEF INIT ( runFunctionTerms ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    }               shift and go to state 212
    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    statement                      shift and go to state 43
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 211

    (40) for -> FOR ( assignment ; condition ; VARIABLE + + ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    assignment                     shift and go to state 4
    statements                     shift and go to state 213
    statement                      shift and go to state 3
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 212

    (27) initClass -> DEF INIT ( runFunctionTerms ) { statements } .

    }               reduce using rule 27 (initClass -> DEF INIT ( runFunctionTerms ) { statements } .)
    DEF             reduce using rule 27 (initClass -> DEF INIT ( runFunctionTerms ) { statements } .)


state 213

    (40) for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (16) statement -> . class
    (17) statement -> . method
    (58) assignment -> . VARIABLE = term
    (59) assignment -> . VARIABLE = array
    (60) assignment -> . array_term = term
    (61) assignment -> . term = term
    (62) assignment -> . VARIABLE + = term
    (63) assignment -> . array_term + = term
    (64) assignment -> . VARIABLE - = term
    (65) assignment -> . array_term - = term
    (66) assignment -> . VARIABLE * = term
    (67) assignment -> . array_term * = term
    (68) assignment -> . VARIABLE / = term
    (69) assignment -> . array_term / = term
    (70) operation -> . ADD
    (71) operation -> . SUB
    (72) operation -> . MUL
    (73) operation -> . DIV
    (74) operation -> . DIV_ext
    (75) operation -> . ( operation )
    (81) print -> . PRINT ( pcontent )
    (41) if -> . IF ( condition ) { statements }
    (42) else -> . ELSE { statements }
    (43) elif -> . ELIF ( condition ) { statements }
    (39) while -> . WHILE ( condition ) { statements }
    (38) break -> . BREAK
    (40) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (30) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (31) function -> . DEF VARIABLE ( ) { statements }
    (32) runFunction -> . VARIABLE ( runFunctionTerms )
    (33) runFunction -> . VARIABLE ( )
    (28) return -> . RETURN
    (29) return -> . RETURN term
    (18) class -> . CLASS VARIABLE { classFunctions }
    (19) class -> . CLASS VARIABLE { }
    (21) method -> . classMem ( )
    (22) method -> . classMem ( runFunctionTerms )
    (82) array_term -> . VARIABLE [ term ]
    (88) term -> . VARIABLE
    (89) term -> . NUMBER
    (90) term -> . operation
    (91) term -> . array_term
    (92) term -> . len
    (93) term -> . runFunction
    (94) term -> . method
    (95) term -> . classMem
    (96) term -> . string
    (76) ADD -> . term + term
    (77) SUB -> . term - term
    (78) MUL -> . term * term
    (79) DIV -> . term / term
    (80) DIV_ext -> . term / / term
    (20) classMem -> . VARIABLE . VARIABLE
    (97) len -> . LEN ( VARIABLE )
    (86) string -> . quote String quote
    (87) string -> . quote VARIABLE quote

    }               shift and go to state 214
    VARIABLE        shift and go to state 18
    (               shift and go to state 26
    PRINT           shift and go to state 27
    IF              shift and go to state 28
    ELSE            shift and go to state 29
    ELIF            shift and go to state 30
    WHILE           shift and go to state 31
    BREAK           shift and go to state 32
    FOR             shift and go to state 33
    DEF             shift and go to state 34
    RETURN          shift and go to state 35
    CLASS           shift and go to state 36
    NUMBER          shift and go to state 38
    LEN             shift and go to state 41
    quote           shift and go to state 42

    assignment                     shift and go to state 4
    statement                      shift and go to state 43
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    class                          shift and go to state 16
    method                         shift and go to state 17
    term                           shift and go to state 19
    array_term                     shift and go to state 20
    ADD                            shift and go to state 21
    SUB                            shift and go to state 22
    MUL                            shift and go to state 23
    DIV                            shift and go to state 24
    DIV_ext                        shift and go to state 25
    classMem                       shift and go to state 37
    len                            shift and go to state 39
    string                         shift and go to state 40

state 214

    (40) for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .

    VARIABLE        reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    (               reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    PRINT           reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    IF              reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    ELSE            reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    ELIF            reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    WHILE           reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    BREAK           reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    FOR             reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    DEF             reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    RETURN          reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    CLASS           reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    NUMBER          reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    LEN             reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    quote           reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    $end            reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    }               reduce using rule 40 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for = in state 18 resolved as shift
WARNING: shift/reduce conflict for + in state 18 resolved as shift
WARNING: shift/reduce conflict for - in state 18 resolved as shift
WARNING: shift/reduce conflict for * in state 18 resolved as shift
WARNING: shift/reduce conflict for / in state 18 resolved as shift
WARNING: shift/reduce conflict for = in state 20 resolved as shift
WARNING: shift/reduce conflict for + in state 20 resolved as shift
WARNING: shift/reduce conflict for - in state 20 resolved as shift
WARNING: shift/reduce conflict for * in state 20 resolved as shift
WARNING: shift/reduce conflict for / in state 20 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 35 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 35 resolved as shift
WARNING: shift/reduce conflict for ( in state 35 resolved as shift
WARNING: shift/reduce conflict for LEN in state 35 resolved as shift
WARNING: shift/reduce conflict for quote in state 35 resolved as shift
WARNING: shift/reduce conflict for ( in state 64 resolved as shift
WARNING: shift/reduce conflict for ( in state 68 resolved as shift
WARNING: shift/reduce conflict for + in state 96 resolved as shift
WARNING: shift/reduce conflict for - in state 96 resolved as shift
WARNING: shift/reduce conflict for * in state 96 resolved as shift
WARNING: shift/reduce conflict for / in state 96 resolved as shift
WARNING: shift/reduce conflict for + in state 97 resolved as shift
WARNING: shift/reduce conflict for - in state 97 resolved as shift
WARNING: shift/reduce conflict for * in state 97 resolved as shift
WARNING: shift/reduce conflict for / in state 97 resolved as shift
WARNING: shift/reduce conflict for + in state 98 resolved as shift
WARNING: shift/reduce conflict for - in state 98 resolved as shift
WARNING: shift/reduce conflict for * in state 98 resolved as shift
WARNING: shift/reduce conflict for / in state 98 resolved as shift
WARNING: shift/reduce conflict for + in state 99 resolved as shift
WARNING: shift/reduce conflict for - in state 99 resolved as shift
WARNING: shift/reduce conflict for * in state 99 resolved as shift
WARNING: shift/reduce conflict for / in state 99 resolved as shift
WARNING: shift/reduce conflict for = in state 122 resolved as shift
WARNING: shift/reduce conflict for + in state 122 resolved as shift
WARNING: shift/reduce conflict for - in state 122 resolved as shift
WARNING: shift/reduce conflict for * in state 122 resolved as shift
WARNING: shift/reduce conflict for / in state 122 resolved as shift
WARNING: shift/reduce conflict for + in state 138 resolved as shift
WARNING: shift/reduce conflict for - in state 138 resolved as shift
WARNING: shift/reduce conflict for * in state 138 resolved as shift
WARNING: shift/reduce conflict for / in state 138 resolved as shift
WARNING: shift/reduce conflict for AND in state 169 resolved as shift
WARNING: shift/reduce conflict for OR in state 169 resolved as shift
WARNING: shift/reduce conflict for AND in state 170 resolved as shift
WARNING: shift/reduce conflict for OR in state 170 resolved as shift
