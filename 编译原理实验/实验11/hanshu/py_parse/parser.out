Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> segment
Rule 1     segment -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment
Rule 5     statement -> operation
Rule 6     statement -> print
Rule 7     statement -> if
Rule 8     statement -> else
Rule 9     statement -> elif
Rule 10    statement -> while
Rule 11    statement -> break
Rule 12    statement -> for
Rule 13    statement -> function
Rule 14    statement -> runFunction
Rule 15    statement -> return
Rule 16    return -> RETURN
Rule 17    return -> RETURN term
Rule 18    function -> DEF VARIABLE ( functionTerms ) { statements }
Rule 19    function -> DEF VARIABLE ( ) { statements }
Rule 20    runFunction -> VARIABLE ( runFunctionTerms )
Rule 21    runFunction -> VARIABLE ( )
Rule 22    runFunctionTerms -> term
Rule 23    runFunctionTerms -> runFunctionTerms , term
Rule 24    functionTerms -> VARIABLE
Rule 25    functionTerms -> functionTerms , VARIABLE
Rule 26    break -> BREAK
Rule 27    while -> WHILE ( condition ) { statements }
Rule 28    for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements }
Rule 29    if -> IF ( condition ) { statements }
Rule 30    else -> ELSE { statements }
Rule 31    elif -> ELIF ( condition ) { statements }
Rule 32    and -> condition AND condition
Rule 33    or -> condition OR condition
Rule 34    condition -> greater
Rule 35    condition -> greater_equal
Rule 36    condition -> less
Rule 37    condition -> less_equal
Rule 38    condition -> equal_equal
Rule 39    condition -> and
Rule 40    condition -> or
Rule 41    greater -> term > term
Rule 42    greater_equal -> term > = term
Rule 43    less -> term < term
Rule 44    less_equal -> term < = term
Rule 45    equal_equal -> term = = term
Rule 46    assignment -> VARIABLE = term
Rule 47    assignment -> VARIABLE = array
Rule 48    assignment -> array_term = term
Rule 49    assignment -> VARIABLE + = term
Rule 50    assignment -> array_term + = term
Rule 51    assignment -> VARIABLE - = term
Rule 52    assignment -> array_term - = term
Rule 53    assignment -> VARIABLE * = term
Rule 54    assignment -> array_term * = term
Rule 55    assignment -> VARIABLE / = term
Rule 56    assignment -> array_term / = term
Rule 57    operation -> ADD
Rule 58    operation -> SUB
Rule 59    operation -> MUL
Rule 60    operation -> DIV
Rule 61    operation -> DIV_ext
Rule 62    operation -> ( operation )
Rule 63    ADD -> term + term
Rule 64    SUB -> term - term
Rule 65    MUL -> term * term
Rule 66    DIV -> term / term
Rule 67    DIV_ext -> term / / term
Rule 68    print -> PRINT ( pcontent )
Rule 69    array_term -> VARIABLE [ term ]
Rule 70    array -> [ pcontent ]
Rule 71    pcontent -> pcontent , term
Rule 72    pcontent -> term
Rule 73    term -> VARIABLE
Rule 74    term -> NUMBER
Rule 75    term -> operation
Rule 76    term -> array_term
Rule 77    term -> len
Rule 78    term -> runFunction
Rule 79    len -> LEN ( VARIABLE )

Terminals, with rules where they appear

(                    : 18 19 20 21 27 28 29 31 62 68 79
)                    : 18 19 20 21 27 28 29 31 62 68 79
*                    : 53 54 65
+                    : 28 28 49 50 63
,                    : 23 25 71
-                    : 51 52 64
/                    : 55 56 66 67 67
;                    : 28 28
<                    : 43 44
=                    : 42 44 45 45 46 47 48 49 50 51 52 53 54 55 56
>                    : 41 42
AND                  : 32
BREAK                : 26
DEF                  : 18 19
ELIF                 : 31
ELSE                 : 30
FOR                  : 28
IF                   : 29
LEN                  : 79
NUMBER               : 74
OR                   : 33
PRINT                : 68
RETURN               : 16 17
VARIABLE             : 18 19 20 21 24 25 28 46 47 49 51 53 55 69 73 79
WHILE                : 27
[                    : 69 70
]                    : 69 70
error                : 
{                    : 18 19 27 28 29 30 31
}                    : 18 19 27 28 29 30 31

Nonterminals, with rules where they appear

ADD                  : 57
DIV                  : 60
DIV_ext              : 61
MUL                  : 59
SUB                  : 58
and                  : 39
array                : 47
array_term           : 48 50 52 54 56 76
assignment           : 4 28
break                : 11
condition            : 27 28 29 31 32 32 33 33
elif                 : 9
else                 : 8
equal_equal          : 38
for                  : 12
function             : 13
functionTerms        : 18 25
greater              : 34
greater_equal        : 35
if                   : 7
len                  : 77
less                 : 36
less_equal           : 37
operation            : 5 62 75
or                   : 40
pcontent             : 68 70 71
print                : 6
return               : 15
runFunction          : 14 78
runFunctionTerms     : 20 23
segment              : 0
statement            : 2 3
statements           : 1 2 18 19 27 28 29 30 31
term                 : 17 22 23 41 41 42 42 43 43 44 44 45 45 46 48 49 50 51 52 53 54 55 56 63 63 64 64 65 65 66 66 67 67 69 71 72
while                : 10

Parsing method: LALR

state 0

    (0) S' -> . segment
    (1) segment -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (68) print -> . PRINT ( pcontent )
    (29) if -> . IF ( condition ) { statements }
    (30) else -> . ELSE { statements }
    (31) elif -> . ELIF ( condition ) { statements }
    (27) while -> . WHILE ( condition ) { statements }
    (26) break -> . BREAK
    (28) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (18) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (19) function -> . DEF VARIABLE ( ) { statements }
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (16) return -> . RETURN
    (17) return -> . RETURN term
    (69) array_term -> . VARIABLE [ term ]
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (79) len -> . LEN ( VARIABLE )

    VARIABLE        shift and go to state 16
    (               shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    ELSE            shift and go to state 27
    ELIF            shift and go to state 28
    WHILE           shift and go to state 29
    BREAK           shift and go to state 30
    FOR             shift and go to state 31
    DEF             shift and go to state 32
    RETURN          shift and go to state 33
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    segment                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    term                           shift and go to state 17
    array_term                     shift and go to state 18
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    len                            shift and go to state 35

state 1

    (0) S' -> segment .



state 2

    (1) segment -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (68) print -> . PRINT ( pcontent )
    (29) if -> . IF ( condition ) { statements }
    (30) else -> . ELSE { statements }
    (31) elif -> . ELIF ( condition ) { statements }
    (27) while -> . WHILE ( condition ) { statements }
    (26) break -> . BREAK
    (28) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (18) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (19) function -> . DEF VARIABLE ( ) { statements }
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (16) return -> . RETURN
    (17) return -> . RETURN term
    (69) array_term -> . VARIABLE [ term ]
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (79) len -> . LEN ( VARIABLE )

    $end            reduce using rule 1 (segment -> statements .)
    VARIABLE        shift and go to state 16
    (               shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    ELSE            shift and go to state 27
    ELIF            shift and go to state 28
    WHILE           shift and go to state 29
    BREAK           shift and go to state 30
    FOR             shift and go to state 31
    DEF             shift and go to state 32
    RETURN          shift and go to state 33
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    statement                      shift and go to state 37
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    term                           shift and go to state 17
    array_term                     shift and go to state 18
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    len                            shift and go to state 35

state 3

    (3) statements -> statement .

    VARIABLE        reduce using rule 3 (statements -> statement .)
    (               reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    ELSE            reduce using rule 3 (statements -> statement .)
    ELIF            reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    BREAK           reduce using rule 3 (statements -> statement .)
    FOR             reduce using rule 3 (statements -> statement .)
    DEF             reduce using rule 3 (statements -> statement .)
    RETURN          reduce using rule 3 (statements -> statement .)
    NUMBER          reduce using rule 3 (statements -> statement .)
    LEN             reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    }               reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment .

    VARIABLE        reduce using rule 4 (statement -> assignment .)
    (               reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    ELSE            reduce using rule 4 (statement -> assignment .)
    ELIF            reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    BREAK           reduce using rule 4 (statement -> assignment .)
    FOR             reduce using rule 4 (statement -> assignment .)
    DEF             reduce using rule 4 (statement -> assignment .)
    RETURN          reduce using rule 4 (statement -> assignment .)
    NUMBER          reduce using rule 4 (statement -> assignment .)
    LEN             reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    }               reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> operation .
    (75) term -> operation .

    VARIABLE        reduce using rule 5 (statement -> operation .)
    (               reduce using rule 5 (statement -> operation .)
    PRINT           reduce using rule 5 (statement -> operation .)
    IF              reduce using rule 5 (statement -> operation .)
    ELSE            reduce using rule 5 (statement -> operation .)
    ELIF            reduce using rule 5 (statement -> operation .)
    WHILE           reduce using rule 5 (statement -> operation .)
    BREAK           reduce using rule 5 (statement -> operation .)
    FOR             reduce using rule 5 (statement -> operation .)
    DEF             reduce using rule 5 (statement -> operation .)
    RETURN          reduce using rule 5 (statement -> operation .)
    NUMBER          reduce using rule 5 (statement -> operation .)
    LEN             reduce using rule 5 (statement -> operation .)
    $end            reduce using rule 5 (statement -> operation .)
    }               reduce using rule 5 (statement -> operation .)
    +               reduce using rule 75 (term -> operation .)
    -               reduce using rule 75 (term -> operation .)
    *               reduce using rule 75 (term -> operation .)
    /               reduce using rule 75 (term -> operation .)


state 6

    (6) statement -> print .

    VARIABLE        reduce using rule 6 (statement -> print .)
    (               reduce using rule 6 (statement -> print .)
    PRINT           reduce using rule 6 (statement -> print .)
    IF              reduce using rule 6 (statement -> print .)
    ELSE            reduce using rule 6 (statement -> print .)
    ELIF            reduce using rule 6 (statement -> print .)
    WHILE           reduce using rule 6 (statement -> print .)
    BREAK           reduce using rule 6 (statement -> print .)
    FOR             reduce using rule 6 (statement -> print .)
    DEF             reduce using rule 6 (statement -> print .)
    RETURN          reduce using rule 6 (statement -> print .)
    NUMBER          reduce using rule 6 (statement -> print .)
    LEN             reduce using rule 6 (statement -> print .)
    $end            reduce using rule 6 (statement -> print .)
    }               reduce using rule 6 (statement -> print .)


state 7

    (7) statement -> if .

    VARIABLE        reduce using rule 7 (statement -> if .)
    (               reduce using rule 7 (statement -> if .)
    PRINT           reduce using rule 7 (statement -> if .)
    IF              reduce using rule 7 (statement -> if .)
    ELSE            reduce using rule 7 (statement -> if .)
    ELIF            reduce using rule 7 (statement -> if .)
    WHILE           reduce using rule 7 (statement -> if .)
    BREAK           reduce using rule 7 (statement -> if .)
    FOR             reduce using rule 7 (statement -> if .)
    DEF             reduce using rule 7 (statement -> if .)
    RETURN          reduce using rule 7 (statement -> if .)
    NUMBER          reduce using rule 7 (statement -> if .)
    LEN             reduce using rule 7 (statement -> if .)
    $end            reduce using rule 7 (statement -> if .)
    }               reduce using rule 7 (statement -> if .)


state 8

    (8) statement -> else .

    VARIABLE        reduce using rule 8 (statement -> else .)
    (               reduce using rule 8 (statement -> else .)
    PRINT           reduce using rule 8 (statement -> else .)
    IF              reduce using rule 8 (statement -> else .)
    ELSE            reduce using rule 8 (statement -> else .)
    ELIF            reduce using rule 8 (statement -> else .)
    WHILE           reduce using rule 8 (statement -> else .)
    BREAK           reduce using rule 8 (statement -> else .)
    FOR             reduce using rule 8 (statement -> else .)
    DEF             reduce using rule 8 (statement -> else .)
    RETURN          reduce using rule 8 (statement -> else .)
    NUMBER          reduce using rule 8 (statement -> else .)
    LEN             reduce using rule 8 (statement -> else .)
    $end            reduce using rule 8 (statement -> else .)
    }               reduce using rule 8 (statement -> else .)


state 9

    (9) statement -> elif .

    VARIABLE        reduce using rule 9 (statement -> elif .)
    (               reduce using rule 9 (statement -> elif .)
    PRINT           reduce using rule 9 (statement -> elif .)
    IF              reduce using rule 9 (statement -> elif .)
    ELSE            reduce using rule 9 (statement -> elif .)
    ELIF            reduce using rule 9 (statement -> elif .)
    WHILE           reduce using rule 9 (statement -> elif .)
    BREAK           reduce using rule 9 (statement -> elif .)
    FOR             reduce using rule 9 (statement -> elif .)
    DEF             reduce using rule 9 (statement -> elif .)
    RETURN          reduce using rule 9 (statement -> elif .)
    NUMBER          reduce using rule 9 (statement -> elif .)
    LEN             reduce using rule 9 (statement -> elif .)
    $end            reduce using rule 9 (statement -> elif .)
    }               reduce using rule 9 (statement -> elif .)


state 10

    (10) statement -> while .

    VARIABLE        reduce using rule 10 (statement -> while .)
    (               reduce using rule 10 (statement -> while .)
    PRINT           reduce using rule 10 (statement -> while .)
    IF              reduce using rule 10 (statement -> while .)
    ELSE            reduce using rule 10 (statement -> while .)
    ELIF            reduce using rule 10 (statement -> while .)
    WHILE           reduce using rule 10 (statement -> while .)
    BREAK           reduce using rule 10 (statement -> while .)
    FOR             reduce using rule 10 (statement -> while .)
    DEF             reduce using rule 10 (statement -> while .)
    RETURN          reduce using rule 10 (statement -> while .)
    NUMBER          reduce using rule 10 (statement -> while .)
    LEN             reduce using rule 10 (statement -> while .)
    $end            reduce using rule 10 (statement -> while .)
    }               reduce using rule 10 (statement -> while .)


state 11

    (11) statement -> break .

    VARIABLE        reduce using rule 11 (statement -> break .)
    (               reduce using rule 11 (statement -> break .)
    PRINT           reduce using rule 11 (statement -> break .)
    IF              reduce using rule 11 (statement -> break .)
    ELSE            reduce using rule 11 (statement -> break .)
    ELIF            reduce using rule 11 (statement -> break .)
    WHILE           reduce using rule 11 (statement -> break .)
    BREAK           reduce using rule 11 (statement -> break .)
    FOR             reduce using rule 11 (statement -> break .)
    DEF             reduce using rule 11 (statement -> break .)
    RETURN          reduce using rule 11 (statement -> break .)
    NUMBER          reduce using rule 11 (statement -> break .)
    LEN             reduce using rule 11 (statement -> break .)
    $end            reduce using rule 11 (statement -> break .)
    }               reduce using rule 11 (statement -> break .)


state 12

    (12) statement -> for .

    VARIABLE        reduce using rule 12 (statement -> for .)
    (               reduce using rule 12 (statement -> for .)
    PRINT           reduce using rule 12 (statement -> for .)
    IF              reduce using rule 12 (statement -> for .)
    ELSE            reduce using rule 12 (statement -> for .)
    ELIF            reduce using rule 12 (statement -> for .)
    WHILE           reduce using rule 12 (statement -> for .)
    BREAK           reduce using rule 12 (statement -> for .)
    FOR             reduce using rule 12 (statement -> for .)
    DEF             reduce using rule 12 (statement -> for .)
    RETURN          reduce using rule 12 (statement -> for .)
    NUMBER          reduce using rule 12 (statement -> for .)
    LEN             reduce using rule 12 (statement -> for .)
    $end            reduce using rule 12 (statement -> for .)
    }               reduce using rule 12 (statement -> for .)


state 13

    (13) statement -> function .

    VARIABLE        reduce using rule 13 (statement -> function .)
    (               reduce using rule 13 (statement -> function .)
    PRINT           reduce using rule 13 (statement -> function .)
    IF              reduce using rule 13 (statement -> function .)
    ELSE            reduce using rule 13 (statement -> function .)
    ELIF            reduce using rule 13 (statement -> function .)
    WHILE           reduce using rule 13 (statement -> function .)
    BREAK           reduce using rule 13 (statement -> function .)
    FOR             reduce using rule 13 (statement -> function .)
    DEF             reduce using rule 13 (statement -> function .)
    RETURN          reduce using rule 13 (statement -> function .)
    NUMBER          reduce using rule 13 (statement -> function .)
    LEN             reduce using rule 13 (statement -> function .)
    $end            reduce using rule 13 (statement -> function .)
    }               reduce using rule 13 (statement -> function .)


state 14

    (14) statement -> runFunction .
    (78) term -> runFunction .

    VARIABLE        reduce using rule 14 (statement -> runFunction .)
    (               reduce using rule 14 (statement -> runFunction .)
    PRINT           reduce using rule 14 (statement -> runFunction .)
    IF              reduce using rule 14 (statement -> runFunction .)
    ELSE            reduce using rule 14 (statement -> runFunction .)
    ELIF            reduce using rule 14 (statement -> runFunction .)
    WHILE           reduce using rule 14 (statement -> runFunction .)
    BREAK           reduce using rule 14 (statement -> runFunction .)
    FOR             reduce using rule 14 (statement -> runFunction .)
    DEF             reduce using rule 14 (statement -> runFunction .)
    RETURN          reduce using rule 14 (statement -> runFunction .)
    NUMBER          reduce using rule 14 (statement -> runFunction .)
    LEN             reduce using rule 14 (statement -> runFunction .)
    $end            reduce using rule 14 (statement -> runFunction .)
    }               reduce using rule 14 (statement -> runFunction .)
    +               reduce using rule 78 (term -> runFunction .)
    -               reduce using rule 78 (term -> runFunction .)
    *               reduce using rule 78 (term -> runFunction .)
    /               reduce using rule 78 (term -> runFunction .)


state 15

    (15) statement -> return .

    VARIABLE        reduce using rule 15 (statement -> return .)
    (               reduce using rule 15 (statement -> return .)
    PRINT           reduce using rule 15 (statement -> return .)
    IF              reduce using rule 15 (statement -> return .)
    ELSE            reduce using rule 15 (statement -> return .)
    ELIF            reduce using rule 15 (statement -> return .)
    WHILE           reduce using rule 15 (statement -> return .)
    BREAK           reduce using rule 15 (statement -> return .)
    FOR             reduce using rule 15 (statement -> return .)
    DEF             reduce using rule 15 (statement -> return .)
    RETURN          reduce using rule 15 (statement -> return .)
    NUMBER          reduce using rule 15 (statement -> return .)
    LEN             reduce using rule 15 (statement -> return .)
    $end            reduce using rule 15 (statement -> return .)
    }               reduce using rule 15 (statement -> return .)


state 16

    (46) assignment -> VARIABLE . = term
    (47) assignment -> VARIABLE . = array
    (49) assignment -> VARIABLE . + = term
    (51) assignment -> VARIABLE . - = term
    (53) assignment -> VARIABLE . * = term
    (55) assignment -> VARIABLE . / = term
    (20) runFunction -> VARIABLE . ( runFunctionTerms )
    (21) runFunction -> VARIABLE . ( )
    (69) array_term -> VARIABLE . [ term ]
    (73) term -> VARIABLE .

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    =               shift and go to state 38
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    (               shift and go to state 43
    [               shift and go to state 44

  ! +               [ reduce using rule 73 (term -> VARIABLE .) ]
  ! -               [ reduce using rule 73 (term -> VARIABLE .) ]
  ! *               [ reduce using rule 73 (term -> VARIABLE .) ]
  ! /               [ reduce using rule 73 (term -> VARIABLE .) ]


state 17

    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 18

    (48) assignment -> array_term . = term
    (50) assignment -> array_term . + = term
    (52) assignment -> array_term . - = term
    (54) assignment -> array_term . * = term
    (56) assignment -> array_term . / = term
    (76) term -> array_term .

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    =               shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53

  ! +               [ reduce using rule 76 (term -> array_term .) ]
  ! -               [ reduce using rule 76 (term -> array_term .) ]
  ! *               [ reduce using rule 76 (term -> array_term .) ]
  ! /               [ reduce using rule 76 (term -> array_term .) ]


state 19

    (57) operation -> ADD .

    VARIABLE        reduce using rule 57 (operation -> ADD .)
    (               reduce using rule 57 (operation -> ADD .)
    PRINT           reduce using rule 57 (operation -> ADD .)
    IF              reduce using rule 57 (operation -> ADD .)
    ELSE            reduce using rule 57 (operation -> ADD .)
    ELIF            reduce using rule 57 (operation -> ADD .)
    WHILE           reduce using rule 57 (operation -> ADD .)
    BREAK           reduce using rule 57 (operation -> ADD .)
    FOR             reduce using rule 57 (operation -> ADD .)
    DEF             reduce using rule 57 (operation -> ADD .)
    RETURN          reduce using rule 57 (operation -> ADD .)
    NUMBER          reduce using rule 57 (operation -> ADD .)
    LEN             reduce using rule 57 (operation -> ADD .)
    $end            reduce using rule 57 (operation -> ADD .)
    +               reduce using rule 57 (operation -> ADD .)
    -               reduce using rule 57 (operation -> ADD .)
    *               reduce using rule 57 (operation -> ADD .)
    /               reduce using rule 57 (operation -> ADD .)
    )               reduce using rule 57 (operation -> ADD .)
    }               reduce using rule 57 (operation -> ADD .)
    ;               reduce using rule 57 (operation -> ADD .)
    ,               reduce using rule 57 (operation -> ADD .)
    ]               reduce using rule 57 (operation -> ADD .)
    >               reduce using rule 57 (operation -> ADD .)
    <               reduce using rule 57 (operation -> ADD .)
    =               reduce using rule 57 (operation -> ADD .)
    AND             reduce using rule 57 (operation -> ADD .)
    OR              reduce using rule 57 (operation -> ADD .)


state 20

    (58) operation -> SUB .

    VARIABLE        reduce using rule 58 (operation -> SUB .)
    (               reduce using rule 58 (operation -> SUB .)
    PRINT           reduce using rule 58 (operation -> SUB .)
    IF              reduce using rule 58 (operation -> SUB .)
    ELSE            reduce using rule 58 (operation -> SUB .)
    ELIF            reduce using rule 58 (operation -> SUB .)
    WHILE           reduce using rule 58 (operation -> SUB .)
    BREAK           reduce using rule 58 (operation -> SUB .)
    FOR             reduce using rule 58 (operation -> SUB .)
    DEF             reduce using rule 58 (operation -> SUB .)
    RETURN          reduce using rule 58 (operation -> SUB .)
    NUMBER          reduce using rule 58 (operation -> SUB .)
    LEN             reduce using rule 58 (operation -> SUB .)
    $end            reduce using rule 58 (operation -> SUB .)
    +               reduce using rule 58 (operation -> SUB .)
    -               reduce using rule 58 (operation -> SUB .)
    *               reduce using rule 58 (operation -> SUB .)
    /               reduce using rule 58 (operation -> SUB .)
    )               reduce using rule 58 (operation -> SUB .)
    }               reduce using rule 58 (operation -> SUB .)
    ;               reduce using rule 58 (operation -> SUB .)
    ,               reduce using rule 58 (operation -> SUB .)
    ]               reduce using rule 58 (operation -> SUB .)
    >               reduce using rule 58 (operation -> SUB .)
    <               reduce using rule 58 (operation -> SUB .)
    =               reduce using rule 58 (operation -> SUB .)
    AND             reduce using rule 58 (operation -> SUB .)
    OR              reduce using rule 58 (operation -> SUB .)


state 21

    (59) operation -> MUL .

    VARIABLE        reduce using rule 59 (operation -> MUL .)
    (               reduce using rule 59 (operation -> MUL .)
    PRINT           reduce using rule 59 (operation -> MUL .)
    IF              reduce using rule 59 (operation -> MUL .)
    ELSE            reduce using rule 59 (operation -> MUL .)
    ELIF            reduce using rule 59 (operation -> MUL .)
    WHILE           reduce using rule 59 (operation -> MUL .)
    BREAK           reduce using rule 59 (operation -> MUL .)
    FOR             reduce using rule 59 (operation -> MUL .)
    DEF             reduce using rule 59 (operation -> MUL .)
    RETURN          reduce using rule 59 (operation -> MUL .)
    NUMBER          reduce using rule 59 (operation -> MUL .)
    LEN             reduce using rule 59 (operation -> MUL .)
    $end            reduce using rule 59 (operation -> MUL .)
    +               reduce using rule 59 (operation -> MUL .)
    -               reduce using rule 59 (operation -> MUL .)
    *               reduce using rule 59 (operation -> MUL .)
    /               reduce using rule 59 (operation -> MUL .)
    )               reduce using rule 59 (operation -> MUL .)
    }               reduce using rule 59 (operation -> MUL .)
    ;               reduce using rule 59 (operation -> MUL .)
    ,               reduce using rule 59 (operation -> MUL .)
    ]               reduce using rule 59 (operation -> MUL .)
    >               reduce using rule 59 (operation -> MUL .)
    <               reduce using rule 59 (operation -> MUL .)
    =               reduce using rule 59 (operation -> MUL .)
    AND             reduce using rule 59 (operation -> MUL .)
    OR              reduce using rule 59 (operation -> MUL .)


state 22

    (60) operation -> DIV .

    VARIABLE        reduce using rule 60 (operation -> DIV .)
    (               reduce using rule 60 (operation -> DIV .)
    PRINT           reduce using rule 60 (operation -> DIV .)
    IF              reduce using rule 60 (operation -> DIV .)
    ELSE            reduce using rule 60 (operation -> DIV .)
    ELIF            reduce using rule 60 (operation -> DIV .)
    WHILE           reduce using rule 60 (operation -> DIV .)
    BREAK           reduce using rule 60 (operation -> DIV .)
    FOR             reduce using rule 60 (operation -> DIV .)
    DEF             reduce using rule 60 (operation -> DIV .)
    RETURN          reduce using rule 60 (operation -> DIV .)
    NUMBER          reduce using rule 60 (operation -> DIV .)
    LEN             reduce using rule 60 (operation -> DIV .)
    $end            reduce using rule 60 (operation -> DIV .)
    +               reduce using rule 60 (operation -> DIV .)
    -               reduce using rule 60 (operation -> DIV .)
    *               reduce using rule 60 (operation -> DIV .)
    /               reduce using rule 60 (operation -> DIV .)
    )               reduce using rule 60 (operation -> DIV .)
    }               reduce using rule 60 (operation -> DIV .)
    ;               reduce using rule 60 (operation -> DIV .)
    ,               reduce using rule 60 (operation -> DIV .)
    ]               reduce using rule 60 (operation -> DIV .)
    >               reduce using rule 60 (operation -> DIV .)
    <               reduce using rule 60 (operation -> DIV .)
    =               reduce using rule 60 (operation -> DIV .)
    AND             reduce using rule 60 (operation -> DIV .)
    OR              reduce using rule 60 (operation -> DIV .)


state 23

    (61) operation -> DIV_ext .

    VARIABLE        reduce using rule 61 (operation -> DIV_ext .)
    (               reduce using rule 61 (operation -> DIV_ext .)
    PRINT           reduce using rule 61 (operation -> DIV_ext .)
    IF              reduce using rule 61 (operation -> DIV_ext .)
    ELSE            reduce using rule 61 (operation -> DIV_ext .)
    ELIF            reduce using rule 61 (operation -> DIV_ext .)
    WHILE           reduce using rule 61 (operation -> DIV_ext .)
    BREAK           reduce using rule 61 (operation -> DIV_ext .)
    FOR             reduce using rule 61 (operation -> DIV_ext .)
    DEF             reduce using rule 61 (operation -> DIV_ext .)
    RETURN          reduce using rule 61 (operation -> DIV_ext .)
    NUMBER          reduce using rule 61 (operation -> DIV_ext .)
    LEN             reduce using rule 61 (operation -> DIV_ext .)
    $end            reduce using rule 61 (operation -> DIV_ext .)
    +               reduce using rule 61 (operation -> DIV_ext .)
    -               reduce using rule 61 (operation -> DIV_ext .)
    *               reduce using rule 61 (operation -> DIV_ext .)
    /               reduce using rule 61 (operation -> DIV_ext .)
    )               reduce using rule 61 (operation -> DIV_ext .)
    }               reduce using rule 61 (operation -> DIV_ext .)
    ;               reduce using rule 61 (operation -> DIV_ext .)
    ,               reduce using rule 61 (operation -> DIV_ext .)
    ]               reduce using rule 61 (operation -> DIV_ext .)
    >               reduce using rule 61 (operation -> DIV_ext .)
    <               reduce using rule 61 (operation -> DIV_ext .)
    =               reduce using rule 61 (operation -> DIV_ext .)
    AND             reduce using rule 61 (operation -> DIV_ext .)
    OR              reduce using rule 61 (operation -> DIV_ext .)


state 24

    (62) operation -> ( . operation )
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )

    (               shift and go to state 24
    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    operation                      shift and go to state 54
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    term                           shift and go to state 17
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57

state 25

    (68) print -> PRINT . ( pcontent )

    (               shift and go to state 58


state 26

    (29) if -> IF . ( condition ) { statements }

    (               shift and go to state 59


state 27

    (30) else -> ELSE . { statements }

    {               shift and go to state 60


state 28

    (31) elif -> ELIF . ( condition ) { statements }

    (               shift and go to state 61


state 29

    (27) while -> WHILE . ( condition ) { statements }

    (               shift and go to state 62


state 30

    (26) break -> BREAK .

    VARIABLE        reduce using rule 26 (break -> BREAK .)
    (               reduce using rule 26 (break -> BREAK .)
    PRINT           reduce using rule 26 (break -> BREAK .)
    IF              reduce using rule 26 (break -> BREAK .)
    ELSE            reduce using rule 26 (break -> BREAK .)
    ELIF            reduce using rule 26 (break -> BREAK .)
    WHILE           reduce using rule 26 (break -> BREAK .)
    BREAK           reduce using rule 26 (break -> BREAK .)
    FOR             reduce using rule 26 (break -> BREAK .)
    DEF             reduce using rule 26 (break -> BREAK .)
    RETURN          reduce using rule 26 (break -> BREAK .)
    NUMBER          reduce using rule 26 (break -> BREAK .)
    LEN             reduce using rule 26 (break -> BREAK .)
    $end            reduce using rule 26 (break -> BREAK .)
    }               reduce using rule 26 (break -> BREAK .)


state 31

    (28) for -> FOR . ( assignment ; condition ; VARIABLE + + ) { statements }

    (               shift and go to state 63


state 32

    (18) function -> DEF . VARIABLE ( functionTerms ) { statements }
    (19) function -> DEF . VARIABLE ( ) { statements }

    VARIABLE        shift and go to state 64


state 33

    (16) return -> RETURN .
    (17) return -> RETURN . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for ( resolved as shift
  ! shift/reduce conflict for LEN resolved as shift
    PRINT           reduce using rule 16 (return -> RETURN .)
    IF              reduce using rule 16 (return -> RETURN .)
    ELSE            reduce using rule 16 (return -> RETURN .)
    ELIF            reduce using rule 16 (return -> RETURN .)
    WHILE           reduce using rule 16 (return -> RETURN .)
    BREAK           reduce using rule 16 (return -> RETURN .)
    FOR             reduce using rule 16 (return -> RETURN .)
    DEF             reduce using rule 16 (return -> RETURN .)
    RETURN          reduce using rule 16 (return -> RETURN .)
    $end            reduce using rule 16 (return -> RETURN .)
    }               reduce using rule 16 (return -> RETURN .)
    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

  ! VARIABLE        [ reduce using rule 16 (return -> RETURN .) ]
  ! (               [ reduce using rule 16 (return -> RETURN .) ]
  ! NUMBER          [ reduce using rule 16 (return -> RETURN .) ]
  ! LEN             [ reduce using rule 16 (return -> RETURN .) ]

    term                           shift and go to state 65
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 34

    (74) term -> NUMBER .

    +               reduce using rule 74 (term -> NUMBER .)
    -               reduce using rule 74 (term -> NUMBER .)
    *               reduce using rule 74 (term -> NUMBER .)
    /               reduce using rule 74 (term -> NUMBER .)
    VARIABLE        reduce using rule 74 (term -> NUMBER .)
    (               reduce using rule 74 (term -> NUMBER .)
    PRINT           reduce using rule 74 (term -> NUMBER .)
    IF              reduce using rule 74 (term -> NUMBER .)
    ELSE            reduce using rule 74 (term -> NUMBER .)
    ELIF            reduce using rule 74 (term -> NUMBER .)
    WHILE           reduce using rule 74 (term -> NUMBER .)
    BREAK           reduce using rule 74 (term -> NUMBER .)
    FOR             reduce using rule 74 (term -> NUMBER .)
    DEF             reduce using rule 74 (term -> NUMBER .)
    RETURN          reduce using rule 74 (term -> NUMBER .)
    NUMBER          reduce using rule 74 (term -> NUMBER .)
    LEN             reduce using rule 74 (term -> NUMBER .)
    $end            reduce using rule 74 (term -> NUMBER .)
    }               reduce using rule 74 (term -> NUMBER .)
    ;               reduce using rule 74 (term -> NUMBER .)
    )               reduce using rule 74 (term -> NUMBER .)
    ,               reduce using rule 74 (term -> NUMBER .)
    ]               reduce using rule 74 (term -> NUMBER .)
    >               reduce using rule 74 (term -> NUMBER .)
    <               reduce using rule 74 (term -> NUMBER .)
    =               reduce using rule 74 (term -> NUMBER .)
    AND             reduce using rule 74 (term -> NUMBER .)
    OR              reduce using rule 74 (term -> NUMBER .)


state 35

    (77) term -> len .

    +               reduce using rule 77 (term -> len .)
    -               reduce using rule 77 (term -> len .)
    *               reduce using rule 77 (term -> len .)
    /               reduce using rule 77 (term -> len .)
    VARIABLE        reduce using rule 77 (term -> len .)
    (               reduce using rule 77 (term -> len .)
    PRINT           reduce using rule 77 (term -> len .)
    IF              reduce using rule 77 (term -> len .)
    ELSE            reduce using rule 77 (term -> len .)
    ELIF            reduce using rule 77 (term -> len .)
    WHILE           reduce using rule 77 (term -> len .)
    BREAK           reduce using rule 77 (term -> len .)
    FOR             reduce using rule 77 (term -> len .)
    DEF             reduce using rule 77 (term -> len .)
    RETURN          reduce using rule 77 (term -> len .)
    NUMBER          reduce using rule 77 (term -> len .)
    LEN             reduce using rule 77 (term -> len .)
    $end            reduce using rule 77 (term -> len .)
    }               reduce using rule 77 (term -> len .)
    ;               reduce using rule 77 (term -> len .)
    )               reduce using rule 77 (term -> len .)
    ,               reduce using rule 77 (term -> len .)
    ]               reduce using rule 77 (term -> len .)
    >               reduce using rule 77 (term -> len .)
    <               reduce using rule 77 (term -> len .)
    =               reduce using rule 77 (term -> len .)
    AND             reduce using rule 77 (term -> len .)
    OR              reduce using rule 77 (term -> len .)


state 36

    (79) len -> LEN . ( VARIABLE )

    (               shift and go to state 67


state 37

    (2) statements -> statements statement .

    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    (               reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    ELSE            reduce using rule 2 (statements -> statements statement .)
    ELIF            reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    BREAK           reduce using rule 2 (statements -> statements statement .)
    FOR             reduce using rule 2 (statements -> statements statement .)
    DEF             reduce using rule 2 (statements -> statements statement .)
    RETURN          reduce using rule 2 (statements -> statements statement .)
    NUMBER          reduce using rule 2 (statements -> statements statement .)
    LEN             reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    }               reduce using rule 2 (statements -> statements statement .)


state 38

    (46) assignment -> VARIABLE = . term
    (47) assignment -> VARIABLE = . array
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (70) array -> . [ pcontent ]
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    [               shift and go to state 70
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 68
    array                          shift and go to state 69
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 39

    (49) assignment -> VARIABLE + . = term

    =               shift and go to state 71


state 40

    (51) assignment -> VARIABLE - . = term

    =               shift and go to state 72


state 41

    (53) assignment -> VARIABLE * . = term

    =               shift and go to state 73


state 42

    (55) assignment -> VARIABLE / . = term

    =               shift and go to state 74


state 43

    (20) runFunction -> VARIABLE ( . runFunctionTerms )
    (21) runFunction -> VARIABLE ( . )
    (22) runFunctionTerms -> . term
    (23) runFunctionTerms -> . runFunctionTerms , term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    )               shift and go to state 76
    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    runFunctionTerms               shift and go to state 75
    term                           shift and go to state 77
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 44

    (69) array_term -> VARIABLE [ . term ]
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 78
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 45

    (63) ADD -> term + . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 79
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 46

    (64) SUB -> term - . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 80
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 47

    (65) MUL -> term * . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 81
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 48

    (66) DIV -> term / . term
    (67) DIV_ext -> term / . / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    /               shift and go to state 83
    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 82
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 49

    (48) assignment -> array_term = . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    array_term                     shift and go to state 56
    term                           shift and go to state 84
    operation                      shift and go to state 66
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 50

    (50) assignment -> array_term + . = term

    =               shift and go to state 85


state 51

    (52) assignment -> array_term - . = term

    =               shift and go to state 86


state 52

    (54) assignment -> array_term * . = term

    =               shift and go to state 87


state 53

    (56) assignment -> array_term / . = term

    =               shift and go to state 88


state 54

    (62) operation -> ( operation . )
    (75) term -> operation .

    )               shift and go to state 89
    +               reduce using rule 75 (term -> operation .)
    -               reduce using rule 75 (term -> operation .)
    *               reduce using rule 75 (term -> operation .)
    /               reduce using rule 75 (term -> operation .)


state 55

    (73) term -> VARIABLE .
    (69) array_term -> VARIABLE . [ term ]
    (20) runFunction -> VARIABLE . ( runFunctionTerms )
    (21) runFunction -> VARIABLE . ( )

  ! shift/reduce conflict for ( resolved as shift
    +               reduce using rule 73 (term -> VARIABLE .)
    -               reduce using rule 73 (term -> VARIABLE .)
    *               reduce using rule 73 (term -> VARIABLE .)
    /               reduce using rule 73 (term -> VARIABLE .)
    VARIABLE        reduce using rule 73 (term -> VARIABLE .)
    PRINT           reduce using rule 73 (term -> VARIABLE .)
    IF              reduce using rule 73 (term -> VARIABLE .)
    ELSE            reduce using rule 73 (term -> VARIABLE .)
    ELIF            reduce using rule 73 (term -> VARIABLE .)
    WHILE           reduce using rule 73 (term -> VARIABLE .)
    BREAK           reduce using rule 73 (term -> VARIABLE .)
    FOR             reduce using rule 73 (term -> VARIABLE .)
    DEF             reduce using rule 73 (term -> VARIABLE .)
    RETURN          reduce using rule 73 (term -> VARIABLE .)
    NUMBER          reduce using rule 73 (term -> VARIABLE .)
    LEN             reduce using rule 73 (term -> VARIABLE .)
    $end            reduce using rule 73 (term -> VARIABLE .)
    }               reduce using rule 73 (term -> VARIABLE .)
    ;               reduce using rule 73 (term -> VARIABLE .)
    )               reduce using rule 73 (term -> VARIABLE .)
    ,               reduce using rule 73 (term -> VARIABLE .)
    ]               reduce using rule 73 (term -> VARIABLE .)
    >               reduce using rule 73 (term -> VARIABLE .)
    <               reduce using rule 73 (term -> VARIABLE .)
    =               reduce using rule 73 (term -> VARIABLE .)
    AND             reduce using rule 73 (term -> VARIABLE .)
    OR              reduce using rule 73 (term -> VARIABLE .)
    [               shift and go to state 44
    (               shift and go to state 43

  ! (               [ reduce using rule 73 (term -> VARIABLE .) ]


state 56

    (76) term -> array_term .

    +               reduce using rule 76 (term -> array_term .)
    -               reduce using rule 76 (term -> array_term .)
    *               reduce using rule 76 (term -> array_term .)
    /               reduce using rule 76 (term -> array_term .)
    VARIABLE        reduce using rule 76 (term -> array_term .)
    (               reduce using rule 76 (term -> array_term .)
    PRINT           reduce using rule 76 (term -> array_term .)
    IF              reduce using rule 76 (term -> array_term .)
    ELSE            reduce using rule 76 (term -> array_term .)
    ELIF            reduce using rule 76 (term -> array_term .)
    WHILE           reduce using rule 76 (term -> array_term .)
    BREAK           reduce using rule 76 (term -> array_term .)
    FOR             reduce using rule 76 (term -> array_term .)
    DEF             reduce using rule 76 (term -> array_term .)
    RETURN          reduce using rule 76 (term -> array_term .)
    NUMBER          reduce using rule 76 (term -> array_term .)
    LEN             reduce using rule 76 (term -> array_term .)
    $end            reduce using rule 76 (term -> array_term .)
    }               reduce using rule 76 (term -> array_term .)
    ;               reduce using rule 76 (term -> array_term .)
    )               reduce using rule 76 (term -> array_term .)
    ,               reduce using rule 76 (term -> array_term .)
    ]               reduce using rule 76 (term -> array_term .)
    >               reduce using rule 76 (term -> array_term .)
    <               reduce using rule 76 (term -> array_term .)
    =               reduce using rule 76 (term -> array_term .)
    AND             reduce using rule 76 (term -> array_term .)
    OR              reduce using rule 76 (term -> array_term .)


state 57

    (78) term -> runFunction .

    +               reduce using rule 78 (term -> runFunction .)
    -               reduce using rule 78 (term -> runFunction .)
    *               reduce using rule 78 (term -> runFunction .)
    /               reduce using rule 78 (term -> runFunction .)
    VARIABLE        reduce using rule 78 (term -> runFunction .)
    (               reduce using rule 78 (term -> runFunction .)
    PRINT           reduce using rule 78 (term -> runFunction .)
    IF              reduce using rule 78 (term -> runFunction .)
    ELSE            reduce using rule 78 (term -> runFunction .)
    ELIF            reduce using rule 78 (term -> runFunction .)
    WHILE           reduce using rule 78 (term -> runFunction .)
    BREAK           reduce using rule 78 (term -> runFunction .)
    FOR             reduce using rule 78 (term -> runFunction .)
    DEF             reduce using rule 78 (term -> runFunction .)
    RETURN          reduce using rule 78 (term -> runFunction .)
    NUMBER          reduce using rule 78 (term -> runFunction .)
    LEN             reduce using rule 78 (term -> runFunction .)
    $end            reduce using rule 78 (term -> runFunction .)
    }               reduce using rule 78 (term -> runFunction .)
    ;               reduce using rule 78 (term -> runFunction .)
    )               reduce using rule 78 (term -> runFunction .)
    ,               reduce using rule 78 (term -> runFunction .)
    ]               reduce using rule 78 (term -> runFunction .)
    >               reduce using rule 78 (term -> runFunction .)
    <               reduce using rule 78 (term -> runFunction .)
    =               reduce using rule 78 (term -> runFunction .)
    AND             reduce using rule 78 (term -> runFunction .)
    OR              reduce using rule 78 (term -> runFunction .)


state 58

    (68) print -> PRINT ( . pcontent )
    (71) pcontent -> . pcontent , term
    (72) pcontent -> . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    pcontent                       shift and go to state 90
    term                           shift and go to state 91
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 59

    (29) if -> IF ( . condition ) { statements }
    (34) condition -> . greater
    (35) condition -> . greater_equal
    (36) condition -> . less
    (37) condition -> . less_equal
    (38) condition -> . equal_equal
    (39) condition -> . and
    (40) condition -> . or
    (41) greater -> . term > term
    (42) greater_equal -> . term > = term
    (43) less -> . term < term
    (44) less_equal -> . term < = term
    (45) equal_equal -> . term = = term
    (32) and -> . condition AND condition
    (33) or -> . condition OR condition
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    condition                      shift and go to state 92
    greater                        shift and go to state 93
    greater_equal                  shift and go to state 94
    less                           shift and go to state 95
    less_equal                     shift and go to state 96
    equal_equal                    shift and go to state 97
    and                            shift and go to state 98
    or                             shift and go to state 99
    term                           shift and go to state 100
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 60

    (30) else -> ELSE { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (68) print -> . PRINT ( pcontent )
    (29) if -> . IF ( condition ) { statements }
    (30) else -> . ELSE { statements }
    (31) elif -> . ELIF ( condition ) { statements }
    (27) while -> . WHILE ( condition ) { statements }
    (26) break -> . BREAK
    (28) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (18) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (19) function -> . DEF VARIABLE ( ) { statements }
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (16) return -> . RETURN
    (17) return -> . RETURN term
    (69) array_term -> . VARIABLE [ term ]
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (79) len -> . LEN ( VARIABLE )

    VARIABLE        shift and go to state 16
    (               shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    ELSE            shift and go to state 27
    ELIF            shift and go to state 28
    WHILE           shift and go to state 29
    BREAK           shift and go to state 30
    FOR             shift and go to state 31
    DEF             shift and go to state 32
    RETURN          shift and go to state 33
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    statements                     shift and go to state 101
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    term                           shift and go to state 17
    array_term                     shift and go to state 18
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    len                            shift and go to state 35

state 61

    (31) elif -> ELIF ( . condition ) { statements }
    (34) condition -> . greater
    (35) condition -> . greater_equal
    (36) condition -> . less
    (37) condition -> . less_equal
    (38) condition -> . equal_equal
    (39) condition -> . and
    (40) condition -> . or
    (41) greater -> . term > term
    (42) greater_equal -> . term > = term
    (43) less -> . term < term
    (44) less_equal -> . term < = term
    (45) equal_equal -> . term = = term
    (32) and -> . condition AND condition
    (33) or -> . condition OR condition
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    condition                      shift and go to state 102
    greater                        shift and go to state 93
    greater_equal                  shift and go to state 94
    less                           shift and go to state 95
    less_equal                     shift and go to state 96
    equal_equal                    shift and go to state 97
    and                            shift and go to state 98
    or                             shift and go to state 99
    term                           shift and go to state 100
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 62

    (27) while -> WHILE ( . condition ) { statements }
    (34) condition -> . greater
    (35) condition -> . greater_equal
    (36) condition -> . less
    (37) condition -> . less_equal
    (38) condition -> . equal_equal
    (39) condition -> . and
    (40) condition -> . or
    (41) greater -> . term > term
    (42) greater_equal -> . term > = term
    (43) less -> . term < term
    (44) less_equal -> . term < = term
    (45) equal_equal -> . term = = term
    (32) and -> . condition AND condition
    (33) or -> . condition OR condition
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    condition                      shift and go to state 103
    greater                        shift and go to state 93
    greater_equal                  shift and go to state 94
    less                           shift and go to state 95
    less_equal                     shift and go to state 96
    equal_equal                    shift and go to state 97
    and                            shift and go to state 98
    or                             shift and go to state 99
    term                           shift and go to state 100
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 63

    (28) for -> FOR ( . assignment ; condition ; VARIABLE + + ) { statements }
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (69) array_term -> . VARIABLE [ term ]

    VARIABLE        shift and go to state 105

    assignment                     shift and go to state 104
    array_term                     shift and go to state 106

state 64

    (18) function -> DEF VARIABLE . ( functionTerms ) { statements }
    (19) function -> DEF VARIABLE . ( ) { statements }

    (               shift and go to state 107


state 65

    (17) return -> RETURN term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 17 (return -> RETURN term .)
    (               reduce using rule 17 (return -> RETURN term .)
    PRINT           reduce using rule 17 (return -> RETURN term .)
    IF              reduce using rule 17 (return -> RETURN term .)
    ELSE            reduce using rule 17 (return -> RETURN term .)
    ELIF            reduce using rule 17 (return -> RETURN term .)
    WHILE           reduce using rule 17 (return -> RETURN term .)
    BREAK           reduce using rule 17 (return -> RETURN term .)
    FOR             reduce using rule 17 (return -> RETURN term .)
    DEF             reduce using rule 17 (return -> RETURN term .)
    RETURN          reduce using rule 17 (return -> RETURN term .)
    NUMBER          reduce using rule 17 (return -> RETURN term .)
    LEN             reduce using rule 17 (return -> RETURN term .)
    $end            reduce using rule 17 (return -> RETURN term .)
    }               reduce using rule 17 (return -> RETURN term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 66

    (75) term -> operation .

    +               reduce using rule 75 (term -> operation .)
    -               reduce using rule 75 (term -> operation .)
    *               reduce using rule 75 (term -> operation .)
    /               reduce using rule 75 (term -> operation .)
    VARIABLE        reduce using rule 75 (term -> operation .)
    (               reduce using rule 75 (term -> operation .)
    PRINT           reduce using rule 75 (term -> operation .)
    IF              reduce using rule 75 (term -> operation .)
    ELSE            reduce using rule 75 (term -> operation .)
    ELIF            reduce using rule 75 (term -> operation .)
    WHILE           reduce using rule 75 (term -> operation .)
    BREAK           reduce using rule 75 (term -> operation .)
    FOR             reduce using rule 75 (term -> operation .)
    DEF             reduce using rule 75 (term -> operation .)
    RETURN          reduce using rule 75 (term -> operation .)
    NUMBER          reduce using rule 75 (term -> operation .)
    LEN             reduce using rule 75 (term -> operation .)
    $end            reduce using rule 75 (term -> operation .)
    }               reduce using rule 75 (term -> operation .)
    ;               reduce using rule 75 (term -> operation .)
    )               reduce using rule 75 (term -> operation .)
    ,               reduce using rule 75 (term -> operation .)
    ]               reduce using rule 75 (term -> operation .)
    >               reduce using rule 75 (term -> operation .)
    <               reduce using rule 75 (term -> operation .)
    =               reduce using rule 75 (term -> operation .)
    AND             reduce using rule 75 (term -> operation .)
    OR              reduce using rule 75 (term -> operation .)


state 67

    (79) len -> LEN ( . VARIABLE )

    VARIABLE        shift and go to state 108


state 68

    (46) assignment -> VARIABLE = term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 46 (assignment -> VARIABLE = term .)
    (               reduce using rule 46 (assignment -> VARIABLE = term .)
    PRINT           reduce using rule 46 (assignment -> VARIABLE = term .)
    IF              reduce using rule 46 (assignment -> VARIABLE = term .)
    ELSE            reduce using rule 46 (assignment -> VARIABLE = term .)
    ELIF            reduce using rule 46 (assignment -> VARIABLE = term .)
    WHILE           reduce using rule 46 (assignment -> VARIABLE = term .)
    BREAK           reduce using rule 46 (assignment -> VARIABLE = term .)
    FOR             reduce using rule 46 (assignment -> VARIABLE = term .)
    DEF             reduce using rule 46 (assignment -> VARIABLE = term .)
    RETURN          reduce using rule 46 (assignment -> VARIABLE = term .)
    NUMBER          reduce using rule 46 (assignment -> VARIABLE = term .)
    LEN             reduce using rule 46 (assignment -> VARIABLE = term .)
    $end            reduce using rule 46 (assignment -> VARIABLE = term .)
    }               reduce using rule 46 (assignment -> VARIABLE = term .)
    ;               reduce using rule 46 (assignment -> VARIABLE = term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 69

    (47) assignment -> VARIABLE = array .

    VARIABLE        reduce using rule 47 (assignment -> VARIABLE = array .)
    (               reduce using rule 47 (assignment -> VARIABLE = array .)
    PRINT           reduce using rule 47 (assignment -> VARIABLE = array .)
    IF              reduce using rule 47 (assignment -> VARIABLE = array .)
    ELSE            reduce using rule 47 (assignment -> VARIABLE = array .)
    ELIF            reduce using rule 47 (assignment -> VARIABLE = array .)
    WHILE           reduce using rule 47 (assignment -> VARIABLE = array .)
    BREAK           reduce using rule 47 (assignment -> VARIABLE = array .)
    FOR             reduce using rule 47 (assignment -> VARIABLE = array .)
    DEF             reduce using rule 47 (assignment -> VARIABLE = array .)
    RETURN          reduce using rule 47 (assignment -> VARIABLE = array .)
    NUMBER          reduce using rule 47 (assignment -> VARIABLE = array .)
    LEN             reduce using rule 47 (assignment -> VARIABLE = array .)
    $end            reduce using rule 47 (assignment -> VARIABLE = array .)
    }               reduce using rule 47 (assignment -> VARIABLE = array .)
    ;               reduce using rule 47 (assignment -> VARIABLE = array .)


state 70

    (70) array -> [ . pcontent ]
    (71) pcontent -> . pcontent , term
    (72) pcontent -> . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    pcontent                       shift and go to state 109
    term                           shift and go to state 91
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 71

    (49) assignment -> VARIABLE + = . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 110
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 72

    (51) assignment -> VARIABLE - = . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 111
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 73

    (53) assignment -> VARIABLE * = . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 112
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 74

    (55) assignment -> VARIABLE / = . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 113
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 75

    (20) runFunction -> VARIABLE ( runFunctionTerms . )
    (23) runFunctionTerms -> runFunctionTerms . , term

    )               shift and go to state 114
    ,               shift and go to state 115


state 76

    (21) runFunction -> VARIABLE ( ) .

    VARIABLE        reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    (               reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    PRINT           reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    IF              reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    ELSE            reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    ELIF            reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    WHILE           reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    BREAK           reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    FOR             reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    DEF             reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    RETURN          reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    NUMBER          reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    LEN             reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    $end            reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    +               reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    -               reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    *               reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    /               reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    }               reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    ;               reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    )               reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    ,               reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    ]               reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    >               reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    <               reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    =               reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    AND             reduce using rule 21 (runFunction -> VARIABLE ( ) .)
    OR              reduce using rule 21 (runFunction -> VARIABLE ( ) .)


state 77

    (22) runFunctionTerms -> term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    )               reduce using rule 22 (runFunctionTerms -> term .)
    ,               reduce using rule 22 (runFunctionTerms -> term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 78

    (69) array_term -> VARIABLE [ term . ]
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    ]               shift and go to state 116
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 79

    (63) ADD -> term + term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    VARIABLE        reduce using rule 63 (ADD -> term + term .)
    (               reduce using rule 63 (ADD -> term + term .)
    PRINT           reduce using rule 63 (ADD -> term + term .)
    IF              reduce using rule 63 (ADD -> term + term .)
    ELSE            reduce using rule 63 (ADD -> term + term .)
    ELIF            reduce using rule 63 (ADD -> term + term .)
    WHILE           reduce using rule 63 (ADD -> term + term .)
    BREAK           reduce using rule 63 (ADD -> term + term .)
    FOR             reduce using rule 63 (ADD -> term + term .)
    DEF             reduce using rule 63 (ADD -> term + term .)
    RETURN          reduce using rule 63 (ADD -> term + term .)
    NUMBER          reduce using rule 63 (ADD -> term + term .)
    LEN             reduce using rule 63 (ADD -> term + term .)
    $end            reduce using rule 63 (ADD -> term + term .)
    )               reduce using rule 63 (ADD -> term + term .)
    }               reduce using rule 63 (ADD -> term + term .)
    ;               reduce using rule 63 (ADD -> term + term .)
    ,               reduce using rule 63 (ADD -> term + term .)
    ]               reduce using rule 63 (ADD -> term + term .)
    >               reduce using rule 63 (ADD -> term + term .)
    <               reduce using rule 63 (ADD -> term + term .)
    =               reduce using rule 63 (ADD -> term + term .)
    AND             reduce using rule 63 (ADD -> term + term .)
    OR              reduce using rule 63 (ADD -> term + term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48

  ! +               [ reduce using rule 63 (ADD -> term + term .) ]
  ! -               [ reduce using rule 63 (ADD -> term + term .) ]
  ! *               [ reduce using rule 63 (ADD -> term + term .) ]
  ! /               [ reduce using rule 63 (ADD -> term + term .) ]


state 80

    (64) SUB -> term - term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    VARIABLE        reduce using rule 64 (SUB -> term - term .)
    (               reduce using rule 64 (SUB -> term - term .)
    PRINT           reduce using rule 64 (SUB -> term - term .)
    IF              reduce using rule 64 (SUB -> term - term .)
    ELSE            reduce using rule 64 (SUB -> term - term .)
    ELIF            reduce using rule 64 (SUB -> term - term .)
    WHILE           reduce using rule 64 (SUB -> term - term .)
    BREAK           reduce using rule 64 (SUB -> term - term .)
    FOR             reduce using rule 64 (SUB -> term - term .)
    DEF             reduce using rule 64 (SUB -> term - term .)
    RETURN          reduce using rule 64 (SUB -> term - term .)
    NUMBER          reduce using rule 64 (SUB -> term - term .)
    LEN             reduce using rule 64 (SUB -> term - term .)
    $end            reduce using rule 64 (SUB -> term - term .)
    )               reduce using rule 64 (SUB -> term - term .)
    }               reduce using rule 64 (SUB -> term - term .)
    ;               reduce using rule 64 (SUB -> term - term .)
    ,               reduce using rule 64 (SUB -> term - term .)
    ]               reduce using rule 64 (SUB -> term - term .)
    >               reduce using rule 64 (SUB -> term - term .)
    <               reduce using rule 64 (SUB -> term - term .)
    =               reduce using rule 64 (SUB -> term - term .)
    AND             reduce using rule 64 (SUB -> term - term .)
    OR              reduce using rule 64 (SUB -> term - term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48

  ! +               [ reduce using rule 64 (SUB -> term - term .) ]
  ! -               [ reduce using rule 64 (SUB -> term - term .) ]
  ! *               [ reduce using rule 64 (SUB -> term - term .) ]
  ! /               [ reduce using rule 64 (SUB -> term - term .) ]


state 81

    (65) MUL -> term * term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    VARIABLE        reduce using rule 65 (MUL -> term * term .)
    (               reduce using rule 65 (MUL -> term * term .)
    PRINT           reduce using rule 65 (MUL -> term * term .)
    IF              reduce using rule 65 (MUL -> term * term .)
    ELSE            reduce using rule 65 (MUL -> term * term .)
    ELIF            reduce using rule 65 (MUL -> term * term .)
    WHILE           reduce using rule 65 (MUL -> term * term .)
    BREAK           reduce using rule 65 (MUL -> term * term .)
    FOR             reduce using rule 65 (MUL -> term * term .)
    DEF             reduce using rule 65 (MUL -> term * term .)
    RETURN          reduce using rule 65 (MUL -> term * term .)
    NUMBER          reduce using rule 65 (MUL -> term * term .)
    LEN             reduce using rule 65 (MUL -> term * term .)
    $end            reduce using rule 65 (MUL -> term * term .)
    )               reduce using rule 65 (MUL -> term * term .)
    }               reduce using rule 65 (MUL -> term * term .)
    ;               reduce using rule 65 (MUL -> term * term .)
    ,               reduce using rule 65 (MUL -> term * term .)
    ]               reduce using rule 65 (MUL -> term * term .)
    >               reduce using rule 65 (MUL -> term * term .)
    <               reduce using rule 65 (MUL -> term * term .)
    =               reduce using rule 65 (MUL -> term * term .)
    AND             reduce using rule 65 (MUL -> term * term .)
    OR              reduce using rule 65 (MUL -> term * term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48

  ! +               [ reduce using rule 65 (MUL -> term * term .) ]
  ! -               [ reduce using rule 65 (MUL -> term * term .) ]
  ! *               [ reduce using rule 65 (MUL -> term * term .) ]
  ! /               [ reduce using rule 65 (MUL -> term * term .) ]


state 82

    (66) DIV -> term / term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    VARIABLE        reduce using rule 66 (DIV -> term / term .)
    (               reduce using rule 66 (DIV -> term / term .)
    PRINT           reduce using rule 66 (DIV -> term / term .)
    IF              reduce using rule 66 (DIV -> term / term .)
    ELSE            reduce using rule 66 (DIV -> term / term .)
    ELIF            reduce using rule 66 (DIV -> term / term .)
    WHILE           reduce using rule 66 (DIV -> term / term .)
    BREAK           reduce using rule 66 (DIV -> term / term .)
    FOR             reduce using rule 66 (DIV -> term / term .)
    DEF             reduce using rule 66 (DIV -> term / term .)
    RETURN          reduce using rule 66 (DIV -> term / term .)
    NUMBER          reduce using rule 66 (DIV -> term / term .)
    LEN             reduce using rule 66 (DIV -> term / term .)
    $end            reduce using rule 66 (DIV -> term / term .)
    )               reduce using rule 66 (DIV -> term / term .)
    }               reduce using rule 66 (DIV -> term / term .)
    ;               reduce using rule 66 (DIV -> term / term .)
    ,               reduce using rule 66 (DIV -> term / term .)
    ]               reduce using rule 66 (DIV -> term / term .)
    >               reduce using rule 66 (DIV -> term / term .)
    <               reduce using rule 66 (DIV -> term / term .)
    =               reduce using rule 66 (DIV -> term / term .)
    AND             reduce using rule 66 (DIV -> term / term .)
    OR              reduce using rule 66 (DIV -> term / term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48

  ! +               [ reduce using rule 66 (DIV -> term / term .) ]
  ! -               [ reduce using rule 66 (DIV -> term / term .) ]
  ! *               [ reduce using rule 66 (DIV -> term / term .) ]
  ! /               [ reduce using rule 66 (DIV -> term / term .) ]


state 83

    (67) DIV_ext -> term / / . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 117
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 84

    (48) assignment -> array_term = term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 48 (assignment -> array_term = term .)
    (               reduce using rule 48 (assignment -> array_term = term .)
    PRINT           reduce using rule 48 (assignment -> array_term = term .)
    IF              reduce using rule 48 (assignment -> array_term = term .)
    ELSE            reduce using rule 48 (assignment -> array_term = term .)
    ELIF            reduce using rule 48 (assignment -> array_term = term .)
    WHILE           reduce using rule 48 (assignment -> array_term = term .)
    BREAK           reduce using rule 48 (assignment -> array_term = term .)
    FOR             reduce using rule 48 (assignment -> array_term = term .)
    DEF             reduce using rule 48 (assignment -> array_term = term .)
    RETURN          reduce using rule 48 (assignment -> array_term = term .)
    NUMBER          reduce using rule 48 (assignment -> array_term = term .)
    LEN             reduce using rule 48 (assignment -> array_term = term .)
    $end            reduce using rule 48 (assignment -> array_term = term .)
    }               reduce using rule 48 (assignment -> array_term = term .)
    ;               reduce using rule 48 (assignment -> array_term = term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 85

    (50) assignment -> array_term + = . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    array_term                     shift and go to state 56
    term                           shift and go to state 118
    operation                      shift and go to state 66
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 86

    (52) assignment -> array_term - = . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    array_term                     shift and go to state 56
    term                           shift and go to state 119
    operation                      shift and go to state 66
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 87

    (54) assignment -> array_term * = . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    array_term                     shift and go to state 56
    term                           shift and go to state 120
    operation                      shift and go to state 66
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 88

    (56) assignment -> array_term / = . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    array_term                     shift and go to state 56
    term                           shift and go to state 121
    operation                      shift and go to state 66
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 89

    (62) operation -> ( operation ) .

    VARIABLE        reduce using rule 62 (operation -> ( operation ) .)
    (               reduce using rule 62 (operation -> ( operation ) .)
    PRINT           reduce using rule 62 (operation -> ( operation ) .)
    IF              reduce using rule 62 (operation -> ( operation ) .)
    ELSE            reduce using rule 62 (operation -> ( operation ) .)
    ELIF            reduce using rule 62 (operation -> ( operation ) .)
    WHILE           reduce using rule 62 (operation -> ( operation ) .)
    BREAK           reduce using rule 62 (operation -> ( operation ) .)
    FOR             reduce using rule 62 (operation -> ( operation ) .)
    DEF             reduce using rule 62 (operation -> ( operation ) .)
    RETURN          reduce using rule 62 (operation -> ( operation ) .)
    NUMBER          reduce using rule 62 (operation -> ( operation ) .)
    LEN             reduce using rule 62 (operation -> ( operation ) .)
    $end            reduce using rule 62 (operation -> ( operation ) .)
    +               reduce using rule 62 (operation -> ( operation ) .)
    -               reduce using rule 62 (operation -> ( operation ) .)
    *               reduce using rule 62 (operation -> ( operation ) .)
    /               reduce using rule 62 (operation -> ( operation ) .)
    )               reduce using rule 62 (operation -> ( operation ) .)
    }               reduce using rule 62 (operation -> ( operation ) .)
    ;               reduce using rule 62 (operation -> ( operation ) .)
    ,               reduce using rule 62 (operation -> ( operation ) .)
    ]               reduce using rule 62 (operation -> ( operation ) .)
    >               reduce using rule 62 (operation -> ( operation ) .)
    <               reduce using rule 62 (operation -> ( operation ) .)
    =               reduce using rule 62 (operation -> ( operation ) .)
    AND             reduce using rule 62 (operation -> ( operation ) .)
    OR              reduce using rule 62 (operation -> ( operation ) .)


state 90

    (68) print -> PRINT ( pcontent . )
    (71) pcontent -> pcontent . , term

    )               shift and go to state 122
    ,               shift and go to state 123


state 91

    (72) pcontent -> term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    )               reduce using rule 72 (pcontent -> term .)
    ,               reduce using rule 72 (pcontent -> term .)
    ]               reduce using rule 72 (pcontent -> term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 92

    (29) if -> IF ( condition . ) { statements }
    (32) and -> condition . AND condition
    (33) or -> condition . OR condition

    )               shift and go to state 124
    AND             shift and go to state 125
    OR              shift and go to state 126


state 93

    (34) condition -> greater .

    )               reduce using rule 34 (condition -> greater .)
    AND             reduce using rule 34 (condition -> greater .)
    OR              reduce using rule 34 (condition -> greater .)
    ;               reduce using rule 34 (condition -> greater .)


state 94

    (35) condition -> greater_equal .

    )               reduce using rule 35 (condition -> greater_equal .)
    AND             reduce using rule 35 (condition -> greater_equal .)
    OR              reduce using rule 35 (condition -> greater_equal .)
    ;               reduce using rule 35 (condition -> greater_equal .)


state 95

    (36) condition -> less .

    )               reduce using rule 36 (condition -> less .)
    AND             reduce using rule 36 (condition -> less .)
    OR              reduce using rule 36 (condition -> less .)
    ;               reduce using rule 36 (condition -> less .)


state 96

    (37) condition -> less_equal .

    )               reduce using rule 37 (condition -> less_equal .)
    AND             reduce using rule 37 (condition -> less_equal .)
    OR              reduce using rule 37 (condition -> less_equal .)
    ;               reduce using rule 37 (condition -> less_equal .)


state 97

    (38) condition -> equal_equal .

    )               reduce using rule 38 (condition -> equal_equal .)
    AND             reduce using rule 38 (condition -> equal_equal .)
    OR              reduce using rule 38 (condition -> equal_equal .)
    ;               reduce using rule 38 (condition -> equal_equal .)


state 98

    (39) condition -> and .

    )               reduce using rule 39 (condition -> and .)
    AND             reduce using rule 39 (condition -> and .)
    OR              reduce using rule 39 (condition -> and .)
    ;               reduce using rule 39 (condition -> and .)


state 99

    (40) condition -> or .

    )               reduce using rule 40 (condition -> or .)
    AND             reduce using rule 40 (condition -> or .)
    OR              reduce using rule 40 (condition -> or .)
    ;               reduce using rule 40 (condition -> or .)


state 100

    (41) greater -> term . > term
    (42) greater_equal -> term . > = term
    (43) less -> term . < term
    (44) less_equal -> term . < = term
    (45) equal_equal -> term . = = term
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    >               shift and go to state 127
    <               shift and go to state 129
    =               shift and go to state 128
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 101

    (30) else -> ELSE { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (68) print -> . PRINT ( pcontent )
    (29) if -> . IF ( condition ) { statements }
    (30) else -> . ELSE { statements }
    (31) elif -> . ELIF ( condition ) { statements }
    (27) while -> . WHILE ( condition ) { statements }
    (26) break -> . BREAK
    (28) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (18) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (19) function -> . DEF VARIABLE ( ) { statements }
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (16) return -> . RETURN
    (17) return -> . RETURN term
    (69) array_term -> . VARIABLE [ term ]
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (79) len -> . LEN ( VARIABLE )

    }               shift and go to state 130
    VARIABLE        shift and go to state 16
    (               shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    ELSE            shift and go to state 27
    ELIF            shift and go to state 28
    WHILE           shift and go to state 29
    BREAK           shift and go to state 30
    FOR             shift and go to state 31
    DEF             shift and go to state 32
    RETURN          shift and go to state 33
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    statement                      shift and go to state 37
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    term                           shift and go to state 17
    array_term                     shift and go to state 18
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    len                            shift and go to state 35

state 102

    (31) elif -> ELIF ( condition . ) { statements }
    (32) and -> condition . AND condition
    (33) or -> condition . OR condition

    )               shift and go to state 131
    AND             shift and go to state 125
    OR              shift and go to state 126


state 103

    (27) while -> WHILE ( condition . ) { statements }
    (32) and -> condition . AND condition
    (33) or -> condition . OR condition

    )               shift and go to state 132
    AND             shift and go to state 125
    OR              shift and go to state 126


state 104

    (28) for -> FOR ( assignment . ; condition ; VARIABLE + + ) { statements }

    ;               shift and go to state 133


state 105

    (46) assignment -> VARIABLE . = term
    (47) assignment -> VARIABLE . = array
    (49) assignment -> VARIABLE . + = term
    (51) assignment -> VARIABLE . - = term
    (53) assignment -> VARIABLE . * = term
    (55) assignment -> VARIABLE . / = term
    (69) array_term -> VARIABLE . [ term ]

    =               shift and go to state 38
    +               shift and go to state 39
    -               shift and go to state 40
    *               shift and go to state 41
    /               shift and go to state 42
    [               shift and go to state 44


state 106

    (48) assignment -> array_term . = term
    (50) assignment -> array_term . + = term
    (52) assignment -> array_term . - = term
    (54) assignment -> array_term . * = term
    (56) assignment -> array_term . / = term

    =               shift and go to state 49
    +               shift and go to state 50
    -               shift and go to state 51
    *               shift and go to state 52
    /               shift and go to state 53


state 107

    (18) function -> DEF VARIABLE ( . functionTerms ) { statements }
    (19) function -> DEF VARIABLE ( . ) { statements }
    (24) functionTerms -> . VARIABLE
    (25) functionTerms -> . functionTerms , VARIABLE

    )               shift and go to state 136
    VARIABLE        shift and go to state 134

    functionTerms                  shift and go to state 135

state 108

    (79) len -> LEN ( VARIABLE . )

    )               shift and go to state 137


state 109

    (70) array -> [ pcontent . ]
    (71) pcontent -> pcontent . , term

    ]               shift and go to state 138
    ,               shift and go to state 123


state 110

    (49) assignment -> VARIABLE + = term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 49 (assignment -> VARIABLE + = term .)
    (               reduce using rule 49 (assignment -> VARIABLE + = term .)
    PRINT           reduce using rule 49 (assignment -> VARIABLE + = term .)
    IF              reduce using rule 49 (assignment -> VARIABLE + = term .)
    ELSE            reduce using rule 49 (assignment -> VARIABLE + = term .)
    ELIF            reduce using rule 49 (assignment -> VARIABLE + = term .)
    WHILE           reduce using rule 49 (assignment -> VARIABLE + = term .)
    BREAK           reduce using rule 49 (assignment -> VARIABLE + = term .)
    FOR             reduce using rule 49 (assignment -> VARIABLE + = term .)
    DEF             reduce using rule 49 (assignment -> VARIABLE + = term .)
    RETURN          reduce using rule 49 (assignment -> VARIABLE + = term .)
    NUMBER          reduce using rule 49 (assignment -> VARIABLE + = term .)
    LEN             reduce using rule 49 (assignment -> VARIABLE + = term .)
    $end            reduce using rule 49 (assignment -> VARIABLE + = term .)
    }               reduce using rule 49 (assignment -> VARIABLE + = term .)
    ;               reduce using rule 49 (assignment -> VARIABLE + = term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 111

    (51) assignment -> VARIABLE - = term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 51 (assignment -> VARIABLE - = term .)
    (               reduce using rule 51 (assignment -> VARIABLE - = term .)
    PRINT           reduce using rule 51 (assignment -> VARIABLE - = term .)
    IF              reduce using rule 51 (assignment -> VARIABLE - = term .)
    ELSE            reduce using rule 51 (assignment -> VARIABLE - = term .)
    ELIF            reduce using rule 51 (assignment -> VARIABLE - = term .)
    WHILE           reduce using rule 51 (assignment -> VARIABLE - = term .)
    BREAK           reduce using rule 51 (assignment -> VARIABLE - = term .)
    FOR             reduce using rule 51 (assignment -> VARIABLE - = term .)
    DEF             reduce using rule 51 (assignment -> VARIABLE - = term .)
    RETURN          reduce using rule 51 (assignment -> VARIABLE - = term .)
    NUMBER          reduce using rule 51 (assignment -> VARIABLE - = term .)
    LEN             reduce using rule 51 (assignment -> VARIABLE - = term .)
    $end            reduce using rule 51 (assignment -> VARIABLE - = term .)
    }               reduce using rule 51 (assignment -> VARIABLE - = term .)
    ;               reduce using rule 51 (assignment -> VARIABLE - = term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 112

    (53) assignment -> VARIABLE * = term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 53 (assignment -> VARIABLE * = term .)
    (               reduce using rule 53 (assignment -> VARIABLE * = term .)
    PRINT           reduce using rule 53 (assignment -> VARIABLE * = term .)
    IF              reduce using rule 53 (assignment -> VARIABLE * = term .)
    ELSE            reduce using rule 53 (assignment -> VARIABLE * = term .)
    ELIF            reduce using rule 53 (assignment -> VARIABLE * = term .)
    WHILE           reduce using rule 53 (assignment -> VARIABLE * = term .)
    BREAK           reduce using rule 53 (assignment -> VARIABLE * = term .)
    FOR             reduce using rule 53 (assignment -> VARIABLE * = term .)
    DEF             reduce using rule 53 (assignment -> VARIABLE * = term .)
    RETURN          reduce using rule 53 (assignment -> VARIABLE * = term .)
    NUMBER          reduce using rule 53 (assignment -> VARIABLE * = term .)
    LEN             reduce using rule 53 (assignment -> VARIABLE * = term .)
    $end            reduce using rule 53 (assignment -> VARIABLE * = term .)
    }               reduce using rule 53 (assignment -> VARIABLE * = term .)
    ;               reduce using rule 53 (assignment -> VARIABLE * = term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 113

    (55) assignment -> VARIABLE / = term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 55 (assignment -> VARIABLE / = term .)
    (               reduce using rule 55 (assignment -> VARIABLE / = term .)
    PRINT           reduce using rule 55 (assignment -> VARIABLE / = term .)
    IF              reduce using rule 55 (assignment -> VARIABLE / = term .)
    ELSE            reduce using rule 55 (assignment -> VARIABLE / = term .)
    ELIF            reduce using rule 55 (assignment -> VARIABLE / = term .)
    WHILE           reduce using rule 55 (assignment -> VARIABLE / = term .)
    BREAK           reduce using rule 55 (assignment -> VARIABLE / = term .)
    FOR             reduce using rule 55 (assignment -> VARIABLE / = term .)
    DEF             reduce using rule 55 (assignment -> VARIABLE / = term .)
    RETURN          reduce using rule 55 (assignment -> VARIABLE / = term .)
    NUMBER          reduce using rule 55 (assignment -> VARIABLE / = term .)
    LEN             reduce using rule 55 (assignment -> VARIABLE / = term .)
    $end            reduce using rule 55 (assignment -> VARIABLE / = term .)
    }               reduce using rule 55 (assignment -> VARIABLE / = term .)
    ;               reduce using rule 55 (assignment -> VARIABLE / = term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 114

    (20) runFunction -> VARIABLE ( runFunctionTerms ) .

    VARIABLE        reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    (               reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    PRINT           reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    IF              reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    ELSE            reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    ELIF            reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    WHILE           reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    BREAK           reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    FOR             reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    DEF             reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    RETURN          reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    NUMBER          reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    LEN             reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    $end            reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    +               reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    -               reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    *               reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    /               reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    }               reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    ;               reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    )               reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    ,               reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    ]               reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    >               reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    <               reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    =               reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    AND             reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)
    OR              reduce using rule 20 (runFunction -> VARIABLE ( runFunctionTerms ) .)


state 115

    (23) runFunctionTerms -> runFunctionTerms , . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 139
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 116

    (69) array_term -> VARIABLE [ term ] .

    =               reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    +               reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    -               reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    *               reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    /               reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    VARIABLE        reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    (               reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    PRINT           reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    IF              reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    ELSE            reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    ELIF            reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    WHILE           reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    BREAK           reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    FOR             reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    DEF             reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    RETURN          reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    NUMBER          reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    LEN             reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    $end            reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    }               reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    ;               reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    )               reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    ,               reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    ]               reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    >               reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    <               reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    AND             reduce using rule 69 (array_term -> VARIABLE [ term ] .)
    OR              reduce using rule 69 (array_term -> VARIABLE [ term ] .)


state 117

    (67) DIV_ext -> term / / term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
    VARIABLE        reduce using rule 67 (DIV_ext -> term / / term .)
    (               reduce using rule 67 (DIV_ext -> term / / term .)
    PRINT           reduce using rule 67 (DIV_ext -> term / / term .)
    IF              reduce using rule 67 (DIV_ext -> term / / term .)
    ELSE            reduce using rule 67 (DIV_ext -> term / / term .)
    ELIF            reduce using rule 67 (DIV_ext -> term / / term .)
    WHILE           reduce using rule 67 (DIV_ext -> term / / term .)
    BREAK           reduce using rule 67 (DIV_ext -> term / / term .)
    FOR             reduce using rule 67 (DIV_ext -> term / / term .)
    DEF             reduce using rule 67 (DIV_ext -> term / / term .)
    RETURN          reduce using rule 67 (DIV_ext -> term / / term .)
    NUMBER          reduce using rule 67 (DIV_ext -> term / / term .)
    LEN             reduce using rule 67 (DIV_ext -> term / / term .)
    $end            reduce using rule 67 (DIV_ext -> term / / term .)
    )               reduce using rule 67 (DIV_ext -> term / / term .)
    }               reduce using rule 67 (DIV_ext -> term / / term .)
    ;               reduce using rule 67 (DIV_ext -> term / / term .)
    ,               reduce using rule 67 (DIV_ext -> term / / term .)
    ]               reduce using rule 67 (DIV_ext -> term / / term .)
    >               reduce using rule 67 (DIV_ext -> term / / term .)
    <               reduce using rule 67 (DIV_ext -> term / / term .)
    =               reduce using rule 67 (DIV_ext -> term / / term .)
    AND             reduce using rule 67 (DIV_ext -> term / / term .)
    OR              reduce using rule 67 (DIV_ext -> term / / term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48

  ! +               [ reduce using rule 67 (DIV_ext -> term / / term .) ]
  ! -               [ reduce using rule 67 (DIV_ext -> term / / term .) ]
  ! *               [ reduce using rule 67 (DIV_ext -> term / / term .) ]
  ! /               [ reduce using rule 67 (DIV_ext -> term / / term .) ]


state 118

    (50) assignment -> array_term + = term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 50 (assignment -> array_term + = term .)
    (               reduce using rule 50 (assignment -> array_term + = term .)
    PRINT           reduce using rule 50 (assignment -> array_term + = term .)
    IF              reduce using rule 50 (assignment -> array_term + = term .)
    ELSE            reduce using rule 50 (assignment -> array_term + = term .)
    ELIF            reduce using rule 50 (assignment -> array_term + = term .)
    WHILE           reduce using rule 50 (assignment -> array_term + = term .)
    BREAK           reduce using rule 50 (assignment -> array_term + = term .)
    FOR             reduce using rule 50 (assignment -> array_term + = term .)
    DEF             reduce using rule 50 (assignment -> array_term + = term .)
    RETURN          reduce using rule 50 (assignment -> array_term + = term .)
    NUMBER          reduce using rule 50 (assignment -> array_term + = term .)
    LEN             reduce using rule 50 (assignment -> array_term + = term .)
    $end            reduce using rule 50 (assignment -> array_term + = term .)
    }               reduce using rule 50 (assignment -> array_term + = term .)
    ;               reduce using rule 50 (assignment -> array_term + = term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 119

    (52) assignment -> array_term - = term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 52 (assignment -> array_term - = term .)
    (               reduce using rule 52 (assignment -> array_term - = term .)
    PRINT           reduce using rule 52 (assignment -> array_term - = term .)
    IF              reduce using rule 52 (assignment -> array_term - = term .)
    ELSE            reduce using rule 52 (assignment -> array_term - = term .)
    ELIF            reduce using rule 52 (assignment -> array_term - = term .)
    WHILE           reduce using rule 52 (assignment -> array_term - = term .)
    BREAK           reduce using rule 52 (assignment -> array_term - = term .)
    FOR             reduce using rule 52 (assignment -> array_term - = term .)
    DEF             reduce using rule 52 (assignment -> array_term - = term .)
    RETURN          reduce using rule 52 (assignment -> array_term - = term .)
    NUMBER          reduce using rule 52 (assignment -> array_term - = term .)
    LEN             reduce using rule 52 (assignment -> array_term - = term .)
    $end            reduce using rule 52 (assignment -> array_term - = term .)
    }               reduce using rule 52 (assignment -> array_term - = term .)
    ;               reduce using rule 52 (assignment -> array_term - = term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 120

    (54) assignment -> array_term * = term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 54 (assignment -> array_term * = term .)
    (               reduce using rule 54 (assignment -> array_term * = term .)
    PRINT           reduce using rule 54 (assignment -> array_term * = term .)
    IF              reduce using rule 54 (assignment -> array_term * = term .)
    ELSE            reduce using rule 54 (assignment -> array_term * = term .)
    ELIF            reduce using rule 54 (assignment -> array_term * = term .)
    WHILE           reduce using rule 54 (assignment -> array_term * = term .)
    BREAK           reduce using rule 54 (assignment -> array_term * = term .)
    FOR             reduce using rule 54 (assignment -> array_term * = term .)
    DEF             reduce using rule 54 (assignment -> array_term * = term .)
    RETURN          reduce using rule 54 (assignment -> array_term * = term .)
    NUMBER          reduce using rule 54 (assignment -> array_term * = term .)
    LEN             reduce using rule 54 (assignment -> array_term * = term .)
    $end            reduce using rule 54 (assignment -> array_term * = term .)
    }               reduce using rule 54 (assignment -> array_term * = term .)
    ;               reduce using rule 54 (assignment -> array_term * = term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 121

    (56) assignment -> array_term / = term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    VARIABLE        reduce using rule 56 (assignment -> array_term / = term .)
    (               reduce using rule 56 (assignment -> array_term / = term .)
    PRINT           reduce using rule 56 (assignment -> array_term / = term .)
    IF              reduce using rule 56 (assignment -> array_term / = term .)
    ELSE            reduce using rule 56 (assignment -> array_term / = term .)
    ELIF            reduce using rule 56 (assignment -> array_term / = term .)
    WHILE           reduce using rule 56 (assignment -> array_term / = term .)
    BREAK           reduce using rule 56 (assignment -> array_term / = term .)
    FOR             reduce using rule 56 (assignment -> array_term / = term .)
    DEF             reduce using rule 56 (assignment -> array_term / = term .)
    RETURN          reduce using rule 56 (assignment -> array_term / = term .)
    NUMBER          reduce using rule 56 (assignment -> array_term / = term .)
    LEN             reduce using rule 56 (assignment -> array_term / = term .)
    $end            reduce using rule 56 (assignment -> array_term / = term .)
    }               reduce using rule 56 (assignment -> array_term / = term .)
    ;               reduce using rule 56 (assignment -> array_term / = term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 122

    (68) print -> PRINT ( pcontent ) .

    VARIABLE        reduce using rule 68 (print -> PRINT ( pcontent ) .)
    (               reduce using rule 68 (print -> PRINT ( pcontent ) .)
    PRINT           reduce using rule 68 (print -> PRINT ( pcontent ) .)
    IF              reduce using rule 68 (print -> PRINT ( pcontent ) .)
    ELSE            reduce using rule 68 (print -> PRINT ( pcontent ) .)
    ELIF            reduce using rule 68 (print -> PRINT ( pcontent ) .)
    WHILE           reduce using rule 68 (print -> PRINT ( pcontent ) .)
    BREAK           reduce using rule 68 (print -> PRINT ( pcontent ) .)
    FOR             reduce using rule 68 (print -> PRINT ( pcontent ) .)
    DEF             reduce using rule 68 (print -> PRINT ( pcontent ) .)
    RETURN          reduce using rule 68 (print -> PRINT ( pcontent ) .)
    NUMBER          reduce using rule 68 (print -> PRINT ( pcontent ) .)
    LEN             reduce using rule 68 (print -> PRINT ( pcontent ) .)
    $end            reduce using rule 68 (print -> PRINT ( pcontent ) .)
    }               reduce using rule 68 (print -> PRINT ( pcontent ) .)


state 123

    (71) pcontent -> pcontent , . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 140
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 124

    (29) if -> IF ( condition ) . { statements }

    {               shift and go to state 141


state 125

    (32) and -> condition AND . condition
    (34) condition -> . greater
    (35) condition -> . greater_equal
    (36) condition -> . less
    (37) condition -> . less_equal
    (38) condition -> . equal_equal
    (39) condition -> . and
    (40) condition -> . or
    (41) greater -> . term > term
    (42) greater_equal -> . term > = term
    (43) less -> . term < term
    (44) less_equal -> . term < = term
    (45) equal_equal -> . term = = term
    (32) and -> . condition AND condition
    (33) or -> . condition OR condition
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    condition                      shift and go to state 142
    greater                        shift and go to state 93
    greater_equal                  shift and go to state 94
    less                           shift and go to state 95
    less_equal                     shift and go to state 96
    equal_equal                    shift and go to state 97
    and                            shift and go to state 98
    or                             shift and go to state 99
    term                           shift and go to state 100
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 126

    (33) or -> condition OR . condition
    (34) condition -> . greater
    (35) condition -> . greater_equal
    (36) condition -> . less
    (37) condition -> . less_equal
    (38) condition -> . equal_equal
    (39) condition -> . and
    (40) condition -> . or
    (41) greater -> . term > term
    (42) greater_equal -> . term > = term
    (43) less -> . term < term
    (44) less_equal -> . term < = term
    (45) equal_equal -> . term = = term
    (32) and -> . condition AND condition
    (33) or -> . condition OR condition
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    condition                      shift and go to state 143
    greater                        shift and go to state 93
    greater_equal                  shift and go to state 94
    less                           shift and go to state 95
    less_equal                     shift and go to state 96
    equal_equal                    shift and go to state 97
    and                            shift and go to state 98
    or                             shift and go to state 99
    term                           shift and go to state 100
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 127

    (41) greater -> term > . term
    (42) greater_equal -> term > . = term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    =               shift and go to state 145
    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 144
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 128

    (45) equal_equal -> term = . = term

    =               shift and go to state 146


state 129

    (43) less -> term < . term
    (44) less_equal -> term < . = term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    =               shift and go to state 148
    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 147
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 130

    (30) else -> ELSE { statements } .

    VARIABLE        reduce using rule 30 (else -> ELSE { statements } .)
    (               reduce using rule 30 (else -> ELSE { statements } .)
    PRINT           reduce using rule 30 (else -> ELSE { statements } .)
    IF              reduce using rule 30 (else -> ELSE { statements } .)
    ELSE            reduce using rule 30 (else -> ELSE { statements } .)
    ELIF            reduce using rule 30 (else -> ELSE { statements } .)
    WHILE           reduce using rule 30 (else -> ELSE { statements } .)
    BREAK           reduce using rule 30 (else -> ELSE { statements } .)
    FOR             reduce using rule 30 (else -> ELSE { statements } .)
    DEF             reduce using rule 30 (else -> ELSE { statements } .)
    RETURN          reduce using rule 30 (else -> ELSE { statements } .)
    NUMBER          reduce using rule 30 (else -> ELSE { statements } .)
    LEN             reduce using rule 30 (else -> ELSE { statements } .)
    $end            reduce using rule 30 (else -> ELSE { statements } .)
    }               reduce using rule 30 (else -> ELSE { statements } .)


state 131

    (31) elif -> ELIF ( condition ) . { statements }

    {               shift and go to state 149


state 132

    (27) while -> WHILE ( condition ) . { statements }

    {               shift and go to state 150


state 133

    (28) for -> FOR ( assignment ; . condition ; VARIABLE + + ) { statements }
    (34) condition -> . greater
    (35) condition -> . greater_equal
    (36) condition -> . less
    (37) condition -> . less_equal
    (38) condition -> . equal_equal
    (39) condition -> . and
    (40) condition -> . or
    (41) greater -> . term > term
    (42) greater_equal -> . term > = term
    (43) less -> . term < term
    (44) less_equal -> . term < = term
    (45) equal_equal -> . term = = term
    (32) and -> . condition AND condition
    (33) or -> . condition OR condition
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    condition                      shift and go to state 151
    greater                        shift and go to state 93
    greater_equal                  shift and go to state 94
    less                           shift and go to state 95
    less_equal                     shift and go to state 96
    equal_equal                    shift and go to state 97
    and                            shift and go to state 98
    or                             shift and go to state 99
    term                           shift and go to state 100
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 134

    (24) functionTerms -> VARIABLE .

    )               reduce using rule 24 (functionTerms -> VARIABLE .)
    ,               reduce using rule 24 (functionTerms -> VARIABLE .)


state 135

    (18) function -> DEF VARIABLE ( functionTerms . ) { statements }
    (25) functionTerms -> functionTerms . , VARIABLE

    )               shift and go to state 152
    ,               shift and go to state 153


state 136

    (19) function -> DEF VARIABLE ( ) . { statements }

    {               shift and go to state 154


state 137

    (79) len -> LEN ( VARIABLE ) .

    +               reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    -               reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    *               reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    /               reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    VARIABLE        reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    (               reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    PRINT           reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    IF              reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    ELSE            reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    ELIF            reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    WHILE           reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    BREAK           reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    FOR             reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    DEF             reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    RETURN          reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    NUMBER          reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    LEN             reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    $end            reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    }               reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    ;               reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    )               reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    ,               reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    ]               reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    >               reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    <               reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    =               reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    AND             reduce using rule 79 (len -> LEN ( VARIABLE ) .)
    OR              reduce using rule 79 (len -> LEN ( VARIABLE ) .)


state 138

    (70) array -> [ pcontent ] .

    VARIABLE        reduce using rule 70 (array -> [ pcontent ] .)
    (               reduce using rule 70 (array -> [ pcontent ] .)
    PRINT           reduce using rule 70 (array -> [ pcontent ] .)
    IF              reduce using rule 70 (array -> [ pcontent ] .)
    ELSE            reduce using rule 70 (array -> [ pcontent ] .)
    ELIF            reduce using rule 70 (array -> [ pcontent ] .)
    WHILE           reduce using rule 70 (array -> [ pcontent ] .)
    BREAK           reduce using rule 70 (array -> [ pcontent ] .)
    FOR             reduce using rule 70 (array -> [ pcontent ] .)
    DEF             reduce using rule 70 (array -> [ pcontent ] .)
    RETURN          reduce using rule 70 (array -> [ pcontent ] .)
    NUMBER          reduce using rule 70 (array -> [ pcontent ] .)
    LEN             reduce using rule 70 (array -> [ pcontent ] .)
    $end            reduce using rule 70 (array -> [ pcontent ] .)
    }               reduce using rule 70 (array -> [ pcontent ] .)
    ;               reduce using rule 70 (array -> [ pcontent ] .)


state 139

    (23) runFunctionTerms -> runFunctionTerms , term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    )               reduce using rule 23 (runFunctionTerms -> runFunctionTerms , term .)
    ,               reduce using rule 23 (runFunctionTerms -> runFunctionTerms , term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 140

    (71) pcontent -> pcontent , term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    )               reduce using rule 71 (pcontent -> pcontent , term .)
    ,               reduce using rule 71 (pcontent -> pcontent , term .)
    ]               reduce using rule 71 (pcontent -> pcontent , term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 141

    (29) if -> IF ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (68) print -> . PRINT ( pcontent )
    (29) if -> . IF ( condition ) { statements }
    (30) else -> . ELSE { statements }
    (31) elif -> . ELIF ( condition ) { statements }
    (27) while -> . WHILE ( condition ) { statements }
    (26) break -> . BREAK
    (28) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (18) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (19) function -> . DEF VARIABLE ( ) { statements }
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (16) return -> . RETURN
    (17) return -> . RETURN term
    (69) array_term -> . VARIABLE [ term ]
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (79) len -> . LEN ( VARIABLE )

    VARIABLE        shift and go to state 16
    (               shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    ELSE            shift and go to state 27
    ELIF            shift and go to state 28
    WHILE           shift and go to state 29
    BREAK           shift and go to state 30
    FOR             shift and go to state 31
    DEF             shift and go to state 32
    RETURN          shift and go to state 33
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    statements                     shift and go to state 155
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    term                           shift and go to state 17
    array_term                     shift and go to state 18
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    len                            shift and go to state 35

state 142

    (32) and -> condition AND condition .
    (32) and -> condition . AND condition
    (33) or -> condition . OR condition

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    )               reduce using rule 32 (and -> condition AND condition .)
    ;               reduce using rule 32 (and -> condition AND condition .)
    AND             shift and go to state 125
    OR              shift and go to state 126

  ! AND             [ reduce using rule 32 (and -> condition AND condition .) ]
  ! OR              [ reduce using rule 32 (and -> condition AND condition .) ]


state 143

    (33) or -> condition OR condition .
    (32) and -> condition . AND condition
    (33) or -> condition . OR condition

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    )               reduce using rule 33 (or -> condition OR condition .)
    ;               reduce using rule 33 (or -> condition OR condition .)
    AND             shift and go to state 125
    OR              shift and go to state 126

  ! AND             [ reduce using rule 33 (or -> condition OR condition .) ]
  ! OR              [ reduce using rule 33 (or -> condition OR condition .) ]


state 144

    (41) greater -> term > term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    )               reduce using rule 41 (greater -> term > term .)
    AND             reduce using rule 41 (greater -> term > term .)
    OR              reduce using rule 41 (greater -> term > term .)
    ;               reduce using rule 41 (greater -> term > term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 145

    (42) greater_equal -> term > = . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 156
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 146

    (45) equal_equal -> term = = . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 157
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 147

    (43) less -> term < term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    )               reduce using rule 43 (less -> term < term .)
    AND             reduce using rule 43 (less -> term < term .)
    OR              reduce using rule 43 (less -> term < term .)
    ;               reduce using rule 43 (less -> term < term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 148

    (44) less_equal -> term < = . term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (69) array_term -> . VARIABLE [ term ]
    (79) len -> . LEN ( VARIABLE )
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term

    VARIABLE        shift and go to state 55
    NUMBER          shift and go to state 34
    (               shift and go to state 24
    LEN             shift and go to state 36

    term                           shift and go to state 158
    operation                      shift and go to state 66
    array_term                     shift and go to state 56
    len                            shift and go to state 35
    runFunction                    shift and go to state 57
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23

state 149

    (31) elif -> ELIF ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (68) print -> . PRINT ( pcontent )
    (29) if -> . IF ( condition ) { statements }
    (30) else -> . ELSE { statements }
    (31) elif -> . ELIF ( condition ) { statements }
    (27) while -> . WHILE ( condition ) { statements }
    (26) break -> . BREAK
    (28) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (18) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (19) function -> . DEF VARIABLE ( ) { statements }
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (16) return -> . RETURN
    (17) return -> . RETURN term
    (69) array_term -> . VARIABLE [ term ]
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (79) len -> . LEN ( VARIABLE )

    VARIABLE        shift and go to state 16
    (               shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    ELSE            shift and go to state 27
    ELIF            shift and go to state 28
    WHILE           shift and go to state 29
    BREAK           shift and go to state 30
    FOR             shift and go to state 31
    DEF             shift and go to state 32
    RETURN          shift and go to state 33
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    statements                     shift and go to state 159
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    term                           shift and go to state 17
    array_term                     shift and go to state 18
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    len                            shift and go to state 35

state 150

    (27) while -> WHILE ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (68) print -> . PRINT ( pcontent )
    (29) if -> . IF ( condition ) { statements }
    (30) else -> . ELSE { statements }
    (31) elif -> . ELIF ( condition ) { statements }
    (27) while -> . WHILE ( condition ) { statements }
    (26) break -> . BREAK
    (28) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (18) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (19) function -> . DEF VARIABLE ( ) { statements }
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (16) return -> . RETURN
    (17) return -> . RETURN term
    (69) array_term -> . VARIABLE [ term ]
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (79) len -> . LEN ( VARIABLE )

    VARIABLE        shift and go to state 16
    (               shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    ELSE            shift and go to state 27
    ELIF            shift and go to state 28
    WHILE           shift and go to state 29
    BREAK           shift and go to state 30
    FOR             shift and go to state 31
    DEF             shift and go to state 32
    RETURN          shift and go to state 33
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    statements                     shift and go to state 160
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    term                           shift and go to state 17
    array_term                     shift and go to state 18
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    len                            shift and go to state 35

state 151

    (28) for -> FOR ( assignment ; condition . ; VARIABLE + + ) { statements }
    (32) and -> condition . AND condition
    (33) or -> condition . OR condition

    ;               shift and go to state 161
    AND             shift and go to state 125
    OR              shift and go to state 126


state 152

    (18) function -> DEF VARIABLE ( functionTerms ) . { statements }

    {               shift and go to state 162


state 153

    (25) functionTerms -> functionTerms , . VARIABLE

    VARIABLE        shift and go to state 163


state 154

    (19) function -> DEF VARIABLE ( ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (68) print -> . PRINT ( pcontent )
    (29) if -> . IF ( condition ) { statements }
    (30) else -> . ELSE { statements }
    (31) elif -> . ELIF ( condition ) { statements }
    (27) while -> . WHILE ( condition ) { statements }
    (26) break -> . BREAK
    (28) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (18) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (19) function -> . DEF VARIABLE ( ) { statements }
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (16) return -> . RETURN
    (17) return -> . RETURN term
    (69) array_term -> . VARIABLE [ term ]
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (79) len -> . LEN ( VARIABLE )

    VARIABLE        shift and go to state 16
    (               shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    ELSE            shift and go to state 27
    ELIF            shift and go to state 28
    WHILE           shift and go to state 29
    BREAK           shift and go to state 30
    FOR             shift and go to state 31
    DEF             shift and go to state 32
    RETURN          shift and go to state 33
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    statements                     shift and go to state 164
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    term                           shift and go to state 17
    array_term                     shift and go to state 18
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    len                            shift and go to state 35

state 155

    (29) if -> IF ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (68) print -> . PRINT ( pcontent )
    (29) if -> . IF ( condition ) { statements }
    (30) else -> . ELSE { statements }
    (31) elif -> . ELIF ( condition ) { statements }
    (27) while -> . WHILE ( condition ) { statements }
    (26) break -> . BREAK
    (28) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (18) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (19) function -> . DEF VARIABLE ( ) { statements }
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (16) return -> . RETURN
    (17) return -> . RETURN term
    (69) array_term -> . VARIABLE [ term ]
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (79) len -> . LEN ( VARIABLE )

    }               shift and go to state 165
    VARIABLE        shift and go to state 16
    (               shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    ELSE            shift and go to state 27
    ELIF            shift and go to state 28
    WHILE           shift and go to state 29
    BREAK           shift and go to state 30
    FOR             shift and go to state 31
    DEF             shift and go to state 32
    RETURN          shift and go to state 33
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    statement                      shift and go to state 37
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    term                           shift and go to state 17
    array_term                     shift and go to state 18
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    len                            shift and go to state 35

state 156

    (42) greater_equal -> term > = term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    )               reduce using rule 42 (greater_equal -> term > = term .)
    AND             reduce using rule 42 (greater_equal -> term > = term .)
    OR              reduce using rule 42 (greater_equal -> term > = term .)
    ;               reduce using rule 42 (greater_equal -> term > = term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 157

    (45) equal_equal -> term = = term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    )               reduce using rule 45 (equal_equal -> term = = term .)
    AND             reduce using rule 45 (equal_equal -> term = = term .)
    OR              reduce using rule 45 (equal_equal -> term = = term .)
    ;               reduce using rule 45 (equal_equal -> term = = term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 158

    (44) less_equal -> term < = term .
    (63) ADD -> term . + term
    (64) SUB -> term . - term
    (65) MUL -> term . * term
    (66) DIV -> term . / term
    (67) DIV_ext -> term . / / term

    )               reduce using rule 44 (less_equal -> term < = term .)
    AND             reduce using rule 44 (less_equal -> term < = term .)
    OR              reduce using rule 44 (less_equal -> term < = term .)
    ;               reduce using rule 44 (less_equal -> term < = term .)
    +               shift and go to state 45
    -               shift and go to state 46
    *               shift and go to state 47
    /               shift and go to state 48


state 159

    (31) elif -> ELIF ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (68) print -> . PRINT ( pcontent )
    (29) if -> . IF ( condition ) { statements }
    (30) else -> . ELSE { statements }
    (31) elif -> . ELIF ( condition ) { statements }
    (27) while -> . WHILE ( condition ) { statements }
    (26) break -> . BREAK
    (28) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (18) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (19) function -> . DEF VARIABLE ( ) { statements }
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (16) return -> . RETURN
    (17) return -> . RETURN term
    (69) array_term -> . VARIABLE [ term ]
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (79) len -> . LEN ( VARIABLE )

    }               shift and go to state 166
    VARIABLE        shift and go to state 16
    (               shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    ELSE            shift and go to state 27
    ELIF            shift and go to state 28
    WHILE           shift and go to state 29
    BREAK           shift and go to state 30
    FOR             shift and go to state 31
    DEF             shift and go to state 32
    RETURN          shift and go to state 33
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    statement                      shift and go to state 37
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    term                           shift and go to state 17
    array_term                     shift and go to state 18
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    len                            shift and go to state 35

state 160

    (27) while -> WHILE ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (68) print -> . PRINT ( pcontent )
    (29) if -> . IF ( condition ) { statements }
    (30) else -> . ELSE { statements }
    (31) elif -> . ELIF ( condition ) { statements }
    (27) while -> . WHILE ( condition ) { statements }
    (26) break -> . BREAK
    (28) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (18) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (19) function -> . DEF VARIABLE ( ) { statements }
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (16) return -> . RETURN
    (17) return -> . RETURN term
    (69) array_term -> . VARIABLE [ term ]
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (79) len -> . LEN ( VARIABLE )

    }               shift and go to state 167
    VARIABLE        shift and go to state 16
    (               shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    ELSE            shift and go to state 27
    ELIF            shift and go to state 28
    WHILE           shift and go to state 29
    BREAK           shift and go to state 30
    FOR             shift and go to state 31
    DEF             shift and go to state 32
    RETURN          shift and go to state 33
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    statement                      shift and go to state 37
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    term                           shift and go to state 17
    array_term                     shift and go to state 18
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    len                            shift and go to state 35

state 161

    (28) for -> FOR ( assignment ; condition ; . VARIABLE + + ) { statements }

    VARIABLE        shift and go to state 168


state 162

    (18) function -> DEF VARIABLE ( functionTerms ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (68) print -> . PRINT ( pcontent )
    (29) if -> . IF ( condition ) { statements }
    (30) else -> . ELSE { statements }
    (31) elif -> . ELIF ( condition ) { statements }
    (27) while -> . WHILE ( condition ) { statements }
    (26) break -> . BREAK
    (28) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (18) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (19) function -> . DEF VARIABLE ( ) { statements }
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (16) return -> . RETURN
    (17) return -> . RETURN term
    (69) array_term -> . VARIABLE [ term ]
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (79) len -> . LEN ( VARIABLE )

    VARIABLE        shift and go to state 16
    (               shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    ELSE            shift and go to state 27
    ELIF            shift and go to state 28
    WHILE           shift and go to state 29
    BREAK           shift and go to state 30
    FOR             shift and go to state 31
    DEF             shift and go to state 32
    RETURN          shift and go to state 33
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    statements                     shift and go to state 169
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    term                           shift and go to state 17
    array_term                     shift and go to state 18
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    len                            shift and go to state 35

state 163

    (25) functionTerms -> functionTerms , VARIABLE .

    )               reduce using rule 25 (functionTerms -> functionTerms , VARIABLE .)
    ,               reduce using rule 25 (functionTerms -> functionTerms , VARIABLE .)


state 164

    (19) function -> DEF VARIABLE ( ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (68) print -> . PRINT ( pcontent )
    (29) if -> . IF ( condition ) { statements }
    (30) else -> . ELSE { statements }
    (31) elif -> . ELIF ( condition ) { statements }
    (27) while -> . WHILE ( condition ) { statements }
    (26) break -> . BREAK
    (28) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (18) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (19) function -> . DEF VARIABLE ( ) { statements }
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (16) return -> . RETURN
    (17) return -> . RETURN term
    (69) array_term -> . VARIABLE [ term ]
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (79) len -> . LEN ( VARIABLE )

    }               shift and go to state 170
    VARIABLE        shift and go to state 16
    (               shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    ELSE            shift and go to state 27
    ELIF            shift and go to state 28
    WHILE           shift and go to state 29
    BREAK           shift and go to state 30
    FOR             shift and go to state 31
    DEF             shift and go to state 32
    RETURN          shift and go to state 33
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    statement                      shift and go to state 37
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    term                           shift and go to state 17
    array_term                     shift and go to state 18
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    len                            shift and go to state 35

state 165

    (29) if -> IF ( condition ) { statements } .

    VARIABLE        reduce using rule 29 (if -> IF ( condition ) { statements } .)
    (               reduce using rule 29 (if -> IF ( condition ) { statements } .)
    PRINT           reduce using rule 29 (if -> IF ( condition ) { statements } .)
    IF              reduce using rule 29 (if -> IF ( condition ) { statements } .)
    ELSE            reduce using rule 29 (if -> IF ( condition ) { statements } .)
    ELIF            reduce using rule 29 (if -> IF ( condition ) { statements } .)
    WHILE           reduce using rule 29 (if -> IF ( condition ) { statements } .)
    BREAK           reduce using rule 29 (if -> IF ( condition ) { statements } .)
    FOR             reduce using rule 29 (if -> IF ( condition ) { statements } .)
    DEF             reduce using rule 29 (if -> IF ( condition ) { statements } .)
    RETURN          reduce using rule 29 (if -> IF ( condition ) { statements } .)
    NUMBER          reduce using rule 29 (if -> IF ( condition ) { statements } .)
    LEN             reduce using rule 29 (if -> IF ( condition ) { statements } .)
    $end            reduce using rule 29 (if -> IF ( condition ) { statements } .)
    }               reduce using rule 29 (if -> IF ( condition ) { statements } .)


state 166

    (31) elif -> ELIF ( condition ) { statements } .

    VARIABLE        reduce using rule 31 (elif -> ELIF ( condition ) { statements } .)
    (               reduce using rule 31 (elif -> ELIF ( condition ) { statements } .)
    PRINT           reduce using rule 31 (elif -> ELIF ( condition ) { statements } .)
    IF              reduce using rule 31 (elif -> ELIF ( condition ) { statements } .)
    ELSE            reduce using rule 31 (elif -> ELIF ( condition ) { statements } .)
    ELIF            reduce using rule 31 (elif -> ELIF ( condition ) { statements } .)
    WHILE           reduce using rule 31 (elif -> ELIF ( condition ) { statements } .)
    BREAK           reduce using rule 31 (elif -> ELIF ( condition ) { statements } .)
    FOR             reduce using rule 31 (elif -> ELIF ( condition ) { statements } .)
    DEF             reduce using rule 31 (elif -> ELIF ( condition ) { statements } .)
    RETURN          reduce using rule 31 (elif -> ELIF ( condition ) { statements } .)
    NUMBER          reduce using rule 31 (elif -> ELIF ( condition ) { statements } .)
    LEN             reduce using rule 31 (elif -> ELIF ( condition ) { statements } .)
    $end            reduce using rule 31 (elif -> ELIF ( condition ) { statements } .)
    }               reduce using rule 31 (elif -> ELIF ( condition ) { statements } .)


state 167

    (27) while -> WHILE ( condition ) { statements } .

    VARIABLE        reduce using rule 27 (while -> WHILE ( condition ) { statements } .)
    (               reduce using rule 27 (while -> WHILE ( condition ) { statements } .)
    PRINT           reduce using rule 27 (while -> WHILE ( condition ) { statements } .)
    IF              reduce using rule 27 (while -> WHILE ( condition ) { statements } .)
    ELSE            reduce using rule 27 (while -> WHILE ( condition ) { statements } .)
    ELIF            reduce using rule 27 (while -> WHILE ( condition ) { statements } .)
    WHILE           reduce using rule 27 (while -> WHILE ( condition ) { statements } .)
    BREAK           reduce using rule 27 (while -> WHILE ( condition ) { statements } .)
    FOR             reduce using rule 27 (while -> WHILE ( condition ) { statements } .)
    DEF             reduce using rule 27 (while -> WHILE ( condition ) { statements } .)
    RETURN          reduce using rule 27 (while -> WHILE ( condition ) { statements } .)
    NUMBER          reduce using rule 27 (while -> WHILE ( condition ) { statements } .)
    LEN             reduce using rule 27 (while -> WHILE ( condition ) { statements } .)
    $end            reduce using rule 27 (while -> WHILE ( condition ) { statements } .)
    }               reduce using rule 27 (while -> WHILE ( condition ) { statements } .)


state 168

    (28) for -> FOR ( assignment ; condition ; VARIABLE . + + ) { statements }

    +               shift and go to state 171


state 169

    (18) function -> DEF VARIABLE ( functionTerms ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (68) print -> . PRINT ( pcontent )
    (29) if -> . IF ( condition ) { statements }
    (30) else -> . ELSE { statements }
    (31) elif -> . ELIF ( condition ) { statements }
    (27) while -> . WHILE ( condition ) { statements }
    (26) break -> . BREAK
    (28) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (18) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (19) function -> . DEF VARIABLE ( ) { statements }
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (16) return -> . RETURN
    (17) return -> . RETURN term
    (69) array_term -> . VARIABLE [ term ]
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (79) len -> . LEN ( VARIABLE )

    }               shift and go to state 172
    VARIABLE        shift and go to state 16
    (               shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    ELSE            shift and go to state 27
    ELIF            shift and go to state 28
    WHILE           shift and go to state 29
    BREAK           shift and go to state 30
    FOR             shift and go to state 31
    DEF             shift and go to state 32
    RETURN          shift and go to state 33
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    statement                      shift and go to state 37
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    term                           shift and go to state 17
    array_term                     shift and go to state 18
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    len                            shift and go to state 35

state 170

    (19) function -> DEF VARIABLE ( ) { statements } .

    VARIABLE        reduce using rule 19 (function -> DEF VARIABLE ( ) { statements } .)
    (               reduce using rule 19 (function -> DEF VARIABLE ( ) { statements } .)
    PRINT           reduce using rule 19 (function -> DEF VARIABLE ( ) { statements } .)
    IF              reduce using rule 19 (function -> DEF VARIABLE ( ) { statements } .)
    ELSE            reduce using rule 19 (function -> DEF VARIABLE ( ) { statements } .)
    ELIF            reduce using rule 19 (function -> DEF VARIABLE ( ) { statements } .)
    WHILE           reduce using rule 19 (function -> DEF VARIABLE ( ) { statements } .)
    BREAK           reduce using rule 19 (function -> DEF VARIABLE ( ) { statements } .)
    FOR             reduce using rule 19 (function -> DEF VARIABLE ( ) { statements } .)
    DEF             reduce using rule 19 (function -> DEF VARIABLE ( ) { statements } .)
    RETURN          reduce using rule 19 (function -> DEF VARIABLE ( ) { statements } .)
    NUMBER          reduce using rule 19 (function -> DEF VARIABLE ( ) { statements } .)
    LEN             reduce using rule 19 (function -> DEF VARIABLE ( ) { statements } .)
    $end            reduce using rule 19 (function -> DEF VARIABLE ( ) { statements } .)
    }               reduce using rule 19 (function -> DEF VARIABLE ( ) { statements } .)


state 171

    (28) for -> FOR ( assignment ; condition ; VARIABLE + . + ) { statements }

    +               shift and go to state 173


state 172

    (18) function -> DEF VARIABLE ( functionTerms ) { statements } .

    VARIABLE        reduce using rule 18 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    (               reduce using rule 18 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    PRINT           reduce using rule 18 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    IF              reduce using rule 18 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    ELSE            reduce using rule 18 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    ELIF            reduce using rule 18 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    WHILE           reduce using rule 18 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    BREAK           reduce using rule 18 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    FOR             reduce using rule 18 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    DEF             reduce using rule 18 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    RETURN          reduce using rule 18 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    NUMBER          reduce using rule 18 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    LEN             reduce using rule 18 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    $end            reduce using rule 18 (function -> DEF VARIABLE ( functionTerms ) { statements } .)
    }               reduce using rule 18 (function -> DEF VARIABLE ( functionTerms ) { statements } .)


state 173

    (28) for -> FOR ( assignment ; condition ; VARIABLE + + . ) { statements }

    )               shift and go to state 174


state 174

    (28) for -> FOR ( assignment ; condition ; VARIABLE + + ) . { statements }

    {               shift and go to state 175


state 175

    (28) for -> FOR ( assignment ; condition ; VARIABLE + + ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (68) print -> . PRINT ( pcontent )
    (29) if -> . IF ( condition ) { statements }
    (30) else -> . ELSE { statements }
    (31) elif -> . ELIF ( condition ) { statements }
    (27) while -> . WHILE ( condition ) { statements }
    (26) break -> . BREAK
    (28) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (18) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (19) function -> . DEF VARIABLE ( ) { statements }
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (16) return -> . RETURN
    (17) return -> . RETURN term
    (69) array_term -> . VARIABLE [ term ]
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (79) len -> . LEN ( VARIABLE )

    VARIABLE        shift and go to state 16
    (               shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    ELSE            shift and go to state 27
    ELIF            shift and go to state 28
    WHILE           shift and go to state 29
    BREAK           shift and go to state 30
    FOR             shift and go to state 31
    DEF             shift and go to state 32
    RETURN          shift and go to state 33
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    assignment                     shift and go to state 4
    statements                     shift and go to state 176
    statement                      shift and go to state 3
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    term                           shift and go to state 17
    array_term                     shift and go to state 18
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    len                            shift and go to state 35

state 176

    (28) for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . else
    (9) statement -> . elif
    (10) statement -> . while
    (11) statement -> . break
    (12) statement -> . for
    (13) statement -> . function
    (14) statement -> . runFunction
    (15) statement -> . return
    (46) assignment -> . VARIABLE = term
    (47) assignment -> . VARIABLE = array
    (48) assignment -> . array_term = term
    (49) assignment -> . VARIABLE + = term
    (50) assignment -> . array_term + = term
    (51) assignment -> . VARIABLE - = term
    (52) assignment -> . array_term - = term
    (53) assignment -> . VARIABLE * = term
    (54) assignment -> . array_term * = term
    (55) assignment -> . VARIABLE / = term
    (56) assignment -> . array_term / = term
    (57) operation -> . ADD
    (58) operation -> . SUB
    (59) operation -> . MUL
    (60) operation -> . DIV
    (61) operation -> . DIV_ext
    (62) operation -> . ( operation )
    (68) print -> . PRINT ( pcontent )
    (29) if -> . IF ( condition ) { statements }
    (30) else -> . ELSE { statements }
    (31) elif -> . ELIF ( condition ) { statements }
    (27) while -> . WHILE ( condition ) { statements }
    (26) break -> . BREAK
    (28) for -> . FOR ( assignment ; condition ; VARIABLE + + ) { statements }
    (18) function -> . DEF VARIABLE ( functionTerms ) { statements }
    (19) function -> . DEF VARIABLE ( ) { statements }
    (20) runFunction -> . VARIABLE ( runFunctionTerms )
    (21) runFunction -> . VARIABLE ( )
    (16) return -> . RETURN
    (17) return -> . RETURN term
    (69) array_term -> . VARIABLE [ term ]
    (63) ADD -> . term + term
    (64) SUB -> . term - term
    (65) MUL -> . term * term
    (66) DIV -> . term / term
    (67) DIV_ext -> . term / / term
    (73) term -> . VARIABLE
    (74) term -> . NUMBER
    (75) term -> . operation
    (76) term -> . array_term
    (77) term -> . len
    (78) term -> . runFunction
    (79) len -> . LEN ( VARIABLE )

    }               shift and go to state 177
    VARIABLE        shift and go to state 16
    (               shift and go to state 24
    PRINT           shift and go to state 25
    IF              shift and go to state 26
    ELSE            shift and go to state 27
    ELIF            shift and go to state 28
    WHILE           shift and go to state 29
    BREAK           shift and go to state 30
    FOR             shift and go to state 31
    DEF             shift and go to state 32
    RETURN          shift and go to state 33
    NUMBER          shift and go to state 34
    LEN             shift and go to state 36

    assignment                     shift and go to state 4
    statement                      shift and go to state 37
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    else                           shift and go to state 8
    elif                           shift and go to state 9
    while                          shift and go to state 10
    break                          shift and go to state 11
    for                            shift and go to state 12
    function                       shift and go to state 13
    runFunction                    shift and go to state 14
    return                         shift and go to state 15
    term                           shift and go to state 17
    array_term                     shift and go to state 18
    ADD                            shift and go to state 19
    SUB                            shift and go to state 20
    MUL                            shift and go to state 21
    DIV                            shift and go to state 22
    DIV_ext                        shift and go to state 23
    len                            shift and go to state 35

state 177

    (28) for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .

    VARIABLE        reduce using rule 28 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    (               reduce using rule 28 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    PRINT           reduce using rule 28 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    IF              reduce using rule 28 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    ELSE            reduce using rule 28 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    ELIF            reduce using rule 28 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    WHILE           reduce using rule 28 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    BREAK           reduce using rule 28 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    FOR             reduce using rule 28 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    DEF             reduce using rule 28 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    RETURN          reduce using rule 28 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    NUMBER          reduce using rule 28 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    LEN             reduce using rule 28 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    $end            reduce using rule 28 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)
    }               reduce using rule 28 (for -> FOR ( assignment ; condition ; VARIABLE + + ) { statements } .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for + in state 16 resolved as shift
WARNING: shift/reduce conflict for - in state 16 resolved as shift
WARNING: shift/reduce conflict for * in state 16 resolved as shift
WARNING: shift/reduce conflict for / in state 16 resolved as shift
WARNING: shift/reduce conflict for + in state 18 resolved as shift
WARNING: shift/reduce conflict for - in state 18 resolved as shift
WARNING: shift/reduce conflict for * in state 18 resolved as shift
WARNING: shift/reduce conflict for / in state 18 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 33 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 33 resolved as shift
WARNING: shift/reduce conflict for ( in state 33 resolved as shift
WARNING: shift/reduce conflict for LEN in state 33 resolved as shift
WARNING: shift/reduce conflict for ( in state 55 resolved as shift
WARNING: shift/reduce conflict for + in state 79 resolved as shift
WARNING: shift/reduce conflict for - in state 79 resolved as shift
WARNING: shift/reduce conflict for * in state 79 resolved as shift
WARNING: shift/reduce conflict for / in state 79 resolved as shift
WARNING: shift/reduce conflict for + in state 80 resolved as shift
WARNING: shift/reduce conflict for - in state 80 resolved as shift
WARNING: shift/reduce conflict for * in state 80 resolved as shift
WARNING: shift/reduce conflict for / in state 80 resolved as shift
WARNING: shift/reduce conflict for + in state 81 resolved as shift
WARNING: shift/reduce conflict for - in state 81 resolved as shift
WARNING: shift/reduce conflict for * in state 81 resolved as shift
WARNING: shift/reduce conflict for / in state 81 resolved as shift
WARNING: shift/reduce conflict for + in state 82 resolved as shift
WARNING: shift/reduce conflict for - in state 82 resolved as shift
WARNING: shift/reduce conflict for * in state 82 resolved as shift
WARNING: shift/reduce conflict for / in state 82 resolved as shift
WARNING: shift/reduce conflict for + in state 117 resolved as shift
WARNING: shift/reduce conflict for - in state 117 resolved as shift
WARNING: shift/reduce conflict for * in state 117 resolved as shift
WARNING: shift/reduce conflict for / in state 117 resolved as shift
WARNING: shift/reduce conflict for AND in state 142 resolved as shift
WARNING: shift/reduce conflict for OR in state 142 resolved as shift
WARNING: shift/reduce conflict for AND in state 143 resolved as shift
WARNING: shift/reduce conflict for OR in state 143 resolved as shift
